"use strict";(self.webpackChunkfar_blog=self.webpackChunkfar_blog||[]).push([[3580],{6262:(e,t)=>{t.A=(e,t)=>{const i=e.__vccOpts||e;for(const[e,a]of t)i[e]=a;return i}},4333:(e,t,i)=>{i.r(t),i.d(t,{comp:()=>n,data:()=>r});var a=i(641);const c=[(0,a.Fv)('<h2 id="_2-1-引言" tabindex="-1"><a class="header-anchor" href="#_2-1-引言"><span>2.1 引言</span></a></h2><div class="hint-container important"><p class="hint-container-title">重要</p><p>链路层的三个目的</p><ol><li>位IP模块发送和接收IP数据报。</li><li>为ARP模块发送ARP请求和接收ARP应答。</li><li>为RARP发送RARP请求和接收RARP应答。</li></ol></div><h2 id="_2-2-以太网和ieee-802封装" tabindex="-1"><a class="header-anchor" href="#_2-2-以太网和ieee-802封装"><span>2.2 以太网和IEEE 802封装</span></a></h2><p>两种帧格式都采用<code>48bit(6byte)的目的地址和源地址(802.3允许使用16 bit的地址，但一般是48 bit地址)，即硬件地址(mac地址)。ARP和RARP协议对32bit的ip地址和48bit的mac地址进行映射。</code><br> 接下来的2个字节在两种帧格式中互不相同。在802标准定义的帧格式中，<code>长度字段是指它后续数据的字节长度，但不包括CRC检验码。</code>以太网的类型字段定义了后续数据的类型。在802标准定义的帧格式中，类型字段则由后续的<code>子网接入协议（Sub-network Access Protocol，SNAP）的首部给出。</code><br><code>在以太网帧格式中，类型字段之后就是数据</code>；而在802帧格式中，跟随在后面的是<code>3字节的802.2LLC和5字节的802.2SNAP。目的服务访问点（Destination Service Access Point, DSAP）和源服务访问点（Source Service Access Point, SSAP）的值都设为0xaa。Ct rl字段的值设为3。随后的3个字节org code都置为0。</code>再接下来的2个字节类型字段和以太网帧格式一样（其他类型字段值可以参见RFC 1340[Reynolds and Postel 1992]）。<br> CRC字段用于<code>帧内后续字节差错的循环冗余码检验（检验和）（它也被称为FCS或帧检验序列）。</code></p><figure><img src="/image/tcp_ip/chapter02/2-1.png" alt="图2-1 IEEE 802.2/802.3（RFC 1042）和以太网的封装格式（RFC 894）" tabindex="0" loading="lazy"><figcaption>图2-1 IEEE 802.2/802.3（RFC 1042）和以太网的封装格式（RFC 894）</figcaption></figure><div class="hint-container important"><p class="hint-container-title">重要</p><p>802.3标准定义的帧和以太网的帧都有最小长度要求。802.3规定数据部分必须至少为38字节，而对于以太网，则要求最少要有46字节。为了保证这一点，必须在不足的空间插入填充（pad）字节。</p></div><h2 id="_2-4-环回接口" tabindex="-1"><a class="header-anchor" href="#_2-4-环回接口"><span>2.4 环回接口</span></a></h2><p>大多数的产品都支持环回接口（Loopback Interface），<code>以允许运行在同一台主机上的客户程序和服务器程序通过TCP/IP进行通信。</code>A类网络号127就是为环回接口预留的。根据惯例，<code>大多数系统把IP地址127.0.0.1分配给这个接口，并命名为localhost。一个传给环回接口的IP数据报不能在任何网络上出现。</code><br><img src="/image/tcp_ip/chapter02/2-2.png" alt="图2-2 环回接口处理ip数据报的过程" loading="lazy"></p><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li>传给环回地址（一般是127.0.0.1）的任何数据均作为IP输入。</li><li>传给广播地址或多播地址的数据报复制一份传给环回接口，然后送到以太网上。这是因为广播传送和多播传送的定义包含主机本身。</li><li>任何传给该主机IP地址的数据均送到环回接口。</li></ol></div><h2 id="_2-5-mtu-最大传输单元" tabindex="-1"><a class="header-anchor" href="#_2-5-mtu-最大传输单元"><span>2.5 MTU(最大传输单元)</span></a></h2>',10)],o={},n=(0,i(6262).A)(o,[["render",function(e,t){return(0,a.uX)(),(0,a.CE)("div",null,c)}]]),r=JSON.parse('{"path":"/cs/tcp_ip/chapter02.html","title":"第2章 链路层","lang":"zh-CN","frontmatter":{"title":"第2章 链路层","date":"2025-09-01T00:00:00.000Z","tags":["计算机基础","计算机网络"],"categories":"计算机网络","isOriginal":true,"order":2,"dir":{"order":2},"description":"2.1 引言 重要 链路层的三个目的 位IP模块发送和接收IP数据报。 为ARP模块发送ARP请求和接收ARP应答。 为RARP发送RARP请求和接收RARP应答。 2.2 以太网和IEEE 802封装 两种帧格式都采用48bit(6byte)的目的地址和源地址(802.3允许使用16 bit的地址，但一般是48 bit地址)，即硬件地址(mac地址)...","head":[["meta",{"property":"og:url","content":"https://hncat.github.io/cs/tcp_ip/chapter02.html"}],["meta",{"property":"og:site_name","content":"far"}],["meta",{"property":"og:title","content":"第2章 链路层"}],["meta",{"property":"og:description","content":"2.1 引言 重要 链路层的三个目的 位IP模块发送和接收IP数据报。 为ARP模块发送ARP请求和接收ARP应答。 为RARP发送RARP请求和接收RARP应答。 2.2 以太网和IEEE 802封装 两种帧格式都采用48bit(6byte)的目的地址和源地址(802.3允许使用16 bit的地址，但一般是48 bit地址)，即硬件地址(mac地址)..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hncat.github.io/image/tcp_ip/chapter02/2-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T10:58:26.000Z"}],["meta",{"property":"article:author","content":"Mr.far"}],["meta",{"property":"article:tag","content":"计算机基础"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:published_time","content":"2025-09-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-01T10:58:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第2章 链路层\\",\\"image\\":[\\"https://hncat.github.io/image/tcp_ip/chapter02/2-1.png\\",\\"https://hncat.github.io/image/tcp_ip/chapter02/2-2.png\\"],\\"datePublished\\":\\"2025-09-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-01T10:58:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.far\\",\\"url\\":\\"https://hncat.github.io\\"}]}"]]},"headers":[{"level":2,"title":"2.1 引言","slug":"_2-1-引言","link":"#_2-1-引言","children":[]},{"level":2,"title":"2.2 以太网和IEEE 802封装","slug":"_2-2-以太网和ieee-802封装","link":"#_2-2-以太网和ieee-802封装","children":[]},{"level":2,"title":"2.4 环回接口","slug":"_2-4-环回接口","link":"#_2-4-环回接口","children":[]},{"level":2,"title":"2.5 MTU(最大传输单元)","slug":"_2-5-mtu-最大传输单元","link":"#_2-5-mtu-最大传输单元","children":[]}],"git":{"createdTime":1756724306000,"updatedTime":1756724306000,"contributors":[{"name":"far","email":"far@fardebijibendiannao.local","commits":1}]},"readingTime":{"minutes":2.6,"words":780},"filePathRelative":"cs/tcp_ip/chapter02.md","localizedDate":"2025年9月1日","excerpt":"<h2>2.1 引言</h2>\\n<div class=\\"hint-container important\\">\\n<p class=\\"hint-container-title\\">重要</p>\\n<p>链路层的三个目的</p>\\n<ol>\\n<li>位IP模块发送和接收IP数据报。</li>\\n<li>为ARP模块发送ARP请求和接收ARP应答。</li>\\n<li>为RARP发送RARP请求和接收RARP应答。</li>\\n</ol>\\n</div>\\n<h2>2.2 以太网和IEEE 802封装</h2>\\n<p>两种帧格式都采用<code>48bit(6byte)的目的地址和源地址(802.3允许使用16 bit的地址，但一般是48 bit地址)，即硬件地址(mac地址)。ARP和RARP协议对32bit的ip地址和48bit的mac地址进行映射。</code><br>\\n接下来的2个字节在两种帧格式中互不相同。在802标准定义的帧格式中，<code>长度字段是指它后续数据的字节长度，但不包括CRC检验码。</code>以太网的类型字段定义了后续数据的类型。在802标准定义的帧格式中，类型字段则由后续的<code>子网接入协议（Sub-network Access Protocol，SNAP）的首部给出。</code><br>\\n<code>在以太网帧格式中，类型字段之后就是数据</code>；而在802帧格式中，跟随在后面的是<code>3字节的802.2LLC和5字节的802.2SNAP。目的服务访问点（Destination Service Access Point, DSAP）和源服务访问点（Source Service Access Point, SSAP）的值都设为0xaa。Ct rl字段的值设为3。随后的3个字节org code都置为0。</code>再接下来的2个字节类型字段和以太网帧格式一样（其他类型字段值可以参见RFC 1340[Reynolds and Postel 1992]）。<br>\\nCRC字段用于<code>帧内后续字节差错的循环冗余码检验（检验和）（它也被称为FCS或帧检验序列）。</code></p>","autoDesc":true}')}}]);