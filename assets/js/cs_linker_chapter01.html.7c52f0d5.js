"use strict";(self.webpackChunkfar_blog=self.webpackChunkfar_blog||[]).push([[447],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},8723:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>h,data:()=>t});var e=a(641);const n=[(0,e.Fv)('<h2 id="_1-被隐藏的过程" tabindex="-1"><a class="header-anchor" href="#_1-被隐藏的过程"><span>1. 被隐藏的过程</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// hello.c</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;stdio.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;hello world</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用gcc生成可执行文件</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">./hello</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> World</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gcc生成可执行文件的四个步骤</p><ol><li>预处理</li><li>编译</li><li>汇编</li><li>链接</li></ol><h3 id="_1-1-预处理" tabindex="-1"><a class="header-anchor" href="#_1-1-预处理"><span>1.1 预处理</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>1. 展开所有宏定义 (#define)</span></span>\n<span class="line"><span>2. 处理所有预编译指令 (#if #ifdef #elif #else #endif)</span></span>\n<span class="line"><span>3. 处理#include预编译指令,将被包含的文件插入到该预处理指令的位置。递归的执行</span></span>\n<span class="line"><span>4. 删除所有注释</span></span>\n<span class="line"><span>5. 添加行号和文件名标号。比如 #2 &quot;hello.c&quot; 2, 以便于编译时编译器产生调试用的行号信息及用于编译时产生编译错误或警告时能够显示行号。</span></span>\n<span class="line"><span>6. 保留所有的#pragma编译指令，因为编译器需要使用它们。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成预处理文件 *.i</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -E</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello.i</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">或者</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">cpp</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello.c</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello.i</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-编译" tabindex="-1"><a class="header-anchor" href="#_1-2-编译"><span>1.2 编译</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>将预处理文件经过一系列词法分析、语法分析、语义分析及优化后生成汇编的过程。程序构建的核心。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>生成汇编文件 .s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello.i</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello.s</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">或者</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/usr/lib/gcc/x86_64-linux-gnu/11/cc1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello.i</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-汇编" tabindex="-1"><a class="header-anchor" href="#_1-3-汇编"><span>1.3 汇编</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>将每一条汇编指令翻译成对应机器码的过程。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>生成目标文件（或者中间目标文件）*.o</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">as</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello.s</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello.o</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">或者</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello.s</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> hello.o</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-链接" tabindex="-1"><a class="header-anchor" href="#_1-4-链接"><span>1.4 链接</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>通过使用链接器(ld)链接一堆文件生成最终的可执行文件的过程。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>如hello文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-静态链接" tabindex="-1"><a class="header-anchor" href="#_2-静态链接"><span>2. 静态链接</span></a></h2><h3 id="_2-1-链接的基本定义" tabindex="-1"><a class="header-anchor" href="#_2-1-链接的基本定义"><span>2.1 链接的基本定义</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>将每个源代码模块独立编译，然后安装需要将他们“组装”起来的过程被称为链接。</span></span>\n<span class="line"><span>链接的本质就是把一些指令对其它符号地址的引用加以修改。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-链接的过程" tabindex="-1"><a class="header-anchor" href="#_2-2-链接的过程"><span>2.2 链接的过程</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>地址和空间分配、符号决议和重定位。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-3-重定位" tabindex="-1"><a class="header-anchor" href="#_2-3-重定位"><span>2.3 重定位</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>在链接过程中，对定义在其它目标文件中的函数调用的指令需要被重新调整，对使用定义在其它目标文件中的变量也是如此。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>比如:</span></span>\n<span class="line"><span>  有目标文件A有全局变量var</span></span>\n<span class="line"><span>  对目标文件B有 movq 0x2a, var</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  c7 05 00 00 00 00 2a    movq   $0x2a,0x0(%rip)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>由于编译目标文件B时无法确认var的目标地址，所以编译器在无法确认var地址的情况下，只能将movq指令的目标地址置0，</span></span>\n<span class="line"><span>等待链接器再将目标文件A和B链接起来时再将其修正。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>例如A和B链接后，变量var的地址确认为0x1000，那么链接器将会把这个指令的目标地址部分修改为0x1000。</span></span>\n<span class="line"><span>这个地址修正的过程也被叫做“重定位(Relocation)”，每个要修正的地方叫一个“重定位入口(Relocation Entry)”。</span></span>\n<span class="line"><span>重定位所做的就是给程序中每个这样的绝对地址引用的地址进行修正。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-其它" tabindex="-1"><a class="header-anchor" href="#_2-4-其它"><span>2.4 其它</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>运行时库：支撑程序运行的基本函数集合。</span></span>\n<span class="line"><span>库：一组目标文件(.o后缀的文件)的包</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>',27)],l={},h=(0,a(6262).A)(l,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,n)}]]),t=JSON.parse('{"path":"/cs/linker/chapter01.html","title":"第一章 编译和链接","lang":"zh-CN","frontmatter":{"title":"第一章 编译和链接","date":"2024-06-22T00:00:00.000Z","tags":["计算机基础","c/c++"],"categories":"链接、装载与库","isOriginal":true,"order":1,"dir":{"order":1},"description":"1. 被隐藏的过程 使用gcc生成可执行文件 gcc生成可执行文件的四个步骤 预处理 编译 汇编 链接 1.1 预处理 生成预处理文件 *.i 1.2 编译 1.3 汇编 1.4 链接 2. 静态链接 2.1 链接的基本定义 2.2 链接的过程 2.3 重定位 2.4 其它","head":[["meta",{"property":"og:url","content":"https://hncat.github.io/cs/linker/chapter01.html"}],["meta",{"property":"og:site_name","content":"far"}],["meta",{"property":"og:title","content":"第一章 编译和链接"}],["meta",{"property":"og:description","content":"1. 被隐藏的过程 使用gcc生成可执行文件 gcc生成可执行文件的四个步骤 预处理 编译 汇编 链接 1.1 预处理 生成预处理文件 *.i 1.2 编译 1.3 汇编 1.4 链接 2. 静态链接 2.1 链接的基本定义 2.2 链接的过程 2.3 重定位 2.4 其它"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-01T05:16:42.000Z"}],["meta",{"property":"article:author","content":"Mr.far"}],["meta",{"property":"article:tag","content":"计算机基础"}],["meta",{"property":"article:tag","content":"c/c++"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-01T05:16:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一章 编译和链接\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-01T05:16:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.far\\",\\"url\\":\\"https://hncat.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. 被隐藏的过程","slug":"_1-被隐藏的过程","link":"#_1-被隐藏的过程","children":[{"level":3,"title":"1.1 预处理","slug":"_1-1-预处理","link":"#_1-1-预处理","children":[]},{"level":3,"title":"1.2 编译","slug":"_1-2-编译","link":"#_1-2-编译","children":[]},{"level":3,"title":"1.3 汇编","slug":"_1-3-汇编","link":"#_1-3-汇编","children":[]},{"level":3,"title":"1.4 链接","slug":"_1-4-链接","link":"#_1-4-链接","children":[]}]},{"level":2,"title":"2. 静态链接","slug":"_2-静态链接","link":"#_2-静态链接","children":[{"level":3,"title":"2.1 链接的基本定义","slug":"_2-1-链接的基本定义","link":"#_2-1-链接的基本定义","children":[]},{"level":3,"title":"2.2 链接的过程","slug":"_2-2-链接的过程","link":"#_2-2-链接的过程","children":[]},{"level":3,"title":"2.3 重定位","slug":"_2-3-重定位","link":"#_2-3-重定位","children":[]},{"level":3,"title":"2.4 其它","slug":"_2-4-其它","link":"#_2-4-其它","children":[]}]}],"git":{"createdTime":1719501072000,"updatedTime":1719811002000,"contributors":[{"name":"far","email":"v19991123v@163.com","commits":2}]},"readingTime":{"minutes":2.7,"words":809},"filePathRelative":"cs/linker/chapter01.md","localizedDate":"2024年6月22日","excerpt":"<h2>1. 被隐藏的过程</h2>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c\\" data-title=\\"c\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\">// hello.c</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">#include</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> &lt;stdio.h&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> main</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">() {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">  printf</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"hello world</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#56B6C2\\">\\\\n</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">  return</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> 0</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);