const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":193,\"nextId\":193,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"2@1\",\"4\":\"5\",\"5\":\"6\",\"6\":\"6#_1-被隐藏的过程\",\"7\":\"6#_1-1-预处理\",\"8\":\"6#_1-2-编译\",\"9\":\"6#_1-3-汇编\",\"10\":\"6#_1-4-链接\",\"11\":\"6#_2-静态链接\",\"12\":\"6#_2-1-链接的基本定义\",\"13\":\"6#_2-2-链接的过程\",\"14\":\"6#_2-3-重定位\",\"15\":\"6#_2-4-其它\",\"16\":\"7\",\"17\":\"7#_1-目标文件的格式\",\"18\":\"7#_2-目标文件是什么样的\",\"19\":\"7#_3-挖掘simplesection-o\",\"20\":\"7#_3-1-代码段\",\"21\":\"7#_3-2-数据段和只读数据段\",\"22\":\"7#_3-3-bss段\",\"23\":\"7#_3-3-其它段\",\"24\":\"7#_4-elf文件结构描述\",\"25\":\"7#_4-1-文件头\",\"26\":\"7#_4-1-2-文件类型\",\"27\":\"7#_4-1-3-机器类型\",\"28\":\"7#_4-2-段表\",\"29\":\"7#_4-2-1-段描述符的结构\",\"30\":\"7#_4-2-1-1-段的类型-sh-type\",\"31\":\"7#_4-2-1-2-段的标志位-sh-flags\",\"32\":\"7#_4-2-1-3-段的链接信息-sh-link、sh-info\",\"33\":\"7#_4-3-重定位表\",\"34\":\"7#_4-4-字符串表\",\"35\":\"7#_5-链接的接口-符号-symbol\",\"36\":\"7#_5-1-elf符号表结构\",\"37\":\"7#_5-1-1-符号类型和绑定类型-st-info\",\"38\":\"7#_5-1-2-符号所在段-st-shndx\",\"39\":\"7#_5-1-3-符号值-st-value\",\"40\":\"7#_5-2-特殊符号\",\"41\":\"7#_5-3-1-c-符号修饰\",\"42\":\"7#_5-4-extern-c\",\"43\":\"7#_5-5-强符合与弱符号\",\"44\":\"7#弱引用和强引用\",\"45\":\"7#_5-6-调试信息\",\"46\":\"8\",\"47\":\"8#_1-空间与地址分配\",\"48\":\"8#_1-1-按序叠加\",\"49\":\"8#_1-2-相似段合并\",\"50\":\"8#_1-3-符号地址的确定\",\"51\":\"8#_2-符号解析与重定位\",\"52\":\"8#_2-1-重定位\",\"53\":\"8#修正后的地址\",\"54\":\"8#_2-2-重定位表\",\"55\":\"8#_2-3-符号解析\",\"56\":\"8#_2-4-指令修正方式-参考csapp-原书第七章-7-7\",\"57\":\"8#_3-common块\",\"58\":\"8#_4-静态库链接\",\"59\":\"9\",\"60\":\"9#_1-装载的方式\",\"61\":\"9#_1-1-覆盖装入\",\"62\":\"9#_1-2-页映射\",\"63\":\"9#_2-从操作系统角度看可执行文件的装载\",\"64\":\"9#_2-1-进程的建立\",\"65\":\"9#_2-2-页错误\",\"66\":\"9#_3-进程虚拟空间分布\",\"67\":\"9#_3-1-elf文件链接视图和执行视图\",\"68\":\"9#_3-2-堆和栈\",\"69\":\"9#_3-3-段地址对齐\",\"70\":\"9#_3-4-进程栈初始化\",\"71\":\"10\",\"72\":\"10#_1-什么是动态链接\",\"73\":\"10#_2-简单的动态链接例子\",\"74\":\"10#_3-地址无关代码\",\"75\":\"10#_3-1-固定装载地址的困扰\",\"76\":\"10#_3-2-装载时重定位\",\"77\":\"10#_3-3-地址无关代码\",\"78\":\"10#_3-4-共享模块的全局变量问题\",\"79\":\"10#_3-5-数据段地址无关性\",\"80\":\"10#_4-延迟绑定-plt\",\"81\":\"10#_5-动态链接相关结构\",\"82\":\"10#_5-1-interp-段\",\"83\":\"10#_5-2-dynamic-段\",\"84\":\"10#_5-3-动态符号表\",\"85\":\"10#_5-4-动态链接重定位表\",\"86\":\"10#_5-5-动态链接时进程堆栈初始化信息\",\"87\":\"10#_6-动态链接的步骤和实现\",\"88\":\"10#_6-1-动态链接器自举\",\"89\":\"10#_6-2-装载共享对象\",\"90\":\"10#_6-3-重定位和初始化\",\"91\":\"10#_7-库打桩机制-hook\",\"92\":\"10#_7-1-编译时打桩\",\"93\":\"10#_7-2-链接时打桩\",\"94\":\"10#_7-3-运行时打桩\",\"95\":\"11\",\"96\":\"12\",\"97\":\"12#_1-1-连接\",\"98\":\"12#mysql的选项和参数\",\"99\":\"12#_1-2-选择数据库\",\"100\":\"12#_1-3-了解数据库和表\",\"101\":\"13\",\"102\":\"13#_2-1-查询单个列\",\"103\":\"13#_2-2-查询多个列\",\"104\":\"13#_2-3-查询所有列\",\"105\":\"13#_2-4-查询不同的行\",\"106\":\"13#_2-5-分页\",\"107\":\"13#_2-6-使用完全限定的表名\",\"108\":\"13#_2-7-总结\",\"109\":\"14\",\"110\":\"14#_3-1-排序数据\",\"111\":\"14#_3-2-按多个列排序\",\"112\":\"14#_3-3-指定排序方向\",\"113\":\"14#_3-3-1-使用limit和desc获取最贵的物品的价格\",\"114\":\"15\",\"115\":\"15#_4-1-使用where子句\",\"116\":\"15#_4-2-where子句操作符\",\"117\":\"15#_4-2-1-检查单个值\",\"118\":\"15#_4-2-2-不匹配检查\",\"119\":\"15#_4-2-3-范围检查\",\"120\":\"15#_4-2-4-空值检查\",\"121\":\"16\",\"122\":\"16#_5-1-组合where语句\",\"123\":\"16#_5-1-1-and操作符\",\"124\":\"16#_5-1-2-or操作符\",\"125\":\"16#_5-1-3-计算次序\",\"126\":\"16#_5-2-in操作符\",\"127\":\"16#_5-3-not操作符\",\"128\":\"17\",\"129\":\"17#_6-1-like操作符\",\"130\":\"17#_6-1-1-百分号-通配符\",\"131\":\"17#_6-1-2-下划线-通配符\",\"132\":\"17#_6-2-使用通配符的技巧\",\"133\":\"18\",\"134\":\"18#_7-1-使用mysql正则表达式\",\"135\":\"18#_7-1-1-基本字符匹配\",\"136\":\"18#_7-1-2-进行or匹配\",\"137\":\"18#_7-1-3-匹配几个字符之一\",\"138\":\"18#_7-1-4-匹配范围\",\"139\":\"18#_7-1-5-匹配特殊字符\",\"140\":\"18#_7-1-6-匹配字符类\",\"141\":\"18#_7-1-7-匹配多个实例\",\"142\":\"18#_7-1-8-定位符\",\"143\":\"19\",\"144\":\"19#_8-1-拼接字段\",\"145\":\"19#_8-1-1-使用别名-alias\",\"146\":\"19#_8-2-执行算术计算\",\"147\":\"20\",\"148\":\"20#_9-1-使用函数\",\"149\":\"20#_9-1-1-文本处理函数\",\"150\":\"20#_9-1-2-日期和时间处理函数\",\"151\":\"20#_9-1-3-数值处理函数\",\"152\":\"21\",\"153\":\"21#_10-1-聚集函数\",\"154\":\"21#_10-1-1-avg-函数\",\"155\":\"21#_10-1-2-count-函数\",\"156\":\"21#_10-1-3-max-函数\",\"157\":\"21#_10-1-4-min-函数\",\"158\":\"21#_10-1-5-sum-函数\",\"159\":\"21#_10-2-聚集不同的值\",\"160\":\"21#_10-3-组合聚集函数\",\"161\":\"22\",\"162\":\"22#_11-1-数据分组\",\"163\":\"22#_11-2-创建分组\",\"164\":\"22#_11-3-过滤分组-having\",\"165\":\"22#_11-4-分组和排序\",\"166\":\"22#_11-5-select子句顺序\",\"167\":\"23\",\"168\":\"23#_12-1-利用子查询进行过滤\",\"169\":\"23#_12-2-作为计算字段使用子查询\",\"170\":\"24\",\"171\":\"24#_13-1-联结\",\"172\":\"24#_13-1-1-关系表\",\"173\":\"24#_13-2-创建联结\",\"174\":\"24#_13-2-1-where子句的重要性\",\"175\":\"24#_13-2-2-内部联结\",\"176\":\"24#_13-2-3-联结多个表\",\"177\":\"25\",\"178\":\"25#_14-1-使用表别名\",\"179\":\"25#_14-2-使用不同类型的联结\",\"180\":\"25#_14-2-1-自联结\",\"181\":\"25#_14-2-2-自然联结\",\"182\":\"25#_14-2-3-外部联结\",\"183\":\"25#_14-3-使用带聚集函数的联结\",\"184\":\"25#_14-4-使用联结和联结条件\",\"185\":\"26\",\"186\":\"26#_15-1-组合查询\",\"187\":\"26#_15-2-创建组合查询\",\"188\":\"26#_15-2-1-使用union\",\"189\":\"26#_15-2-2-union规则\",\"190\":\"26#_15-2-3-包含或取消重复的行\",\"191\":\"26#_15-2-4-对组合查询结果排序\",\"192\":\"27\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[2],\"2\":[null,null,2],\"3\":[null,null,2],\"4\":[2],\"5\":[2],\"6\":[2,24],\"7\":[2,36],\"8\":[3,21],\"9\":[3,11],\"10\":[3,4],\"11\":[2],\"12\":[3,6],\"13\":[2,3],\"14\":[3,31],\"15\":[3,6],\"16\":[2],\"17\":[2,57],\"18\":[2,39],\"19\":[3,111],\"20\":[3,204],\"21\":[3,25],\"22\":[2,77],\"23\":[2,1],\"24\":[2,15],\"25\":[3,127],\"26\":[4,1],\"27\":[4,1],\"28\":[3,152],\"29\":[4,67],\"30\":[7,8],\"31\":[7,5],\"32\":[9,8],\"33\":[3,29],\"34\":[2,17],\"35\":[5,73],\"36\":[3,31],\"37\":[6,7],\"38\":[7,8],\"39\":[7,83],\"40\":[3,61],\"41\":[5,69],\"42\":[5,31],\"43\":[2,62],\"44\":[1,56],\"45\":[3,2],\"46\":[2,19],\"47\":[2,3],\"48\":[2,19],\"49\":[3,218],\"50\":[3,30],\"51\":[2],\"52\":[3,104],\"53\":[1,121],\"54\":[2,107],\"55\":[3,165],\"56\":[7,74],\"57\":[2,39],\"58\":[2,43],\"59\":[2],\"60\":[2],\"61\":[2,8],\"62\":[3,4],\"63\":[2],\"64\":[3,54],\"65\":[2,18],\"66\":[2],\"67\":[3,404],\"68\":[3,92],\"69\":[2,40],\"70\":[3,23],\"71\":[2],\"72\":[2,10],\"73\":[2,315],\"74\":[2],\"75\":[3,47],\"76\":[3,27],\"77\":[2,376],\"78\":[3,62],\"79\":[3,29],\"80\":[4,207],\"81\":[2,43],\"82\":[4,68],\"83\":[4,176],\"84\":[3,132],\"85\":[3,160],\"86\":[2,113],\"87\":[2,4],\"88\":[3,37],\"89\":[3,214],\"90\":[3,27],\"91\":[4,37],\"92\":[3,24],\"93\":[3,48],\"94\":[3,60],\"95\":[1],\"96\":[2],\"97\":[2],\"98\":[1,80],\"99\":[3,4],\"100\":[3,79],\"101\":[2],\"102\":[3,36],\"103\":[2,64],\"104\":[3,109],\"105\":[3,25],\"106\":[3,49],\"107\":[3,39],\"108\":[3,9],\"109\":[2],\"110\":[3,38],\"111\":[3,70],\"112\":[2,77],\"113\":[3,34],\"114\":[2],\"115\":[3,29],\"116\":[3,16],\"117\":[4,58],\"118\":[3,41],\"119\":[4,37],\"120\":[3,49],\"121\":[2],\"122\":[3],\"123\":[3,43],\"124\":[4,58],\"125\":[4,55],\"126\":[3,58],\"127\":[3,45],\"128\":[2],\"129\":[3,11],\"130\":[4,65],\"131\":[5,33],\"132\":[3,13],\"133\":[2],\"134\":[3],\"135\":[3,45],\"136\":[4,33],\"137\":[4,39],\"138\":[4,45],\"139\":[4,42],\"140\":[4,49],\"141\":[3,59],\"142\":[4,51],\"143\":[2],\"144\":[3,49],\"145\":[5,38],\"146\":[3,52],\"147\":[2],\"148\":[3],\"149\":[3,94],\"150\":[4,129],\"151\":[4,20],\"152\":[2],\"153\":[3,12],\"154\":[4,45],\"155\":[5,42],\"156\":[5,36],\"157\":[5,44],\"158\":[5,40],\"159\":[3,32],\"160\":[3,29],\"161\":[2],\"162\":[3,31],\"163\":[3,88],\"164\":[5,154],\"165\":[3,57],\"166\":[3,22],\"167\":[2],\"168\":[3,67],\"169\":[3,53],\"170\":[2],\"171\":[3],\"172\":[3,11],\"173\":[3,71],\"174\":[4,76],\"175\":[3,79],\"176\":[4,51],\"177\":[2],\"178\":[3,37],\"179\":[3],\"180\":[4,59],\"181\":[3,77],\"182\":[4,73],\"183\":[3,41],\"184\":[3,15],\"185\":[2],\"186\":[3,27],\"187\":[3,6],\"188\":[4,51],\"189\":[3,14],\"190\":[4,63],\"191\":[4,43],\"192\":[1,3]},\"averageFieldLength\":[3.0362694300518145,54.7744489845757,1],\"storedFields\":{\"0\":{\"h\":\"介绍页\"},\"1\":{\"h\":\"c/c++\"},\"2\":{\"c\":[\"c/c++\"]},\"3\":{\"c\":[\"c/c++\"]},\"4\":{\"h\":\"链接、装载和库\"},\"5\":{\"h\":\"第一章 编译和链接\"},\"6\":{\"h\":\"1. 被隐藏的过程\",\"t\":[\"// hello.c #include <stdio.h> int main() { printf(\\\"hello world\\\\n\\\"); return 0; }\",\"使用gcc生成可执行文件\",\"$> gcc hello.c -o hello $> ./hello Hello World\",\"gcc生成可执行文件的四个步骤\",\"预处理\",\"编译\",\"汇编\",\"链接\"]},\"7\":{\"h\":\"1.1 预处理\",\"t\":[\"1. 展开所有宏定义 (#define) 2. 处理所有预编译指令 (#if #ifdef #elif #else #endif) 3. 处理#include预编译指令,将被包含的文件插入到该预处理指令的位置。递归的执行 4. 删除所有注释 5. 添加行号和文件名标号。比如 #2 \\\"hello.c\\\" 2, 以便于编译时编译器产生调试用的行号信息及用于编译时产生编译错误或警告时能够显示行号。 6. 保留所有的#pragma编译指令，因为编译器需要使用它们。\",\"生成预处理文件 *.i\",\"$> gcc -E hello.c -o hello.i 或者 $> cpp hello.c > hello.i\"]},\"8\":{\"h\":\"1.2 编译\",\"t\":[\"将预处理文件经过一系列词法分析、语法分析、语义分析及优化后生成汇编的过程。程序构建的核心。 生成汇编文件 .s\",\"$> gcc -S hello.i -o hello.s 或者 $> /usr/lib/gcc/x86_64-linux-gnu/11/cc1 hello.i\"]},\"9\":{\"h\":\"1.3 汇编\",\"t\":[\"将每一条汇编指令翻译成对应机器码的过程。 生成目标文件（或者中间目标文件）*.o\",\"$> as hello.s -o hello.o 或者 $> gcc -c hello.s -o hello.o\"]},\"10\":{\"h\":\"1.4 链接\",\"t\":[\"通过使用链接器(ld)链接一堆文件生成最终的可执行文件的过程。 如hello文件\"]},\"11\":{\"h\":\"2. 静态链接\"},\"12\":{\"h\":\"2.1 链接的基本定义\",\"t\":[\"将每个源代码模块独立编译，然后安装需要将他们“组装”起来的过程被称为链接。 链接的本质就是把一些指令对其它符号地址的引用加以修改。\"]},\"13\":{\"h\":\"2.2 链接的过程\",\"t\":[\"地址和空间分配、符号决议和重定位。\"]},\"14\":{\"h\":\"2.3 重定位\",\"t\":[\"在链接过程中，对定义在其它目标文件中的函数调用的指令需要被重新调整，对使用定义在其它目标文件中的变量也是如此。 比如: 有目标文件A有全局变量var 对目标文件B有 movq 0x2a, var c7 05 00 00 00 00 2a movq $0x2a,0x0(%rip) 由于编译目标文件B时无法确认var的目标地址，所以编译器在无法确认var地址的情况下，只能将movq指令的目标地址置0， 等待链接器再将目标文件A和B链接起来时再将其修正。 例如A和B链接后，变量var的地址确认为0x1000，那么链接器将会把这个指令的目标地址部分修改为0x1000。 这个地址修正的过程也被叫做“重定位(Relocation)”，每个要修正的地方叫一个“重定位入口(Relocation Entry)”。 重定位所做的就是给程序中每个这样的绝对地址引用的地址进行修正。\"]},\"15\":{\"h\":\"2.4 其它\",\"t\":[\"运行时库：支撑程序运行的基本函数集合。 库：一组目标文件(.o后缀的文件)的包\"]},\"16\":{\"h\":\"第二章 目标文件\"},\"17\":{\"h\":\"1. 目标文件的格式\",\"t\":[\"Linux下的主流文件存储格式为ELF，通过file指令可以查看文件的存储格式。\",\"$> file foobar.o foobar.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped $> file /bin/bash /bin/bash: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=2f77b36371c214e11670c7d9d92727e9a49f626b, for GNU/Linux 3.2.0, stripped file /lib32/ld-linux.so.2 /lib32/ld-linux.so.2: ELF 32-bit LSB shared object, Intel 80386, version 1 (GNU/Linux), static-pie linked, BuildID[sha1]=595f7870a8165b3eb04c9ebda08a8ccba6f742c2, stripped\",\"ELF文件标准里采用ELF格式的文件:\",\"可重定位文件 Linux的 *.o文件 静态链接库\",\"可执行文件\",\"共享目标文件 Linux的 *.so文件\",\"核心转储文件 Linux下的 core dump\"]},\"18\":{\"h\":\"2. 目标文件是什么样的\",\"t\":[\"目标文件将信息按不同的属性进行存储，通常称之为节(section)或者段(segment)\",\"提示\",\"源代码编译后的机器指令经常放于代码段(.text) 全局变量和局部静态变量经常存放于数据段(.data)\",\" ELF文件的开头是一个“文件头”，描述了整个文件的文件属性。\",\"是否可执行\",\"是否静态链接\",\"是否动态链接\",\"入口地址\",\"目标硬件\",\"目标操作系统\",\"等等\",\"文件头同时包括一个段表\",\"提示\",\"段表用来描述一个文件中各个段的数组。段表描述了文件中各个段在文件中的偏移位置及段的属性等，从段表中可以得到每个的段的所有信息。 .data section: 已初始化的全局变量和局部静态变量 .bss section: 未初始化的全局变量和局部静态变量(默认值为0),初始化为0的全局变量和局部静态变量 .bss段只是为未初始化的全局变量和局部静态变量预留位置而已(记录所有为初始或者初始化为0的全局变量和静态变量的大小总和)，所以在文件中也不占据空间\",\"分段的好处\",\" 可以防止程序被恶意篡改\",\" 利用缓存，提高CPU的缓存命中\",\" 节省内存空间(内存共享比如libc的动态链接库)\"]},\"19\":{\"h\":\"3. 挖掘SimpleSection.o\",\"t\":[\"int printf(const char *format, ...); int global_init_var = 84; int global_uninit_var; void func1(int i) { printf(\\\"%d\\\\n\\\", i); } int main() { static int static_var = 85; static int static_var2; int a = 1; int b; func1(static_var + static_var2 + a + b); return 0; }\",\"提示\",\"使用objdump -h指令打印ELF文件的各个段的基本信息 -x 参数可以打印更多信息\",\"$> objdump -h SimpleSection.o SimpleSection.o: file format elf64-x86-64 Sections: Idx Name Size VMA LMA File off Algn 0 .text 00000064 0000000000000000 0000000000000000 00000040 2**0 CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 1 .data 00000008 0000000000000000 0000000000000000 000000a4 2**2 CONTENTS, ALLOC, LOAD, DATA 2 .bss 00000008 0000000000000000 0000000000000000 000000ac 2**2 ALLOC 3 .rodata 00000004 0000000000000000 0000000000000000 000000ac 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA 4 .comment 00000027 0000000000000000 0000000000000000 000000b0 2**0 CONTENTS, READONLY 5 .note.GNU-stack 00000000 0000000000000000 0000000000000000 000000d7 2**0 CONTENTS, READONLY 6 .note.gnu.property 00000020 0000000000000000 0000000000000000 000000d8 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 7 .eh_frame 00000058 0000000000000000 0000000000000000 000000f8 2**3 CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA\",\"注\",\".rodata: 只读数据段 .comment: 注释信息段 .note.GNU-stack: 堆栈提示段 Size: 段的长度 File Offset: 段所在的位置(段偏移) CONTENTS: 该段在文件中存在(bss段没有表示bss段在ELF文件中不存在内容。.note.GNU-stack虽然有但是长度为0，认为它在ELF文件中也不存在)\",\"使用size指令查看ELF文件的代码段、数据段和bss段。\",\"$> size SimpleSection.o text data bss dec hex filename 224 8 8 240 f0 SimpleSection.o\"]},\"20\":{\"h\":\"3.1 代码段\",\"t\":[\"$> objdump -s -d SimpleSection.o SimpleSection.o: file format elf64-x86-64 Contents of section .text: 0000 f30f1efa 554889e5 4883ec10 897dfc8b ....UH..H....}.. 0010 45fc89c6 488d0500 00000048 89c7b800 E...H......H.... 0020 000000e8 00000000 90c9c3f3 0f1efa55 ...............U 0030 4889e548 83ec10c7 45f80100 00008b15 H..H....E....... 0040 00000000 8b050000 000001c2 8b45f801 .............E.. 0050 c28b45fc 01d089c7 e8000000 00b80000 ..E............. 0060 0000c9c3 .... Contents of section .data: 0000 54000000 55000000 T...U... Contents of section .rodata: 0000 25640a00 %d.. Contents of section .comment: 0000 00474343 3a202855 62756e74 75203133 .GCC: (Ubuntu 13 0010 2e322e30 2d323375 62756e74 75342920 .2.0-23ubuntu4) 0020 31332e32 2e3000 13.2.0. Contents of section .note.gnu.property: 0000 04000000 10000000 05000000 474e5500 ............GNU. 0010 020000c0 04000000 03000000 00000000 ................ Contents of section .eh_frame: 0000 14000000 00000000 017a5200 01781001 .........zR..x.. 0010 1b0c0708 90010000 1c000000 1c000000 ................ 0020 00000000 2b000000 00450e10 8602430d ....+....E....C. 0030 06620c07 08000000 1c000000 3c000000 .b..........<... 0040 00000000 39000000 00450e10 8602430d ....9....E....C. 0050 06700c07 08000000 .p...... Disassembly of section .text: 0000000000000000 <func1>: 0: f3 0f 1e fa endbr64 4: 55 push %rbp 5: 48 89 e5 mov %rsp,%rbp 8: 48 83 ec 10 sub $0x10,%rsp c: 89 7d fc mov %edi,-0x4(%rbp) f: 8b 45 fc mov -0x4(%rbp),%eax 12: 89 c6 mov %eax,%esi 14: 48 8d 05 00 00 00 00 lea 0x0(%rip),%rax # 1b <func1+0x1b> 1b: 48 89 c7 mov %rax,%rdi 1e: b8 00 00 00 00 mov $0x0,%eax 23: e8 00 00 00 00 call 28 <func1+0x28> 28: 90 nop 29: c9 leave 2a: c3 ret 000000000000002b <main>: 2b: f3 0f 1e fa endbr64 2f: 55 push %rbp 30: 48 89 e5 mov %rsp,%rbp 33: 48 83 ec 10 sub $0x10,%rsp 37: c7 45 f8 01 00 00 00 movl $0x1,-0x8(%rbp) 3e: 8b 15 00 00 00 00 mov 0x0(%rip),%edx # 44 <main+0x19> 44: 8b 05 00 00 00 00 mov 0x0(%rip),%eax # 4a <main+0x1f> 4a: 01 c2 add %eax,%edx 4c: 8b 45 f8 mov -0x8(%rbp),%eax 4f: 01 c2 add %eax,%edx 51: 8b 45 fc mov -0x4(%rbp),%eax 54: 01 d0 add %edx,%eax 56: 89 c7 mov %eax,%edi 58: e8 00 00 00 00 call 5d <main+0x32> 5d: b8 00 00 00 00 mov $0x0,%eax 62: c9 leave 63: c3 ret\",\"提示\",\"-s: 将所有段的内容以十六进制的方式打印 -d: 将所有包含指令的段反汇编\"]},\"21\":{\"h\":\"3.2 数据段和只读数据段\",\"t\":[\"提示\",\".data section: 已初始化的全局变量和局部静态变量\",\"SimpleSection.c代码中一共有两个这样的变量(global_init_var, static_var),所以.data段的大小正好为8个字节。\",\"提示\",\".rodata section: 存放只读数据(const变量,字符串字面量)\",\"SimpleSection.c代码中用在调用printf时用到了字符字面量\\\"%d\\\\n\\\",它是一种只读数据,所以它被放到了.rodata段。所以.rodata段的大小正好为四字节(字符串结尾包含字符串结束符)。\"]},\"22\":{\"h\":\"3.3 bss段\",\"t\":[\"提示\",\".bss section: 未初始化的全局变量和局部静态变量(默认值为0),初始化为0的全局变量和局部静态变量\",\"SimpleSection.c代码中一共有两个这样的变量(global_uninit_var, static_var2),所以.data段的大小正好为8个字节。\",\"提示\",\"可以给gcc选项加入-fcommon使未初始化的全局变量被定义为一个\\\"COMMON\\\"符号，注意对于初始化为0的全局变量则不行。\",\"$> gcc -c SimpleSection.c -fcommon $> readelf -s SimpleSection.o Symbol table '.symtab' contains 13 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000000000 0 FILE LOCAL DEFAULT ABS SimpleSection.c 2: 0000000000000000 0 SECTION LOCAL DEFAULT 1 .text 3: 0000000000000000 0 SECTION LOCAL DEFAULT 3 .data 4: 0000000000000000 0 SECTION LOCAL DEFAULT 4 .bss 5: 0000000000000000 0 SECTION LOCAL DEFAULT 5 .rodata 6: 0000000000000004 4 OBJECT LOCAL DEFAULT 3 static_var.1 7: 0000000000000000 4 OBJECT LOCAL DEFAULT 4 static_var2.0 8: 0000000000000000 4 OBJECT GLOBAL DEFAULT 3 global_init_var 9: 0000000000000004 4 OBJECT GLOBAL DEFAULT COM global_uninit_var 10: 0000000000000000 43 FUNC GLOBAL DEFAULT 1 func1 11: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND printf 12: 000000000000002b 57 FUNC GLOBAL DEFAULT 1 main\"]},\"23\":{\"h\":\"3.3 其它段\",\"t\":[\"其它段\"]},\"24\":{\"h\":\"4. ELF文件结构描述\",\"t\":[\"注\",\"ELF目标文件的最前部是ELF文件头（ELF Header）,它包含了描述整个文件的基本属性。仅接着是ELF各个段。其中ELF文件中与段有关的重要结构就是段表（Section Header Table），该表描述了ELF文件包含的所有段的信息，比如每个段的段名、段的长度、在文件中的偏移、读写权限及段的其它属性。\",\"ELF文件结构\"]},\"25\":{\"h\":\"4.1 文件头\",\"t\":[\"通过使用readelf -h指令即可查看ELF文件头\",\"$> readelf -h SimpleSection.o ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: REL (Relocatable file) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x0 Start of program headers: 0 (bytes into file) Start of section headers: 1032 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 0 (bytes) Number of program headers: 0 Size of section headers: 64 (bytes) Number of section headers: 14 Section header string table index: 13\",\"ELF文件头定义了\",\"ELF魔数\",\"文件机器字节长度\",\"数据存储方式\",\"版本\",\"运行平台\",\"ABI版本\",\"ELF重定位类型\",\"硬件平台\",\"硬件平台版本\",\"入口地址\",\"程序入口和长度\",\"段表位置和长度\",\"段数量\",\"// /usr/include/elf.h typedef struct { unsigned char e_ident[EI_NIDENT]; /* Magic number and other info */ Elf64_Half e_type; /* Object file type */ Elf64_Half e_machine; /* Architecture */ Elf64_Word e_version; /* Object file version */ Elf64_Addr e_entry; /* Entry point virtual address */ Elf64_Off e_phoff; /* Program header table file offset */ Elf64_Off e_shoff; /* Section header table file offset */ Elf64_Word e_flags; /* Processor-specific flags */ Elf64_Half e_ehsize; /* ELF header size in bytes */ Elf64_Half e_phentsize; /* Program header table entry size */ Elf64_Half e_phnum; /* Program header table entry count */ Elf64_Half e_shentsize; /* Section header table entry size */ Elf64_Half e_shnum; /* Section header table entry count */ Elf64_Half e_shstrndx; /* Section header string table index */ } Elf64_Ehdr;\",\"ELF文件头结构成员含义\"]},\"26\":{\"h\":\"4.1.2 文件类型\",\"t\":[\"文件类型\"]},\"27\":{\"h\":\"4.1.3 机器类型\",\"t\":[\"机器类型\"]},\"28\":{\"h\":\"4.2 段表\",\"t\":[\"提示\",\"段表用于保存这些段的基本属性结构。\",\"使用objdump -h来查看ELF文件中包含的段，但是只是把ELF文件中关键的段显示了出来。可以使用readelf -S指令来显示ELF文件的各种段表结构\",\"$> readelf -S SimpleSection.o There are 14 section headers, starting at offset 0x408: Section Headers: [Nr] Name Type Address Offset Size EntSize Flags Link Info Align [ 0] NULL 0000000000000000 00000000 0000000000000000 0000000000000000 0 0 0 [ 1] .text PROGBITS 0000000000000000 00000040 0000000000000064 0000000000000000 AX 0 0 1 [ 2] .rela.text RELA 0000000000000000 000002e8 0000000000000078 0000000000000018 I 11 1 8 [ 3] .data PROGBITS 0000000000000000 000000a4 0000000000000008 0000000000000000 WA 0 0 4 [ 4] .bss NOBITS 0000000000000000 000000ac 0000000000000004 0000000000000000 WA 0 0 4 [ 5] .rodata PROGBITS 0000000000000000 000000ac 0000000000000004 0000000000000000 A 0 0 1 [ 6] .comment PROGBITS 0000000000000000 000000b0 0000000000000027 0000000000000001 MS 0 0 1 [ 7] .note.GNU-stack PROGBITS 0000000000000000 000000d7 0000000000000000 0000000000000000 0 0 1 [ 8] .note.gnu.pr[...] NOTE 0000000000000000 000000d8 0000000000000020 0000000000000000 A 0 0 8 [ 9] .eh_frame PROGBITS 0000000000000000 000000f8 0000000000000058 0000000000000000 A 0 0 8 [10] .rela.eh_frame RELA 0000000000000000 00000360 0000000000000030 0000000000000018 I 11 9 8 [11] .symtab SYMTAB 0000000000000000 00000150 0000000000000138 0000000000000018 12 8 8 [12] .strtab STRTAB 0000000000000000 00000288 0000000000000060 0000000000000000 0 0 1 [13] .shstrtab STRTAB 0000000000000000 00000390 0000000000000074 0000000000000000 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), D (mbind), l (large), p (processor specific)\",\"提示\",\"段表的结构以Elf64_Shdr结构的数组形式进行存储,数组元素个数为段个数，每个Elf64_Shdr对应一个段属性描述。所以每个Elf64_Shdr又被称为段描述符。 第一个元素是无效段描述符，它的类型为\\\"NULL\\\"，除此之外每个描述符对应一个段。所以SimpleSection.o共有10个有效段。\"]},\"29\":{\"h\":\"4.2.1 段描述符的结构\",\"t\":[\"// /usr/include/elf.h typedef struct { Elf64_Word sh_name; /* Section name (string tbl index) */ Elf64_Word sh_type; /* Section type */ Elf64_Xword sh_flags; /* Section flags */ Elf64_Addr sh_addr; /* Section virtual addr at execution */ Elf64_Off sh_offset; /* Section file offset */ Elf64_Xword sh_size; /* Section size in bytes */ Elf64_Word sh_link; /* Link to another section */ Elf64_Word sh_info; /* Additional section information */ Elf64_Xword sh_addralign; /* Section alignment */ Elf64_Xword sh_entsize; /* Entry size if section holds table */ } Elf64_Shdr;\",\" 段表结构解析\",\"注\",\"elf文件头中指出了段表位于文件的偏移(Elf64_Ehdr的e_shoff元素)为1032(0x408)，代码段(.text)位于elf文件头后所以elf文件头的大小正好为代码段的偏移0x40(64)字节，段表的最后一个元素(.shstrtab)的偏移量为0x390文件大小为0x74。而0x408 = 0x390 + 0x74 + 0x04正好是段表在elf文件中的偏移(之所以+0x04是因为内存对齐的原因)。\"]},\"30\":{\"h\":\"4.2.1.1 段的类型(sh_type)\",\"t\":[\"提示\",\"对于编译器和链接器来说，主要决定段的属性的是段的类型(sh_type)和段的标志位(sh_flags)\",\"段的类型\"]},\"31\":{\"h\":\"4.2.1.2 段的标志位(sh_flags)\",\"t\":[\"提示\",\"决定了该段在进程虚拟地址空间中的属性，比如是否可写，是否可执行等。\",\"段的标志位\"]},\"32\":{\"h\":\"4.2.1.3 段的链接信息(sh_link、sh_info)\",\"t\":[\"提示\",\"只有段的类型是与链接(动态链接、静态链接、重定位表、符号表等)相关时这两个成员才会有意义。\",\"段的链接信息\"]},\"33\":{\"h\":\"4.3 重定位表\",\"t\":[\"提示\",\"在SimpleSection.o中有一个叫做\\\".rela.text\\\"的段, 它的类型(sh_type)为\\\"SH_RELA\\\", 也就是说它是一个重定位表。 对于每个需要重定位的段，都会有一个相应的重定位表。比如\\\".rela.text\\\"是\\\".text\\\"的重定位表。 一个重定位表同时也是elf的一个段, 那么这个段的类型(sh_type)就是\\\"SHL_REL\\\", 它的\\\"sh_link\\\"表示符号表的下标, \\\"sh_info\\\"表示它作用于那个段。\",\"重定位表\"]},\"34\":{\"h\":\"4.4 字符串表\",\"t\":[\"提示\",\"elf文件中用到了很多字符串，比如段名、变量名等。因为字符串的长度往往是不定的，所以用固定的结构来表示它比较困难。一种常见的做法是把字符串集中起来存放到一个表，然后使用字符串在表中的偏移来引用字符串。 .strtab: 字符串表(string table) .shstrtab: 段表字符串表(section header string table)\"]},\"35\":{\"h\":\"5. 链接的接口-符号(Symbol)\",\"t\":[\"提示\",\"链接的过程就是把多个不同的目标文件之间相互衔接的过程。这个相互衔接的过程实际上是目标文件之间对地址的引用。 比如文件B用到了目标A中的函数\\\"foo\\\", 那么我们就称文件A定义(define)了函数\\\"foo\\\", 称目标文件B引用(refrence)了目标文件A中的函数\\\"foo\\\"。这两个概念同样适用于变量。 在链接中将函数和变量称为符号(Symbol), 函数名和变量名称为符号名(Symbol Name)符号是链接中的粘合剂, 整个链接的过程基于符号才能正确完成。 每一个目标文件都有一个相应的符号表(Symbol Table)对符号进行管理, 该表记录了目标文件中所用的所有符号。每个定义的符号都有一个对应的值, 叫做符号值(Symbol Value), 对于变量和函数来说, 符号值就是它们的地址。除了函数和变量外，还存在其它几种不常用的符号。\",\"定义在目标文件的全局符号，可以被其它目标文件引用\",\"在本文件中引用的全局符号，却没有在本文件中定义，一般叫做外部符号(External Symbol)，也被称为符号引用\",\"段名，由编译器生成，它的值就是该段的起始地址。(.text, .data)\",\"局部符号，只在编译器内部可见。(SimpleSection.o文件的static_var和static_var2)\",\"行号信息，即目标文件指令与源代码中代码行的对应关系，可选。\",\"使用nm指令查看符号结果\",\"$> nm SimpleSection.o 0000000000000000 T func1 0000000000000000 D global_init_var 0000000000000004 C global_uninit_var 000000000000002b T main U printf 0000000000000004 d static_var.1 0000000000000000 b static_var2.0\"]},\"36\":{\"h\":\"5.1 ELF符号表结构\",\"t\":[\"// /usr/include/elf.h typedef struct { Elf64_Word st_name; /* Symbol name (string tbl index) */ unsigned char st_info; /* Symbol type and binding */ unsigned char st_other; /* Symbol visibility */ Elf64_Section st_shndx; /* Section index */ Elf64_Addr st_value; /* Symbol value */ Elf64_Xword st_size; /* Symbol size */ } Elf64_Sym;\",\"ELF符号表结构\"]},\"37\":{\"h\":\"5.1.1 符号类型和绑定类型(st_info)\",\"t\":[\"提示\",\"低4位表示符号类型(Symbol Type), 高28位表示符号绑定信息(Symbol Binding)\",\"符号类型和绑定\"]},\"38\":{\"h\":\"5.1.2 符号所在段(st_shndx)\",\"t\":[\"提示\",\"如果符号定义在本目标文件中，那么这个成员表示符号所在的段在段表中的下标，如果符号不是定义在本目标文件中，或者对于有些特殊符号，sh_shndx的值会有些特殊。\",\"符号所在段\"]},\"39\":{\"h\":\"5.1.3 符号值(st_value)\",\"t\":[\"提示\",\"每个符号都有一个对应的值，如果这个符号是一个函数或变量的定义，那么符号的值就是这个函数或变量的地址。\",\"在目标文件中，如果是符号的定义并且该符号不是“COMMON块”类型的，则st_value表示该符号在段中的偏移。比如SimpleSection.o中的\\\"func1\\\"、\\\"main\\\"、\\\"global_init_var\\\"。\",\"在目标文件中，如果符号是\\\"COMMON块\\\"，st_value表示该符号的对齐属性。比如SimpleSection.o中的\\\"global_uninit_var\\\"。\",\"在可执行文件中，st_value表示符号的虚拟地址。 使用readelf -s查看符号表\",\"# 注意编译时使用了-fcommon编译选项 $> readelf -s SimpleSection.o Symbol table '.symtab' contains 13 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000000000 0 FILE LOCAL DEFAULT ABS SimpleSection.c 2: 0000000000000000 0 SECTION LOCAL DEFAULT 1 .text 3: 0000000000000000 0 SECTION LOCAL DEFAULT 3 .data 4: 0000000000000000 0 SECTION LOCAL DEFAULT 4 .bss 5: 0000000000000000 0 SECTION LOCAL DEFAULT 5 .rodata 6: 0000000000000004 4 OBJECT LOCAL DEFAULT 3 static_var.1 7: 0000000000000000 4 OBJECT LOCAL DEFAULT 4 static_var2.0 8: 0000000000000000 4 OBJECT GLOBAL DEFAULT 3 global_init_var 9: 0000000000000004 4 OBJECT GLOBAL DEFAULT COM global_uninit_var 10: 0000000000000000 43 FUNC GLOBAL DEFAULT 1 func1 11: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND printf 12: 000000000000002b 57 FUNC GLOBAL DEFAULT 1 main\"]},\"40\":{\"h\":\"5.2 特殊符号\",\"t\":[\"// SpecialSymbol.c #include <stdio.h> extern char __executable_start[]; extern char etext[], _etext[], __etext[]; extern char edata[], _edata[]; extern char end[], _end[]; int main() { printf(\\\"Executable Start %X\\\\n\\\", __executable_start); printf(\\\"Text End %X %X %X\\\\n\\\", etext, _etext, __etext); printf(\\\"Data End %X %X\\\\n\\\", edata, _edata); printf(\\\"Executable End %X %X\\\\n\\\", end, _end); return 0; }\",\"$> ./SpecialSymbol Executable Start 9004000 Text End 9005205 9005205 9005205 Data End 9008010 9008010 Executable End 9008018 9008018\",\"提示\",\"__executable_start: 程序起始地址，注意不是入口地址。 etext, _etext, __etext: 代码段结束地址。 edata, edata: 数据段结束地址。 end, end: 程序结束地址。 地址都为虚拟地址。 ### 5.3 符号修饰与函数签名 [!tip] UNIX下c语言规定：c语言源代码文件中的所有全局的变量和函数经过编译后，相应的符号名前加上下划线\\\"\\\"。比如一个c函数\\\"foo\\\"，当它经过编译后的符号名就为\\\"foo\\\"。但是当程序规模很大时仍然会出现明明冲突的问题，于是像c++增加了==命名空间(namespace)==的方法来解决多模块的符号冲突问题。 现在的Linux下的GCC编译器中，默认情况下已经去掉了在c语言符号前加\\\"\\\"的这种方式。GCC编译器也可以通过==\\\"-fleading-underscore\\\"或者\\\"-fno-leading-underscore\\\"==来打开和关闭是否在c语言符号前加上\\\"\\\"\"]},\"41\":{\"h\":\"5.3.1 c++ 符号修饰\",\"t\":[\"int func(int); float func(float); class C { int func(int); class C2{ int func(int); }; }; namespace N { int func(int); class C { int func(int); }; };\",\"注\",\"函数签名(Function Signature): 包含了一个函数的信息，包括函数名、参数类型、它所在的类和名称空间及其它信息。 名称修饰(Name Decoration): 在编译器及连接器处理符号时，使用某种名称修饰的方法，使得每个函数签名对应一个修饰后名称(Decorated Name)。\",\"c++名称修饰\",\"提示\",\"所有符号都以\\\"_Z\\\"开头，对于嵌套的名字(在名称空间或在类里面的)，后面紧跟\\\"N\\\"，然后是各个名称空间和类的名字，每个名字前是名字字符串长度，再以\\\"E\\\"结尾。比如N::C::func经过名称修饰后就是_ZN1N1C4funcE。对于一个函数来说，它的参数列表紧跟在\\\"E\\\"后面，对于int类型来说,字母就是\\\"i\\\"。所以整个N::C::func(int)函数签名经过修饰为_ZN1N1C4funcEi。\",\"注\",\"可以通过\\\"c++filt\\\"的工具来解析被修饰的名称。\",\"$> c++filt _ZN1N1C4funcEi N::C::func(int)\",\"提示\",\"c++中的全局变量和静态变量也有同样的机制。比如foo命名空间下的bar变量(foo::bar)，经过修饰后的名字为: _ZN3far3barE。可以注意到变量的类型并没有加入到修饰后的名称中去。所以不论这个变量是整形还是浮点型甚至是全局对象，它的名称都是一样的。 名称修饰机制也被用来防止静态变量的名字冲突。比如main()函数里面的静态变量foo，和func()函数的静态变量foo会被GCC编译器会将他们修饰为：_ZZ4mainE3foo和_ZZ4funcE3foo。\"]},\"42\":{\"h\":\"5.4 extern \\\"C\\\"\",\"t\":[\"注\",\"c++编译器会将extern \\\"C\\\"的大括号内部的代码当作c语言代码处理。所以c++名称修饰会对其不起作用。\",\"// func和var不会被c++的名称修饰规则修饰。 extern \\\"C\\\" { int func(int); int var; } // 或者写成 extern \\\"C\\\" int func(int); extern \\\"C\\\" int var;\",\"// ManualNameMangling.cc // g++ ManualNameMangling.cc -o ManualNameMangling #include <stdio.h> namespace myname { int var = 42; } extern \\\"C\\\" double _ZN6myname3varE; int main() { printf(\\\"%d\\\\n\\\", myname::var); return 0; }\",\"$> ./ManualNameMangling 42\"]},\"43\":{\"h\":\"5.5 强符合与弱符号\",\"t\":[\"注\",\"深入理解计算机系统(csapp)一书中也有讲解。了解本小节将有助于帮助理解链接过程中为什么会出现重复定义的问题。\",\"// a.c int global = 1; // b.c int global = 2; // 由于global重复定义链接时将会出现重定义错误。\",\"符号的定义通常被称为强符号(Strong Symbol)。有些符号的定义也被称为弱符号(Weak Symbol)\",\"注\",\"c/c++编译器默认函数和初始化了的全局变量为强符号，未初始化的全局变量为弱符号。可以通过GCC编译器提供的\\\"attribute((weak))\\\" 来定义任何一个强符号为弱符号。 需要注意的是：强符号和弱符号都是针对定义的，不是针对符号的引用。\",\"extern int ext; // 这是一个引用，所以即不是强符号也不是弱符号。 int weak; // 弱符号 int strong = 1; // 强符号 __attribute__((weak)) weak2 = 2; // 弱符号 // 强符号 int main() { return 0; }\",\"连接器按如下规则处理与选择被多次定义的全局符号\",\"提示\",\"不允许被多次定义(既不同的目标文件中不能有同名的强符号)，如果出现多个强符号定义，则链接器报符号重定义错误。\",\"如果一个符号在某个文件中是强符号，在其它文件为弱符号，那么选强符号。\",\"如果一个符号在所有目标文件中都是弱符号，那么选其中占用空间最大的一个。比如文件A声明符号(未初始化)global为int(4byte)，目标文件B声明符号(未初始化)global为double(8byte)。当A和B链接时，符号global占8byte。(最好不要这样负责会出现一些意想不到的bug，而且很难发现)\"]},\"44\":{\"h\":\"弱引用和强引用\",\"t\":[\"提示\",\"强引用(Strong Reference): 对外部目标文件的符号引用在目标文件被最终链接成可执行文件时，他们需要被正确决议，如果没有找到该符号的定义，链接器就会报服啊后未定义的错误，这种被称为强引用(Strong Reference)。弱引用(Weak Reference): 在处理弱引用时，如果该符号有定义，则连接器将该符号的引用决议；如果该符号未被定义，则连接器对于该引用不报错。 对于未定义的弱引用，连接器默认其为0，或者是一个特殊的值，以便于程序代码能够识别。\",\"// 通过使用__attribute__ ((weakref))声明对一个外部函数的引用为弱引用。 __attribute__ ((weakref)) void foo(); int main() { if (foo) foo(); }\",\"// pthread.c // 通过使用__attribute__ ((weakref))判断是否链接到pthread库。 #include <stdio.h> #include <pthread.h> int pthread_create(pthread_t *, const pthread_attr_t *, void *(*)(void *), void *) __attribute__ ((weak)); int main() { if (pthread_create) { printf(\\\"This is multi-thread version!\\\\n\\\"); } else { printf(\\\"This is single-thread version!\\\\n\\\"); } }\",\"$> gcc pthread.c -o pt $> ./pt This is single-thread version! $> gcc pthread.c -o pt -lpthread $> ./pt This is multi-thread version!\"]},\"45\":{\"h\":\"5.6 调试信息\",\"t\":[\"注\",\"可以使用readelf查看debug相关的段\"]},\"46\":{\"h\":\"第三章 静态链接\",\"t\":[\"// a.c extern int shared; int main() { int a = 100; swap(&a, &shared); return 0; } // b.c int shared = 1; void swap(int *a, int *b) { *a ^= *b ^= *a ^= *b; }\",\"$> gcc -c a.c b.c -O2\"]},\"47\":{\"h\":\"1. 空间与地址分配\",\"t\":[\"注\",\"链接的过程就是将几个输入目标文件加工合并成一个输出文件的过程。\"]},\"48\":{\"h\":\"1.1 按序叠加\",\"t\":[\"注\",\"什么是按序叠加？ 就是将各个目标文件依次合并。但是这样会有些问题，当输入文件很多时，如果每个段都分别有.text段、.data段和.bss段，那最后输出文件将会有成百上千零散的段。这种做法是很浪费内存空间的（主要原因是内存对齐），对于x86的硬件来说，段的装载地址和空间的对齐单位是页，也就是4096字节。就算一个段只有1字节的大小，那这个段也要占据4096字节的内存大小。这会导致大量的内存碎片。\",\"按序叠加内存分配\"]},\"49\":{\"h\":\"1.2 相似段合并\",\"t\":[\"注\",\"什么是相似段合并？ 就是将相同性质的段进行合并，比如将所有输入文件的\\\".text\\\"合并到输出文件的\\\".text\\\"段，接着是\\\".data\\\"段，\\\".bss\\\"段等。\",\"相似段合并\",\"重要\",\".bss段在目标文件和可执行文件中不占用文件的空间，但是它在装载时占用地址空间。所以链接器在合并各个段的同时，也将\\\".bss\\\"段合并，同时分配虚拟空间。 关于地址和空间的两个含义：\",\"输出的可执行文件中的空间。\",\"装载后的虚拟地址中的虚拟地址空间。 对于\\\".text\\\"和\\\".data\\\"，它们在文件中和虚拟地址都要分配空间，对于\\\".bss\\\"这样的段，分配空间只局限与虚拟地址空间，因为它在文件中并没有内容。\",\"重要\",\"两步链接\",\"空间与地址分配 扫描所有的输入目标文件，并且获得它们的各个段的长度、属性和位置，并且将输入目标文件中的符号表中所有的符号定义和符号引用收集起来，统一放到一个全局符号表。这一步连接器将能够获得所有输入目标文件的段长度，并且将它们合并，计算输出文件中各个段合并后的长度和位置，并建立映射关系。\",\"符号解析与重定位 使用上一步中收集到的所有信息，读取输入文件中段的数据、重定位信息，并且进行符号解析与重定位、调整代码中的地址等。\",\"使用objdump指令查看链接前后的地址分配情况。\",\"# VMA: 虚拟地址 LMA: 加载地址 $> objdump -h a.o a.o: file format elf64-x86-64 Sections: Idx Name Size VMA LMA File off Algn 0 .text 00000058 0000000000000000 0000000000000000 00000040 2**0 CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 1 .data 00000000 0000000000000000 0000000000000000 00000098 2**0 CONTENTS, ALLOC, LOAD, DATA 2 .bss 00000000 0000000000000000 0000000000000000 00000098 2**0 ALLOC 3 .comment 00000027 0000000000000000 0000000000000000 00000098 2**0 CONTENTS, READONLY 4 .note.GNU-stack 00000000 0000000000000000 0000000000000000 000000bf 2**0 CONTENTS, READONLY 5 .note.gnu.property 00000020 0000000000000000 0000000000000000 000000c0 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 6 .eh_frame 00000038 0000000000000000 0000000000000000 000000e0 2**3 CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA $> objdump -h b.o b.o: file format elf64-x86-64 Sections: Idx Name Size VMA LMA File off Algn 0 .text 0000004f 0000000000000000 0000000000000000 00000040 2**0 CONTENTS, ALLOC, LOAD, READONLY, CODE 1 .data 00000004 0000000000000000 0000000000000000 00000090 2**2 CONTENTS, ALLOC, LOAD, DATA 2 .bss 00000000 0000000000000000 0000000000000000 00000094 2**0 ALLOC 3 .comment 00000027 0000000000000000 0000000000000000 00000094 2**0 CONTENTS, READONLY 4 .note.GNU-stack 00000000 0000000000000000 0000000000000000 000000bb 2**0 CONTENTS, READONLY 5 .note.gnu.property 00000020 0000000000000000 0000000000000000 000000c0 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 6 .eh_frame 00000038 0000000000000000 0000000000000000 000000e0 2**3 CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA $> objdump -h ab ab: file format elf64-x86-64 Sections: Idx Name Size VMA LMA File off Algn 0 .interp 0000001c 0000000000000318 0000000000000318 00000318 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA 1 .note.gnu.property 00000030 0000000000000338 0000000000000338 00000338 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 2 .note.gnu.build-id 00000024 0000000000000368 0000000000000368 00000368 2**2 CONTENTS, ALLOC, LOAD, READONLY, DATA 3 .note.ABI-tag 00000020 000000000000038c 000000000000038c 0000038c 2**2 CONTENTS, ALLOC, LOAD, READONLY, DATA 4 .gnu.hash 00000024 00000000000003b0 00000000000003b0 000003b0 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 5 .dynsym 000000a8 00000000000003d8 00000000000003d8 000003d8 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 6 .dynstr 000000a3 0000000000000480 0000000000000480 00000480 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA 7 .gnu.version 0000000e 0000000000000524 0000000000000524 00000524 2**1 CONTENTS, ALLOC, LOAD, READONLY, DATA 8 .gnu.version_r 00000040 0000000000000538 0000000000000538 00000538 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 9 .rela.dyn 000000c0 0000000000000578 0000000000000578 00000578 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 10 .rela.plt 00000018 0000000000000638 0000000000000638 00000638 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 11 .init 0000001b 0000000000001000 0000000000001000 00001000 2**2 CONTENTS, ALLOC, LOAD, READONLY, CODE 12 .plt 00000020 0000000000001020 0000000000001020 00001020 2**4 CONTENTS, ALLOC, LOAD, READONLY, CODE 13 .plt.got 00000010 0000000000001040 0000000000001040 00001040 2**4 CONTENTS, ALLOC, LOAD, READONLY, CODE 14 .plt.sec 00000010 0000000000001050 0000000000001050 00001050 2**4 CONTENTS, ALLOC, LOAD, READONLY, CODE 15 .text 00000190 0000000000001060 0000000000001060 00001060 2**4 CONTENTS, ALLOC, LOAD, READONLY, CODE 16 .fini 0000000d 00000000000011f0 00000000000011f0 000011f0 2**2 CONTENTS, ALLOC, LOAD, READONLY, CODE 17 .rodata 00000004 0000000000002000 0000000000002000 00002000 2**2 CONTENTS, ALLOC, LOAD, READONLY, DATA 18 .eh_frame_hdr 0000003c 0000000000002004 0000000000002004 00002004 2**2 CONTENTS, ALLOC, LOAD, READONLY, DATA 19 .eh_frame 000000cc 0000000000002040 0000000000002040 00002040 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 20 .init_array 00000008 0000000000003db8 0000000000003db8 00002db8 2**3 CONTENTS, ALLOC, LOAD, DATA 21 .fini_array 00000008 0000000000003dc0 0000000000003dc0 00002dc0 2**3 CONTENTS, ALLOC, LOAD, DATA 22 .dynamic 000001f0 0000000000003dc8 0000000000003dc8 00002dc8 2**3 CONTENTS, ALLOC, LOAD, DATA 23 .got 00000048 0000000000003fb8 0000000000003fb8 00002fb8 2**3 CONTENTS, ALLOC, LOAD, DATA 24 .data 00000014 0000000000004000 0000000000004000 00003000 2**3 CONTENTS, ALLOC, LOAD, DATA 25 .bss 00000004 0000000000004014 0000000000004014 00003014 2**0 ALLOC 26 .comment 00000026 0000000000000000 0000000000000000 00003014 2**0 CONTENTS, READONLY\"]},\"50\":{\"h\":\"1.3 符号地址的确定\",\"t\":[\"注\",\"在第一步的扫描和空间分配阶段，各个段在链接后的虚拟地址空间已经确定。比如\\\".text\\\"段的起始地址为0x0000000000001060，\\\".data\\\"段的起始地址为0x0000000000004000。因为各个符号在段内的相对位置时固定的，所以这时\\\"main\\\"、\\\"shared\\\"和\\\"swap\\\"的地址也已经确定了，连接器通过给每个符号加上一个偏移量，使它们能够调整到正确的虚拟地址。比如我们假设\\\"a.o\\\"中的\\\"main\\\"函数相对于\\\"a.o\\\"的\\\".text\\\"段的偏移量为X，但是经过链接合并后，\\\"a.o\\\"的\\\".text\\\"段位于虚拟地址空间0x0000000000001060(这里是链接成可执行文件ab后在可执行文件ab中的偏移量)，那么\\\"main\\\"函数的虚拟地址应该是0x0000000000001060+X。\"]},\"51\":{\"h\":\"2. 符号解析与重定位\"},\"52\":{\"h\":\"2.1 重定位\",\"t\":[\"注\",\"使用objdump -d查看反汇编结果\",\"$> objdump -d a.o a.o: file format elf64-x86-64 Disassembly of section .text.startup: 0000000000000000 <main>: 0: f3 0f 1e fa endbr64 4: 48 83 ec 18 sub $0x18,%rsp 8: 48 8d 35 00 00 00 00 lea 0x0(%rip),%rsi # f <main+0xf> 将shared地址写入第二个参数 f: 64 48 8b 04 25 28 00 mov %fs:0x28,%rax 16: 00 00 18: 48 89 44 24 08 mov %rax,0x8(%rsp) 1d: 31 c0 xor %eax,%eax 1f: 48 8d 7c 24 04 lea 0x4(%rsp),%rdi 24: c7 44 24 04 64 00 00 movl $0x64,0x4(%rsp) 2b: 00 2c: e8 00 00 00 00 call 31 <main+0x31> 31: 48 8b 44 24 08 mov 0x8(%rsp),%rax 36: 64 48 2b 04 25 28 00 sub %fs:0x28,%rax 3d: 00 00 3f: 75 07 jne 48 <main+0x48> 41: 31 c0 xor %eax,%eax 43: 48 83 c4 18 add $0x18,%rsp 47: c3 ret 48: e8 00 00 00 00 call 4d <main+0x4d>\",\"由于此时还并没有进行链接（即没有执行链接的第一步：虚拟地址内存分配）所以main的起始地址为0。 shared地址在反汇编代码的0x08字节处标记为0(8:48 8d 35 00 00 00 00 lea 0x0(%rip),%rsi)后面四字节就是该指令的下一条指令的偏移量。 swap调用处的地址在反汇编代码的0x2c字节处同样被标记为0(2c:e8 00 00 00 00 call 31 <main+0x31>)后面四个字节就是被调用函数的相对于调用指令的下一条指令的偏移量。 此时的指令地址时暂时的，真正的地址计算工作留给了连接器。连接器在完成第一步的虚拟内存分配后就可以确定所有符号的虚拟地址了。\"]},\"53\":{\"h\":\"修正后的地址\",\"t\":[\"重要\",\"$> objdump -d ab ab: file format elf64-x86-64 ... # 截取了部分 Disassembly of section .text: 0000000000001060 <main>: 1060: f3 0f 1e fa endbr64 1064: 48 83 ec 18 sub $0x18,%rsp 1068: 48 8d 35 a1 2f 00 00 lea 0x2fa1(%rip),%rsi # 4010 <shared> 106f: 64 48 8b 04 25 28 00 mov %fs:0x28,%rax 1076: 00 00 1078: 48 89 44 24 08 mov %rax,0x8(%rsp) 107d: 31 c0 xor %eax,%eax 107f: 48 8d 7c 24 04 lea 0x4(%rsp),%rdi 1084: c7 44 24 04 64 00 00 movl $0x64,0x4(%rsp) 108b: 00 108c: e8 0f 01 00 00 call 11a0 <swap> 1091: 48 8b 44 24 08 mov 0x8(%rsp),%rax 1096: 64 48 2b 04 25 28 00 sub %fs:0x28,%rax 109d: 00 00 109f: 75 07 jne 10a8 <main+0x48> 10a1: 31 c0 xor %eax,%eax 10a3: 48 83 c4 18 add $0x18,%rsp 10a7: c3 ret 10a8: e8 a3 ff ff ff call 1050 <__stack_chk_fail@plt> 10ad: 0f 1f 00 nopl (%rax) ...\",\"经过修正后\\\"shared\\\"和\\\"swap\\\"地址分别为0x4010和0x11a0\",\"shared的地址: 0x106f + 0x2fa1 = 0x4010 1068: 48 8d 35 a1 2f 00 00 lea 0x2fa1(%rip),%rsi 106f: 64 48 8b 04 25 28 00 mov %fs:0x28,%rax swap的地址: 0x1091 + 0x010f = 0x11a0 108c: e8 0f 01 00 00 call 11a0 <swap> 1091: 48 8b 44 24 08 mov 0x8(%rsp),%rax\"]},\"54\":{\"h\":\"2.2 重定位表\",\"t\":[\"注\",\"使用objdump/readelf指令可以查看重定位文件。因为重定位表其实就是elf文件中的一个段，因此又被称为重定位段，比如代码段\\\".text\\\"如果有要重定位的地方，那么会有一个相应的叫\\\".rel.text\\\"的段保存了代码段的重定位表，同理\\\".data\\\"也会有一个叫\\\".rel.data\\\"的段。\",\"# a.o中所有要重定位的地方，既“a.o”所有引用到的外部符号。 $> bjdump -r a.o a.o: file format elf64-x86-64 RELOCATION RECORDS FOR [.text.startup]: OFFSET TYPE VALUE 000000000000000b R_X86_64_PC32 shared-0x0000000000000004 # pc（下一条指令） - 0x04 000000000000002d R_X86_64_PLT32 swap-0x0000000000000004 0000000000000049 R_X86_64_PLT32 __stack_chk_fail-0x0000000000000004 RELOCATION RECORDS FOR [.eh_frame]: OFFSET TYPE VALUE 0000000000000020 R_X86_64_PC32 .text.startup $> readelf -r a.o Relocation section '.rela.text.startup' at offset 0x1e8 contains 3 entries: Offset Info Type Sym. Value Sym. Name + Addend 00000000000b 000400000002 R_X86_64_PC32 0000000000000000 shared - 4 00000000002d 000500000004 R_X86_64_PLT32 0000000000000000 swap - 4 000000000049 000600000004 R_X86_64_PLT32 0000000000000000 __stack_chk_fail - 4 Relocation section '.rela.eh_frame' at offset 0x230 contains 1 entry: Offset Info Type Sym. Value Sym. Name + Addend 000000000020 000200000002 R_X86_64_PC32 0000000000000000 .text.startup + 0\",\"每一个被重定位的地方叫一个重定位入口(Relocation Entry)，其中每个重定位表包含了一下信息：\",\"重定位入口的偏移(offset)，表示该入口在要被重定位段中的位置。\",\"该重定位表作用的elf文件中的那个段RELOCATION RECORDS FOR [.text.startup](比如这个就是代码段)。\",\"// 重定位表的结构 typedef struct { Elf64_Addr r_offset; /* Address */ Elf64_Xword r_info; /* Relocation type and symbol index */ } Elf64_Rel;\",\"重定位表结构\"]},\"55\":{\"h\":\"2.3 符号解析\",\"t\":[\"# 符号未定义错误 (未正确链接目标文件或者库文件导致) $> gcc a.c a.c: In function ‘main’: a.c:5:3: warning: implicit declaration of function ‘swap’ [-Wimplicit-function-declaration] 5 | swap(&a, &shared); | ^~~~ /usr/bin/ld: /tmp/ccwmM6Jl.o: warning: relocation against `shared' in read-only section `.text' /usr/bin/ld: /tmp/ccwmM6Jl.o: in function `main': a.c:(.text+0x29): undefined reference to `shared' /usr/bin/ld: a.c:(.text+0x39): undefined reference to `swap' /usr/bin/ld: warning: creating DT_TEXTREL in a PIE collect2: error: ld returned 1 exit status\",\"注\",\"重定位的过程也伴随着符号解析的过程。每个目标文件都可能定义一些符号，也可能引用其它目标文件的符号。重定位过程中，每个重定位入口都是对一个符号的引用，那么当连接器需要对某个符号的引用进行重定位时，就要确定这个符号的目的地址。这时候连接器就会查找所有输入目标文件的符号表组成的全局符号表，找到相应的符号后进行重定位。\",\"注\",\"需要补充的一点是linux链接器在符号解析阶段，链接器是从左到右按照它们在编译器取得程序命令行上出现的顺序来扫描可重定位目标文件和存档文件(静态库)的。链接器维护一个可重定位目标文件的集合E（这个集合中的文件会被合并起来形成可执行文件），一个未解析的符号集合U（即引用了但尚未定义的符号），以及一个在前面输入文件中已定义的符号集合D。\",\"·对于命令行上的每个输入文件 f, 链接器会判断f是一个目标文件还是一个存档文件。如果f是一个目标文件，那么链接器把f添加到E, 修改U和D来反映f中的符号定义和引用，并继续下一个输入文件。\",\"·如果f是一个存档文件，那么链接器就尝试匹配U中未解析的符号和由存档文件成员定义的符号。如果某个存档文件成员m, 定义了一个符号来解析U中的一个引用，那将m加到么就E中，并且链接器修改U和D来反映m中的符号定义和引用。对存档文件中所有的成员目标文件都依次进行这个过程，直到U和D都不再发生变化。此时，任何不包含在E中的成员目标文件都简单地被丢弃，而链接器将继续处理下一个输入文件。\",\"·如果当链接器完成对命令行上输入文件的扫描后，U是非空的，那么链接器就会输出一个错误并终止。否则，它会合并和重定位E中的目标文件，构建输出的可执行文件。\",\"这样的解析通常会伴随一个顺序问题，比如文件foo.c依赖与liba.a。当输入指令如下时就会出现符号未定义错误。\",\"# 错误的 $> gcc -static ./liba.a foo.c # 正确的 $> gcc -static foo.c ./liba.a\",\"因为链接器时从左到右开始扫描的，而静态库文件（存档文件）liba.a先于foo.c文件所以就会执行上述的存档文件的操作导致foo.c依赖的文件不会并入集合中。最终导致符号未定义行为，特别是出现相互依赖的库文件时更容易出现这种错误。 foo.c 依赖 liba.a, liba.a 依赖 libb.a, libb.a 依赖 liba.a\",\"# 错误的 $> gcc -static foo.c ./liba.a ./libb.a # 正确的 $> gcc -static foo.c ./liba.a ./libb.a ./liba.a\",\"csapp 第七章 7.6.3\",\"使用readelf -s指令查看a.o的符号表:\",\"$> readelf -s a.o Symbol table '.symtab' contains 7 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000000000 0 FILE LOCAL DEFAULT ABS a.c 2: 0000000000000000 0 SECTION LOCAL DEFAULT 1 .text 3: 0000000000000000 88 FUNC GLOBAL DEFAULT 1 main 4: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND shared 5: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND swap 6: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND __stack_chk_fail\",\"重要\",\"GLOBAL类型的符号，除了\\\"main\\\"函数是定义在代码段之外，其它几个\\\"shared\\\"，\\\"swap\\\"，\\\"__stack_chk_fail\\\"都是UND（undefined）未定义的类型，这种未定义的符号都是该目标文件的重定位项。所以在链接器扫描完所有的输入目标文件后，所有这些未定义的符号都应该能在全局符号表中找到，否则链接就会报符号未定义错误。\"]},\"56\":{\"h\":\"2.4 指令修正方式(参考csapp，原书第七章 7.7)\",\"t\":[\"// csapp提到的另一种重定位结构 // r_addend: 有符号常数，一些类型的重定位要使用它对被修改引用的值做偏移调整。 typedef struct { Elf64_Addr r_offset; /* Address */ Elf64_Xword r_info; /* Relocation type and symbol index */ Elf64_Sxword r_addend; /* Addend */ } Elf64_Rela;\",\"elf定义了32种不同的重定位类型。我们只关心其中两种最基本的重定位类型：\",\"R_X86_64_PC32。重定位一个使用32位PC相对地址的引用。一个PC相对地址就是距程序计数器(PC)的当前运行时值的偏移量。CPU执行一条使用PC相对寻址的指令时，它就将在指令中编码的32位值加上PC的当前运行时值，得到有效地址，PC值通常是下一条指令在内存中的值。\",\"R_X86_64_32。重定位一个使用32位绝对地址的引用。CPU直接使用在指令中编码的32值作为有效地址，不需要进一步修改。\",\"重要\",\"这两种重定位类型支持x86-64小型代码模型(small code model)，该模型假设可执行目标文件中的代码和数据的总体大小小于2GB，因此在运行时可以用32位PC相对地址来访问。GCC默认使用小型代码模型。大于2GB的程序可以使用-mcmodel=medium(中型代码模型)和-mcmodel=large(大型代码模型)标志来编译。\",\"foreach section s { foreach relocation entry r { refptr = s + r.offset; // 需要修改的重定位地址 if (r.type == R_X86_64_PC32) { refaddr = ADDR(s) + r.offset; // 运行时引用符号的地址 *refptr = (unsigned)(ADDR(r.symbol) + r.addend - refaddr); // 被引用的符号地址 + 修正值 - 运行时引用符号地址。 } if (r.type == R_X86_64_32) { *refptr = (unsigned)(ADDR(r.symbol) + r.addend); } } }\"]},\"57\":{\"h\":\"3. COMMON块\",\"t\":[\"注\",\"COMMON块的机制来源于Fortran，早期的Fortran没有动态分配空间的机制，所以必须事先声明它所需的临时使用空间的大小。Fortran把这种空间叫COMMON块，当不同的目标文件需要的COMMON块空间大小不一致时，以最大的那块为准。 现代的链接机制在处理弱符号时，采用的就是与COMMON块一样的机制。当然COMMON块的链接规则仅仅是针对弱符号的，如果其中有一个符号为强符号时，那么最终输出结果中的符号所占空间与强符号相同。 值得注意的是，如果链接过程中有弱符号大于强符号所使用的内存大小，那么链接器通常会给出警告。 /usr/bin/ld: warning: alignment 4 of symbol `global' in /tmp/ccjFgL1Q.o is smaller than 8 in /tmp/ccVEFqSm.o\",\"另外值得注意的是可能有些编译器并不是将弱符号使用COMMON块，而是使用的bss段，因此会报重定义错误。此时可以给编译选项加上--common选项即可。\"]},\"58\":{\"h\":\"4. 静态库链接\",\"t\":[\"注\",\"静态库可以简单的看成一组目标文件的集合，既很多目标文件经过压缩打包后形成的一个文件。\",\"使用\\\"ar\\\"工具查看这个文件包含了那些目标文件：\",\"$> ar -t /usr/lib/x86_64-linux-gnu/libc.a\",\"使用objdump指令查看某个符号在那个文件中\",\"$> objdump -t /usr/lib/x86_64-linux-gnu/libc.a | grep vprintf vprintf.o: file format elf64-x86-64 0000000000000000 g F .text 0000000000000018 __vprintf 0000000000000000 g F .text 0000000000000018 vprintf 0000000000000160 g F .text 00000000000001c9 .hidden __obstack_vprintf_internal 0000000000000330 g F .text 00000000000001c4 __obstack_vprintf 0000000000000330 w F .text 00000000000001c4 obstack_vprintf vprintf_chk.o: file format elf64-x86-64 0000000000000000 g F .text 0000000000000019 ___vprintf_chk 0000000000000000 g F .text 0000000000000019 __vprintf_chk 0000000000000000 *UND* 0000000000000000 .hidden __obstack_vprintf_internal 0000000000000000 g F .text 000000000000001c __obstack_vprintf_chk 0000000000000000 *UND* 0000000000000000 .hidden __obstack_vprintf_interna\"]},\"59\":{\"h\":\"第四章 可执行文件的装载\"},\"60\":{\"h\":\"1. 装载的方式\"},\"61\":{\"h\":\"1.1 覆盖装入\",\"t\":[\"注\",\"覆盖装入的方法把挖掘内存潜力的任务交给了程序员，程序员在编写程序时必须手工将程序分割成若干块，然后编写一个小的辅助代码工具来管理这些模块何时应该驻留内存何时应该被替换掉。这个小的辅助代码就是所谓的覆盖管理器(Overlay Manager)。\"]},\"62\":{\"h\":\"1.2 页映射\",\"t\":[\"注\",\"建议阅读csapp 第九章 虚拟内存\"]},\"63\":{\"h\":\"2. 从操作系统角度看可执行文件的装载\"},\"64\":{\"h\":\"2.1 进程的建立\",\"t\":[\"创建一个独立的虚拟地址空间。\",\"创建虚拟地址空间实际上只是分配一个页目录(Page Directory)就可以了，甚至不需要设置页映射关系。这些映射关系可以等到页错误时再进行映射。这一步中映射的是虚拟空间到实际物理内存的映射关系。\",\"读取可执行文件头，并且建立虚拟空间与可执行文件的映射关系。\",\"这一步所做的是虚拟空间与可执行文件的映射关系。当程序执行发生页错误时，操作系统将从物理内存中分配一个物理页，然后将该“缺页”从磁盘中读取到内存中，再设置缺页的虚拟页和物理页的映射关系，这样程序才得以正确运行。所以当操作系统捕获到也错误发生时，应当知道所需的页在可执行文件中的那一个位置。这就是传统意义的“装载”过程。\",\"假设我们的ELF可执行文件只有一个代码段\\\".text\\\"，它的虚拟地址为0x08048000，它在文件中的大小为0x000e1，对齐为0x1000。由于虚拟存储的也映射都是以页为单位，在32为的Intel IA32下一般为4096字节，所以32位ELF的对齐粒度为0x1000。所以.text段对齐后实际占用的虚拟内存大小为0x1000。一旦该可执行文件被装载，可执行文件与执行该可执行文件进程的虚拟空间映射关系如下： 这种映射关系只是保存在操作系统内部的一个数据结构。linux中将进程虚拟空间中的一个段叫做虚拟内存区域(VAM, Virtual Memory Area)。操作系统创建进程后，会在进程相应的数据结构中设置一个.text段的VMA；它在虚拟空间中的地址为0x08040800~0x08049000，它对应ELF文件中偏移为0的.text，它的属性为只读。\",\"将CPU的指令寄存器设置成可执行文件的入口地址，启动运行。\",\"从进程的角度看这一步可以简单的认为操作系统执行了一条跳转指令，直接跳转到可执行文件的入口地址(ELF文件头中保存有入口地址)。\"]},\"65\":{\"h\":\"2.2 页错误\",\"t\":[\"注\",\"进程建立完成后，其实可执行文件的真正指令和数据都没有被装入到内存中。操作系统只是通过可执行文件头部的信息建立起可执行文件和进程虚拟内存之间的映射关系。当CPU开始执行指令时，会发现对应页面是一个空页面，从而触发页错误(Page Fault)。CPU将控制权交给操作系统，操作系统处理页错误时，就会使用装载过程的中建立的可执行文件与虚拟内存的映射关系从而找到空页所在的VMA，计算出相应的页面在可执行文件中的偏移，然后在物理内存中分配一个物理页面，将进程与中该虚拟内存页与分配的物理内存页建立映射关系，然后把控制权返还给进程，进程从刚才页错误的位置重新开始执行。\",\"页错误\"]},\"66\":{\"h\":\"3. 进程虚拟空间分布\"},\"67\":{\"h\":\"3.1 ELF文件链接视图和执行视图\",\"t\":[\"重要\",\"从操作系统装载可执行文件的角度看，它只关心一些和装载相关的问题，最主要的时段的权限（可读、可写和可执行）。\",\"以代码段为代表的权限为可读可执行段\",\"以数据段和bss段位代表的权限为可读可写段\",\"以只读数据为代表的权限为只读段\",\"那么我们可以对于相同的段，把它们合并到一起当作一个段进行映射。比如有两个段分别叫\\\".text\\\"和\\\".init\\\"，它们包含的分别是程序的可执行代码和初始化代码，并且它们的权限相同，都是可读可执行。假设.text为4097字节，.init为512字节，这两个段分别映射的话要占用三个页面，但是，如果将它们合并成一起映射的话只需要两个页面。\",\"注\",\"ELF可执行文件引入了一个概念叫做“segment”，一个“segment”包含一个或多个属性类似的“section”。比如上面提到的“.text”段和“.init”段合并在一起看做是一个“segment”，那么装载的时候就可以将它们看作一个整体一起映射，也就是所映射之后在进程虚拟内存中只有一个相对应的vma，而不是两个，这样做的好处是可以明显减少页面内部内存碎片，从而节省内存空间。\",\"// SectionMapping.c #include <unistd.h> int main() { while (1) { sleep(1000); } return 0; } // gcc -static SectionMapping.c -o SectionMapping.elf\",\"$> gcc -static SectionMapping.c -o SectionMapping.elf $> readelf -S SectionMapping.elf There are 28 section headers, starting at offset 0xbf510: Section Headers: [Nr] Name Type Address Offset Size EntSize Flags Link Info Align [ 0] NULL 0000000000000000 00000000 0000000000000000 0000000000000000 0 0 0 [ 1] .note.gnu.pr[...] NOTE 0000000000400270 00000270 0000000000000030 0000000000000000 A 0 0 8 [ 2] .note.gnu.bu[...] NOTE 00000000004002a0 000002a0 0000000000000024 0000000000000000 A 0 0 4 [ 3] .note.ABI-tag NOTE 00000000004002c4 000002c4 0000000000000020 0000000000000000 A 0 0 4 [ 4] .rela.plt RELA 00000000004002e8 000002e8 0000000000000210 0000000000000018 AI 0 20 8 [ 5] .init PROGBITS 0000000000401000 00001000 000000000000001b 0000000000000000 AX 0 0 4 [ 6] .plt PROGBITS 0000000000401020 00001020 0000000000000160 0000000000000000 AX 0 0 16 [ 7] .text PROGBITS 0000000000401180 00001180 000000000007d521 0000000000000000 AX 0 0 64 [ 8] .fini PROGBITS 000000000047e6a4 0007e6a4 000000000000000d 0000000000000000 AX 0 0 4 [ 9] .rodata PROGBITS 000000000047f000 0007f000 000000000001c1a4 0000000000000000 A 0 0 32 [10] .stapsdt.base PROGBITS 000000000049b1a4 0009b1a4 0000000000000001 0000000000000000 A 0 0 1 [11] rodata.cst32 PROGBITS 000000000049b1c0 0009b1c0 0000000000000060 0000000000000020 AM 0 0 32 [12] .eh_frame PROGBITS 000000000049b220 0009b220 00000000000096f0 0000000000000000 A 0 0 8 [13] .gcc_except_table PROGBITS 00000000004a4910 000a4910 00000000000000dc 0000000000000000 A 0 0 1 [14] .tdata PROGBITS 00000000004a5f50 000a4f50 0000000000000018 0000000000000000 WAT 0 0 8 [15] .tbss NOBITS 00000000004a5f68 000a4f68 0000000000000040 0000000000000000 WAT 0 0 8 [16] .init_array INIT_ARRAY 00000000004a5f68 000a4f68 0000000000000008 0000000000000008 WA 0 0 8 [17] .fini_array FINI_ARRAY 00000000004a5f70 000a4f70 0000000000000010 0000000000000008 WA 0 0 8 [18] .data.rel.ro PROGBITS 00000000004a5f80 000a4f80 0000000000003fc8 0000000000000000 WA 0 0 32 [19] .got PROGBITS 00000000004a9f48 000a8f48 0000000000000090 0000000000000000 WA 0 0 8 [20] .got.plt PROGBITS 00000000004a9fe8 000a8fe8 00000000000000c8 0000000000000008 WA 0 0 8 [21] .data PROGBITS 00000000004aa0c0 000a90c0 0000000000001a08 0000000000000000 WA 0 0 32 [22] .bss NOBITS 00000000004abae0 000aaac8 0000000000005768 0000000000000000 WA 0 0 32 [23] .comment PROGBITS 0000000000000000 000aaac8 0000000000000026 0000000000000001 MS 0 0 1 [24] .note.stapsdt NOTE 0000000000000000 000aaaf0 00000000000015a0 0000000000000000 0 0 4 [25] .symtab SYMTAB 0000000000000000 000ac090 000000000000bc10 0000000000000018 26 711 8 [26] .strtab STRTAB 0000000000000000 000b7ca0 000000000000775f 0000000000000000 0 0 1 [27] .shstrtab STRTAB 0000000000000000 000bf3ff 000000000000010c 0000000000000000 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), R (retain), D (mbind), l (large), p (processor specific)\",\"使用readelf -l指令查看ELF文件的“segment”。正如描述“section”属性的结构叫做段表，描述“segment”的结构叫程序头(Program Header)。\",\"$> readelf -l SectionMapping.elf Elf file type is EXEC (Executable file) Entry point 0x401720 There are 10 program headers, starting at offset 64 Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flags Align LOAD 0x0000000000000000 0x0000000000400000 0x0000000000400000 0x00000000000004f8 0x00000000000004f8 R 0x1000 LOAD 0x0000000000001000 0x0000000000401000 0x0000000000401000 0x000000000007d6b1 0x000000000007d6b1 R E 0x1000 LOAD 0x000000000007f000 0x000000000047f000 0x000000000047f000 0x00000000000259ec 0x00000000000259ec R 0x1000 LOAD 0x00000000000a4f50 0x00000000004a5f50 0x00000000004a5f50 0x0000000000005b78 0x000000000000b2f8 RW 0x1000 NOTE 0x0000000000000270 0x0000000000400270 0x0000000000400270 0x0000000000000030 0x0000000000000030 R 0x8 NOTE 0x00000000000002a0 0x00000000004002a0 0x00000000004002a0 0x0000000000000044 0x0000000000000044 R 0x4 TLS 0x00000000000a4f50 0x00000000004a5f50 0x00000000004a5f50 0x0000000000000018 0x0000000000000058 R 0x8 GNU_PROPERTY 0x0000000000000270 0x0000000000400270 0x0000000000400270 0x0000000000000030 0x0000000000000030 R 0x8 GNU_STACK 0x0000000000000000 0x0000000000000000 0x0000000000000000 0x0000000000000000 0x0000000000000000 RW 0x10 GNU_RELRO 0x00000000000a4f50 0x00000000004a5f50 0x00000000004a5f50 0x00000000000040b0 0x00000000000040b0 R 0x1 Section to Segment mapping: Segment Sections... 00 .note.gnu.property .note.gnu.build-id .note.ABI-tag .rela.plt 01 .init .plt .text .fini 02 .rodata .stapsdt.base rodata.cst32 .eh_frame .gcc_except_table 03 .tdata .init_array .fini_array .data.rel.ro .got .got.plt .data .bss 04 .note.gnu.property 05 .note.gnu.build-id .note.ABI-tag 06 .tdata .tbss 07 .note.gnu.property 08 09 .tdata .init_array .fini_array .data.rel.ro .got # 这个可执行文件共有10个segment。从装载的角度看，我们只关心“LOAD”类型的segment，因为只有它是需要被映射的，其它类型的都是装载时起辅助作用。\",\"“segment”和“section”是从不同角度来划分同一个elf文件。这个在elf中被称为不同的视图(view)，从“section”的角度来看elf文件就是链接视图(linking view)，从“segment“的角度来看就是执行视图(exectuion view)。\",\"elf可执行文件与进程虚拟空间映射关系\",\"elf可执行文件有一个专门的数据结构叫做==程序头表(program header table)==用来保存”segment“的信息。因为elf目标文件不需要被装载，所以它没有程序头表，而可执行文件和共享库文件都有。和段表结构一样，程序头表也是一个结构体数组。\",\"// elf.h typedef struct { Elf64_Word p_type; /* Segment type */ Elf64_Word p_flags; /* Segment flags */ Elf64_Off p_offset; /* Segment file offset */ Elf64_Addr p_vaddr; /* Segment virtual address */ Elf64_Addr p_paddr; /* Segment physical address */ Elf64_Xword p_filesz; /* Segment size in file */ Elf64_Xword p_memsz; /* Segment size in memory */ Elf64_Xword p_align; /* Segment alignment */ } Elf64_Phdr;\",\" 对于“LOAD”类型的“segment”来说，p_memsz的值不可以小于p_filesz，否则就是不合理的。如果p_memsz大于p_filesz，就表示该“segment”在内存中所分配的空间大小超过文件中实际的大小，这部分“多余“的部分则全部填充为”0“。因此我们在构造elf可执行文件时不需要再额外设立bss的”segment“了，可以把数据”segment“的p_memsz扩大，那些额外的部分就是bss。\"]},\"68\":{\"h\":\"3.2 堆和栈\",\"t\":[\"查看可执行文件的堆栈。\",\"$> ./SectionMapping.elf & [1] 669 $> cat /proc/669/maps 00400000-00401000 r--p 00000000 08:10 116178 /home/far/worker/linker/chapter04/SectionMapping.elf 00401000-0047f000 r-xp 00001000 08:10 116178 /home/far/worker/linker/chapter04/SectionMapping.elf 0047f000-004a5000 r--p 0007f000 08:10 116178 /home/far/worker/linker/chapter04/SectionMapping.elf 004a5000-004aa000 r--p 000a4000 08:10 116178 /home/far/worker/linker/chapter04/SectionMapping.elf 004aa000-004ac000 rw-p 000a9000 08:10 116178 /home/far/worker/linker/chapter04/SectionMapping.elf 004ac000-004b2000 rw-p 00000000 00:00 0 01ebb000-01edd000 rw-p 00000000 00:00 0 [heap] 7ffdee8a2000-7ffdee8c3000 rw-p 00000000 00:00 0 [stack] 7ffdee99f000-7ffdee9a3000 r--p 00000000 00:00 0 [vvar] 7ffdee9a3000-7ffdee9a4000 r-xp 00000000 00:00 0 [vdso]\",\"注\",\"第一列是VMA的地址范围；第二列是VMA的权限，“r”表示可读，“w”表示可写，“x”表示可执行，“p”表示私有(COW, Copy on Write)。“s”表示共享。第三列是偏移，表示VMA对应的segment在可执行文件中的偏移；第四列表示可执行文件所在设备的主设备号和次设备号；第五列表示可执行文件的节点号。最后一列是可执行文件的路径。\",\"观察到进程中10个VMA中只有前五个是映射到可执行文件中的两个segment。另外三个所在的设备号和次设备号以及文件节点都是0，则表示它们没有映射到文件中，这种VMA叫做匿名虚拟内存区域(Anonymous Virtual Memory Area)。\",\"重要\",\"操作系统通过给进程空间划出一个个VMA来管理进程的虚拟空间；基本原则是将相同权限属性的、有相同映像文件的映射成一个VMA。\",\"代码VMA，可读可执行，有映像文件\",\"数据VAM，可读可写可执行，有映像文件\",\"堆VMA，可读可写可执行，无映像文件，匿名，可向上扩展\",\"栈VMA，可读可写、不可执行，无映像文件，匿名，可向下扩展。\",\"ELF与Linux进程虚拟空间映射关系\"]},\"69\":{\"h\":\"3.3 段地址对齐\",\"t\":[\"段\",\"长度\",\"偏移\",\"权限\",\"seg0\",\"127\",\"34\",\"可读可执行\",\"seg1\",\"9899\",\"164\",\"可读可写\",\"seg2\",\"1988\",\"只读\",\"使用最简单的映射将每个段分开映射，对于长度不足一页的按一页占用。所以整个可执行文件只有12014字节却占用了5个页，即20480字节，空间使用率只有58.6%。为了解决这个问题unix系统让那些各个段接壤部分共享一个物理页，然后将该物理页分别映射两次。比如seg0和seg1的接壤部分的那个物理页，系统将它们映射两份到虚拟地址空间，一份seg0，另一份seg1，其它的页都按照正常的页进行映射。unix系统将elf的文件头也看做是系统的一个段，将其映射到进程的地址空间，这样做的好处是进程中的某一段区域就是整个elf文件的映射，对于一些必须要访问elf文件头的操作（比如动态链接器就必须读取elf文件头）可以直接通过读写内存地址空间进行。在这种情况下，内存空间得到了充分利用，本来需要5个物理页的现在只需要3个物理页。这种映射情况下对于一个物理页来说可能同时包含多个段。\",\"物理页普通映射\",\"物理页多次映射\"]},\"70\":{\"h\":\"3.4 进程栈初始化\",\"t\":[\"假设系统中有两环境变量:\",\"HOME=/home/user\",\"PATH=/usr/bin 执行指令\",\"$> prog 123\",\" 栈指针寄存器esp（x86_64应该为rip）指向的位置是初始化以后堆栈的顶部，最前面四个字节表示命令行参数的数量，即\\\"prog\\\"和\\\"123\\\"，紧接的就是指向这两个参数字符串的指针，后面跟一个0，接着是两个指向环境变量的字符串的指针，后面紧跟一个0表示结束。\"]},\"71\":{\"h\":\"第五章 动态链接\"},\"72\":{\"h\":\"1. 什么是动态链接\",\"t\":[\"重要\",\"把链接的过程推迟到运行时进行，这就是动态链接(Dynamic Linking)的基本思想。 需要注意的是，程序与动态库之间真正的链接工作是由动态链接器完成的，而不静态链接器ld完成。\"]},\"73\":{\"h\":\"2. 简单的动态链接例子\",\"t\":[\"// Program1.c #include \\\"Lib.h\\\" int main() { foobar(1); return 0; } // Program2.c #include \\\"Lib.h\\\" int main() { foobar(2); return 0; } // Lib.c #include <stdio.h> void foobar(int i) { printf(\\\"Printing from Lib.so %d\\\\n\\\", i); } // Lib.h #ifndef __LIB_H__ #define __LIB_H__ void foobar(int i); #endif\",\"使用GCC将Lib.c编译成一个共享对象文件:\",\"# shared 表示产生共享对象 # -fPIC 表示生成位置无关代码 $> gcc -fPIC -shared -o Lib.so Lib.c # 分别编译链接Program1和Program2 $> gcc -o Program1 Program1.c ./Lib.so $> gcc -o Program2 Program2.c ./Lib.so\",\"动态链接过程\",\"重要\",\"Lib.c被链接成Lib.so共享对象文件，Program1.c被编译成Program1.o之后，链接成为可指向文件Program1。但是和静态链接不同的是，Program1.o被链接成可执行文件这一步。在静态链接中，链接过程会把Program1.o和Lib.o链接到一起，并且输出可执行文件Program1。但是对于动态链接，Lib.o没有被链接起来，链接的输入目标只有Program1.o。但是命令行中又发现Lib.so也参与了链接过程？ 当程序模块Program1.c被编译成Program1.o时，编译器还不知道foobar()函数的地址。当链接器将Program1.o链接成可执行文件时，这时候链接器必须确定foobar()函数的性质。如果foobar()函数是一个定义于静态目标模块中的函数，那么链接器将会按照静态链接的规则，将Program1.o中的foobar()地址引用重定位。如果foobar()是一个定义在动态共享对象中的函数，那么链接器就会将这个符号的引用标记为一个动态链接的符号，不对其进行地址重定位，把这个过程保留到装载时进行。 对于链接器是如何知道foobar()函数的引用是一个静态符号还是动态符号？这其实就是我们要用到Lib.so的原因。Lib.so保留了完整的符号信息（因为运行时进行动态链接还需要使用符号信息），把Lib.so也作为链接的输入文件之一，链接器在解析符号时就可以知道：foobar()函数是一个定义在Lib.so的动态符号。这样链接器就可以堆foobar()函数的引用进行特殊处理，使它成为一个对动态符号的引用。\",\"动态链接程序运行时地址空间分布\",\"注\",\"对于静态链接的可执行文件，整个进程只有可执行文件需要被映射。但是对于动态链接来说，除了可执行文件之外，还有它所依赖的共享目标文件。\",\"对Lib.c的foobar()函数进行修改\",\"// Lib.c #include <stdio.h> #include <unistd.h> void foobar(int i) { printf(\\\"Printing from Lib.so %d\\\\n\\\", i); sleep(-1); }\",\"$> ./Program1 & [1] 10370 Printing from Lib.so 1 $> cat /proc/10370/maps 5611c3c79000-5611c3c7a000 r--p 00000000 08:10 117001 /home/far/worker/linker/chapter04/SimpleDynamicalLinking/Program1 5611c3c7a000-5611c3c7b000 r-xp 00001000 08:10 117001 /home/far/worker/linker/chapter04/SimpleDynamicalLinking/Program1 5611c3c7b000-5611c3c7c000 r--p 00002000 08:10 117001 /home/far/worker/linker/chapter04/SimpleDynamicalLinking/Program1 5611c3c7c000-5611c3c7d000 r--p 00002000 08:10 117001 /home/far/worker/linker/chapter04/SimpleDynamicalLinking/Program1 5611c3c7d000-5611c3c7e000 rw-p 00003000 08:10 117001 /home/far/worker/linker/chapter04/SimpleDynamicalLinking/Program1 5611c5450000-5611c5471000 rw-p 00000000 00:00 0 [heap] 7f066eb09000-7f066eb0c000 rw-p 00000000 00:00 0 7f066eb0c000-7f066eb34000 r--p 00000000 08:10 49449 /usr/lib/x86_64-linux-gnu/libc.so.6 7f066eb34000-7f066ecbc000 r-xp 00028000 08:10 49449 /usr/lib/x86_64-linux-gnu/libc.so.6 7f066ecbc000-7f066ed0b000 r--p 001b0000 08:10 49449 /usr/lib/x86_64-linux-gnu/libc.so.6 7f066ed0b000-7f066ed0f000 r--p 001fe000 08:10 49449 /usr/lib/x86_64-linux-gnu/libc.so.6 7f066ed0f000-7f066ed11000 rw-p 00202000 08:10 49449 /usr/lib/x86_64-linux-gnu/libc.so.6 7f066ed11000-7f066ed1e000 rw-p 00000000 00:00 0 7f066ed25000-7f066ed26000 r--p 00000000 08:10 116994 /home/far/worker/linker/chapter04/SimpleDynamicalLinking/Lib.so 7f066ed26000-7f066ed27000 r-xp 00001000 08:10 116994 /home/far/worker/linker/chapter04/SimpleDynamicalLinking/Lib.so 7f066ed27000-7f066ed28000 r--p 00002000 08:10 116994 /home/far/worker/linker/chapter04/SimpleDynamicalLinking/Lib.so 7f066ed28000-7f066ed29000 r--p 00002000 08:10 116994 /home/far/worker/linker/chapter04/SimpleDynamicalLinking/Lib.so 7f066ed29000-7f066ed2a000 rw-p 00003000 08:10 116994 /home/far/worker/linker/chapter04/SimpleDynamicalLinking/Lib.so 7f066ed2a000-7f066ed2c000 rw-p 00000000 00:00 0 7f066ed2c000-7f066ed2d000 r--p 00000000 08:10 49446 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7f066ed2d000-7f066ed58000 r-xp 00001000 08:10 49446 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7f066ed58000-7f066ed62000 r--p 0002c000 08:10 49446 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7f066ed62000-7f066ed64000 r--p 00036000 08:10 49446 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7f066ed64000-7f066ed66000 rw-p 00038000 08:10 49446 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7ffe6cfa3000-7ffe6cfc4000 rw-p 00000000 00:00 0 [stack] 7ffe6cfe6000-7ffe6cfea000 r--p 00000000 00:00 0 [vvar] 7ffe6cfea000-7ffe6cfeb000 r-xp 00000000 00:00 0 [vdso] $> kill 10370 [1] + 10370 terminated ./Program1\",\"观察到整个虚拟地址空间中，多出了几个文件的映射。Lib.so与Program1一样，它们都是被操作系统用同样的方法映射至进程的虚拟地址空间。Program1除了使用Lib.so外，还是用到了动态链接形式的C语言运行时库(/usr/lib/x86_64-linux-gnu/libc.so.6)。还有Linux下的动态链接器(/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2)。动态链接器和普通共享对象一样被映射到进程的地址空间，在系统开始运行Program1之前，首先将控制权交给动态链接器，由它完成所有的动态链接工作后再把控制权交给Program1，最后开始执行。\",\"通过readelf查看Lib.so的装载属性:\",\"$> readelf -l Lib.so Elf file type is DYN (Shared object file) Entry point 0x0 There are 11 program headers, starting at offset 64 Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flags Align LOAD 0x0000000000000000 0x0000000000000000 0x0000000000000000 0x0000000000000560 0x0000000000000560 R 0x1000 LOAD 0x0000000000001000 0x0000000000001000 0x0000000000001000 0x000000000000017d 0x000000000000017d R E 0x1000 LOAD 0x0000000000002000 0x0000000000002000 0x0000000000002000 0x00000000000000dc 0x00000000000000dc R 0x1000 LOAD 0x0000000000002df8 0x0000000000003df8 0x0000000000003df8 0x0000000000000220 0x0000000000000228 RW 0x1000 DYNAMIC 0x0000000000002e08 0x0000000000003e08 0x0000000000003e08 0x00000000000001c0 0x00000000000001c0 RW 0x8 NOTE 0x00000000000002a8 0x00000000000002a8 0x00000000000002a8 0x0000000000000020 0x0000000000000020 R 0x8 NOTE 0x00000000000002c8 0x00000000000002c8 0x00000000000002c8 0x0000000000000024 0x0000000000000024 R 0x4 GNU_PROPERTY 0x00000000000002a8 0x00000000000002a8 0x00000000000002a8 0x0000000000000020 0x0000000000000020 R 0x8 GNU_EH_FRAME 0x000000000000201c 0x000000000000201c 0x000000000000201c 0x000000000000002c 0x000000000000002c R 0x4 GNU_STACK 0x0000000000000000 0x0000000000000000 0x0000000000000000 0x0000000000000000 0x0000000000000000 RW 0x10 GNU_RELRO 0x0000000000002df8 0x0000000000003df8 0x0000000000003df8 0x0000000000000208 0x0000000000000208 R 0x1 Section to Segment mapping: Segment Sections... 00 .note.gnu.property .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt 01 .init .plt .plt.got .plt.sec .text .fini 02 .rodata .eh_frame_hdr .eh_frame 03 .init_array .fini_array .dynamic .got .got.plt .data .bss 04 .dynamic 05 .note.gnu.property 06 .note.gnu.build-id 07 .note.gnu.property 08 .eh_frame_hdr 09 10 .init_array .fini_array .dynamic .got\",\"注\",\"除了文件类型与普通程序不同之外，其它几乎与普通程序一样。还有一点不同的是，动态链接模块的装载地址是从地址0x0000000000000000开始的。我们知道这个地址是无效地址，并且从上面的进程虚拟空间分布看到，Lib.so的最终装载地址并不是0x0000000000000000，而是0x7f066ed25000。从这一点可以推断，共享对象的最终装载地址在编译时是不确定的，而是在装载时，装载器根据当前地址空间的空闲情况，动态的分配一块足够大小的地址空间给相应的共享对象。\"]},\"74\":{\"h\":\"3. 地址无关代码\"},\"75\":{\"h\":\"3.1 固定装载地址的困扰\",\"t\":[\"注\",\"为了实现动态链接，我们首先会遇到的问题是共享对象地址冲突问题。在动态链接的情况下，如果不同的模块目标装载地址都一样是不行的。而对于单个程序来说，我们可以手工指定各个模块的地址，比如0x1000到0x2000分配给模块A，把地址0x2000到0x3000分配给模块B。但是，如果某个模块被多个程序使用，或者多个模块被多个程序使用呢？这将会使得管理这些模块的地址将是一件无比繁琐的事情。 例如程序program1使用了模块B，但是没有使用模块A，所以他认为地址0x1000到0x2000的地址是空闲的，余数分配给了另一个模块C。这样C和原先的模块A的目标地址就冲突了，任何人以后将不能在同一个程序里面使用模块A和C。这种做法就叫做静态共享库(Static Shared Library)。相比于静态链接，静态共享库的做法就是将程序的各个模块统一交给操作系统管理，操作系统在某个特定的地址划分出一些地址块，为那些已知的模块预留足够的空间。 静态共享库的目标地址导致了很多问题，除了地址冲突外，静态共享库的升级也是问题，因为升级后的共享库必须保持共享库中全局函数和变量地址的不变，如果应用程序在链接时已经绑定了这些地址，一旦变更，就必须重新链接应用程序，否则就会引起应用程序崩溃。即使升级静态共享库后保持原有的函数和变量地址不变，只是增加了一些全局函数或变量，也会受到限制，因为静态共享库被分配到的虚拟地址空间是有限的，不能增长太多，否则就会超出被分配的空间。 为了解决这个模块装载地址固定的问题，我们设想是否可以让共享对象在任意地址加载？既共享对象在编译时不能假设自己在进程虚拟地址空间中的位置。对于可执行文件基本可以确定自己在进程虚拟空间中的起始位置，因为可执行文件往往是第一个被加载的文件。\"]},\"76\":{\"h\":\"3.2 装载时重定位\",\"t\":[\"重要\",\"在链接时，对所有绝对地址的引用不做重定位，而把这一步推迟到装载时完成。一旦模块装载地址确定，既目标地址确定，那么系统就对程序中所有的绝对地址引用进行重定位。 静态链接时的重定位被称为链接时重定位(Link Time Relocation)，而现在这种情况通常被称为装载时重定位(Load Time Relocation)。 装载时重定位的问题：动态链接模块被装载至虚拟空间后，指令部分是在多个进程之间共享的，由于装载时重定位的方法需要修改指令，所以没有办法做到同一份指令被多个进程共享，因为指令部分对于每个进程来说可能会被映射到每个进程的不同虚拟空间，从而导致这些地址对每个进程来说是不同的。而对于可修改数据部分来说每个进程都有不同的副本，所以可以使用装载时重定位的方法来处理。 Linux的GCC编译器支持这种装载时重定位的方法，在编译时可以只使用-shared选项而不使用-fPIC选项。\"]},\"77\":{\"h\":\"3.3 地址无关代码\",\"t\":[\"注\",\"装载时重定位是解决动态模块中没有绝对地址应用的办法之一，但是有一个很大的缺点是指令部分无法在多个进程之间共享，这样就失去了动态链接节省内存的一大优势。 现在我们希望程序模块中共享的指令部分在装载时不需要因为装载地址的改变而改变，所以我们只需要将指令中那些需要被修改的部分进行剥离，和数据部分放在一起，这样指令部分就可以保持不变，而数据部分可以在每个进程中拥有一个副本。这种方案就是地址无关代码(PIC, Position-Independent Code)。\",\"将共享对象中的地址引用按照是否跨模块分为: 模块内部引用和模块外部引用。\",\"按照不同的引用方式又分为：指令引用和数据访问。\",\"因此有如下方式:\",\"模块内部的函数调用、跳转等。\",\"模块内部的数据访问，比如模块中定义的全局变量、静态变量。\",\"模块外部的函数调用、跳转等。\",\"模块外部的数据访问，比如其它模块中定义的全局变量。\",\"bar为非静态函数时\",\"// pic.c static int a; extern int b; extern void ext(); void bar() { a = 1; // 模块内部数据访问 b = 2; // 模块外部数据访问 } void foo() { bar(); // 模块内部函数调用 ext(); // 模块外部函数调用 }\",\"$> gcc -shared -fPIC pic.c -o libpic.so\",\"Disassembly of section .plt.sec: 0000000000001060 <ext@plt>: 1060: f3 0f 1e fa endbr64 1064: ff 25 96 2f 00 00 jmp *0x2f96(%rip) # 4000 <ext> 106a: 66 0f 1f 44 00 00 nopw 0x0(%rax,%rax,1) 0000000000001070 <bar@plt>: 1070: f3 0f 1e fa endbr64 1074: ff 25 8e 2f 00 00 jmp *0x2f8e(%rip) # 4008 <bar+0x2ecf> 107a: 66 0f 1f 44 00 00 nopw 0x0(%rax,%rax,1) 0000000000001139 <bar>: 1139: f3 0f 1e fa endbr64 113d: c7 05 d5 2e 00 00 01 movl $0x1,0x2ed5(%rip) # 401c <a> 1144: 00 00 00 1147: 48 8b 05 72 2e 00 00 mov 0x2e72(%rip),%rax # 3fc0 <b> 114e: c7 00 02 00 00 00 movl $0x2,(%rax) 1154: c3 ret 0000000000001155 <foo>: 1155: f3 0f 1e fa endbr64 1159: 48 83 ec 08 sub $0x8,%rsp 115d: b8 00 00 00 00 mov $0x0,%eax 1162: e8 09 ff ff ff call 1070 <bar@plt> 1167: b8 00 00 00 00 mov $0x0,%eax 116c: e8 ef fe ff ff call 1060 <ext@plt> 1171: 48 83 c4 08 add $0x8,%rsp 1175: c3 ret\",\"bar静态函数时\",\"static int a; extern int b; extern void ext(); static void bar() { a = 1; // 模块内部数据访问 b = 2; // 模块外部数据访问 } void foo() { bar(); // 模块内部函数调用 ext(); // 模块外部函数调用 }\",\"$> gcc -shared -fPIC pic.c -o libpic.so\",\"0000000000001119 <bar>: 1119: c7 05 f1 2e 00 00 01 movl $0x1,0x2ef1(%rip) # 4014 <a> 1120: 00 00 00 1123: 48 8b 05 96 2e 00 00 mov 0x2e96(%rip),%rax # 3fc0 <b> 112a: c7 00 02 00 00 00 movl $0x2,(%rax) 1130: c3 ret 0000000000001131 <foo>: 1131: f3 0f 1e fa endbr64 1135: 48 83 ec 08 sub $0x8,%rsp 1139: b8 00 00 00 00 mov $0x0,%eax 113e: e8 d6 ff ff ff call 1119 <bar> 1143: b8 00 00 00 00 mov $0x0,%eax 1148: e8 03 ff ff ff call 1050 <ext@plt> 114d: 48 83 c4 08 add $0x8,%rsp 1151: c3 ret\",\"类型一 模块内部调用或跳转\",\"注\",\"根据objdump反汇编后得到的结果和书中列出的不太一样。实际汇编得到的结果是使用了共享对象全局符号介入(Global Symbol Interposition)。在动态链接的实现中会提到。 但是当你讲bar函数修改为静态成员函数时就是书中想要的结果(或许是书中的纰漏吧，作为补充我在这里给出了书中想要的效果)。\",\"这种情况是最简单的，因为被调用的函数与调用者都在同一个模块，所以它们之间的相对位置是固定的，所以这种情况会比较简单。对于现代系统来说，模块内部的跳转、函数调用都可以是相对地址调用，或者是基于寄存器的相对调用，所以对于这种指令是不需要重定位的。\",\"类型二 模块内部数据访问 任何一条指令与它需要访问的模块内部数据之间的相对位置是固定的，那么只需要相对于当前指令(PC值)加上固定的偏移量就可以访问模块内部数据了。例如函数bar中的一段反汇编代码:\",\"# %rip既是对应的PC值(当前执行的下一条指令) 113d: c7 05 d5 2e 00 00 01 movl $0x1,0x2ed5(%rip) # 401c <a> 1144: 00 00 00 # a内存地址进行了一次内存对齐，所以需要补0所以%rip实际值为0x1147 1147: 48 8b 05 72 2e 00 00 mov 0x2e72(%rip),%rax # 3fc0 <b>\",\"假设该模块经过加载后位于虚拟内存的0x10000000处，那变量a所在的虚拟内存地址为: 0x2ed5 + 0x1147 + 0x10000000 = 0x1000401c。 而通过查看符号表信息可以得到变量a所在elf文件中的位置:\",\"$> readelf -s libpic.so # 只显示了部分数据 ... ymbol table '.symtab' contains 29 entries: Num: Value Size Type Bind Vis Ndx Name ... 10: 000000000000401c 4 OBJECT LOCAL DEFAULT 22 a ... ...\",\"类型三 模块间数据访问 要使得代码地址无关，基本的思想是把和地址相关的部分放到数据段里面，很明显，这些其它模块的全局变量的地址是和模块装载地址相关的。elf的做法是在数据段里面创建一个指向这些变量的指针数组，也被称为全局偏移表(Global Offset Table, GOT)，当代码需要引用该变量时，可以通过GOT中相对应的项间接引用。如图:\",\"模块间数据访问\",\"当指令需要访问变量b时，程序会先找到GOT，然后根据GOT中变量所对应的项找到变量的目标地址。链接器在装载模块的时候会查找每个变量所在的地址，然后填充GOT中的各个项，以确保每个指针所指向的地址正确。由于GOT本身是放在数据段的，所以它可以在模块装载时被修改，并且每个进程都可以有独立的副本，相互不受影响。\",\"重要\",\"GOT是如何实现指令的地址无关性的。模块在编译时可以确定模块内部变量相对于当前指令的偏移，那么我们也可以在编译时确定GOT相对于当前指令的偏移。确定GOT的位置和上面的访问变量a的方法基本一样，通过得到PC值然后加上偏移量，就可以得到GOT的位置。然后我们根据变量地址在GOT中的偏移量就可以得到变量的地址，当然GOT中每个地址对应于哪个变量是由编译器决定的，比如第一个地址对应变量b，第二个变量对应变量c等。\",\"假设共享库被加载到0x100000000的位置，观察函数bar()的反汇编代码。为访问变量b，程序首先计算出变量b的地址在GOT中的位置，即0x10000000 + 0x114e + 0x2e72 = 0x10003fc0\",\"查看GOT位置\",\"$> readelf -S libpic.so There are 27 section headers, starting at offset 0x3548: Section Headers: [Nr] Name Type Address Offset Size EntSize Flags Link Info Align ... [19] .got PROGBITS 0000000000003fc0 00002fc0 0000000000000028 0000000000000008 WA 0 0 8 ...\",\"GOT在文件中的偏移为0x3fc0。查看动态链接时重定位项。\",\"$> readelf -r libpic.so Relocation section '.rela.dyn' at offset 0x458 contains 8 entries: Offset Info Type Sym. Value Sym. Name + Addend ... 000000003fc0 000200000006 R_X86_64_GLOB_DAT 0000000000000000 b + 0 ...\",\"观察到变量b的地址需要重定位，它位于0x3fc0，也就是GOT中偏移0，相当于是GOT中的第一项（每8字节一项）正好对应通过指令计算出的偏移量0x114e + 0x2e72 = 0x3fc0。\",\"类型四 模块间调用、跳转 对于模块间调用和跳转，同样可以采用类型三的方法来解决。但是不同的是，GOT中相应的项保存的是目标函数的地址，当模块需要调用目标函数时，可以通过GOT中的项进行间接跳转基本原理如下图(这是原书可出的可能会和实际不同，但是不影响我们进行分析):\",\"模块间调用、跳转\",\"0000000000001060 <ext@plt>: 1060: f3 0f 1e fa endbr64 1064: ff 25 96 2f 00 00 jmp *0x2f96(%rip) # 4000 <ext> 106a: 66 0f 1f 44 00 00 nopw 0x0(%rax,%rax,1) 0000000000001155 <foo>: 1155: f3 0f 1e fa endbr64 1159: 48 83 ec 08 sub $0x8,%rsp 115d: b8 00 00 00 00 mov $0x0,%eax 1162: e8 09 ff ff ff call 1070 <bar@plt> 1167: b8 00 00 00 00 mov $0x0,%eax 116c: e8 ef fe ff ff call 1060 <ext@plt> 1171: 48 83 c4 08 add $0x8,%rsp 1175: c3 ret\",\"观察到调用ext()函数时跳转到了\\\"ext@plt\\\"调用，而该函数内部实现依旧是跳转到GOT表中通过间接跳转实现对函数的调用(0x1064代码处调用)。\",\"注\",\"通过实际的分析发现函数的GOT表并不在.got段中而是在一个名为.got.plt段中(延迟绑定)这是对模块间调用、跳转的一种优化。\",\"-fpic和-fPIC 从功能上来说完全一样，都是生成地址无关代码，“-fPIC”生成的代码要大，而“f-pic”生成的代码要小，而且较快。但是由于地址无关代码都是和硬件平台相关的，不同的平台有着不同的实现，“-fpic”在某些平台上会有一些限制，比如全局符号的数量或者代码的长度等，而“-fPIC”则没有这样的限制。所以为了方便，绝大多数情况下都使用”-fPIC“。\",\"PIC和PIE 一个以地址无关方式编译的可执行文件被称为地址无关可执行文件(PIE, Position-Independent Executable)。对应GCC选项\\\"-fpie\\\"或\\\"-fPIE\\\"。\"]},\"78\":{\"h\":\"3.4 共享模块的全局变量问题\",\"t\":[\"当一个模块引用了一个定义在共享对象的全局变量的时比如一个共享对象定义了一个全局变量global，而模块module.c是这样引用的：\",\"extern int global; int foo() { global = 1; }\",\"当编译器编译moudule.c时，无法根据这个上下文判断global是定义在同一个模块的其它目标文件还是定义在另一个模块当中，既无法判断是否为跨模块间的调用。\",\"假设module.c是程序可执行文件的一部分，那么这种情况下，由于程序主模块的代码并不是地址无关代码，也就是说代码不会使用这种PIC机制，它引用这个全局变量的方式和普通数据访问方式一样，编译器会产生这样的代码：\",\"movq $0x1, XXXXXXXXXXXXXXXX # XXXXXXXXXXXXXXXX为global的地址。\",\"由于可执行文件在运行时并不进行代码重定位，所以变量的地址必须在链接过程中确定下来。为了能够使得链接过程正常进行，链接器会在创建可执行文件时，在它的\\\".bss\\\"段创建一个global变量的副本。那么现在global变量定义在原先的共享对象中，而在可执行文件的\\\".bss\\\"段还有一个副本。如果同一个变量同时存在于多个位置中，这在程序实际运行过程中肯定是不可行的。\",\"如何解决？那就是所有的使用这个变量的指令都指向位于可执行文件中的那个副本。ELF共享库在编译时，默认都把定义在模块内部的全局变量当作定义在其它模块的全局变量，也就是类型四 模块间变量访问，通过GOT来实现变量访问。当共享模块被装载时，如果某个全局变量在可执行文件中拥有副本，那么动态链接器就会把GOT中的相应地址指向该副本，这样该变量在运行时实际上最终只有一个实例。如果变量在共享模块中被初始化，那么动态链接器还需要将该初始化值复制到程序主模块中的变量副本；如果该全局变量在程序主模块中没有副本，那么GOT中相应地址就指向模块内部的该变量副本。\",\"如果module.c是共享对象的一部分，那么GCC编译器在-fPIC的情况下，就会把对global的调用按照跨模块模式产生代码。因为编译器无法确定对global的引用是跨模块的还是模块内部的。即使是模块内部的，还是会产生跨模块代码，因为global可能被可执行文件引用，从而使得共享模块中对global的引用要执行可执行文件中的globa副本。\"]},\"79\":{\"h\":\"3.5 数据段地址无关性\",\"t\":[\"static int a; static int *p = &a;\",\"如果某个共享对象里有这样一段代码，那么p的地址就是一个绝对地址，它指向变量a，而变量a的地址会随着共享对象的装载地址改变而改变。\",\"对于数据段来说，它在每个进程都有一份独立的副本，所以并不担心被进程改变。从这点来看，我们可以选择装载时重定位的方法来解决数据段中绝对地址引用问题。对于共享对象来说，如果数据段中有绝对地址引用，那么编译器和链接器就会产生一个重定位表，这个重定位表里面里面包含了“R_X86_64_GLOB_DAT\\\"类型的重定位入口，用于解决上述问题。当动态链接器装载共享对象时，如果发现该共享对象有这样的重定位入口，那么动态链接器就会对该共享对象进行重定位。\"]},\"80\":{\"h\":\"4. 延迟绑定(PLT)\",\"t\":[\"动态链接库比静态链接慢的主要原因：\",\"动态链接下对于全局和静态的数据访问都要进行复杂的GOT定位，然后间接寻址，对于模块间的调用也要先定位GOT，然后再进行间接跳转。\",\"动态链接的链接工作在运行时完成，即程序开始执行时，动态链接器都要进行一次链接工作，动态链接器会寻找斌装载所需要的共享对象，然后进行符号查找地址重定位等工作。\",\"延迟绑定实现 在动态链接下，程序模块之间包含了大量的函数引用(全局变量往往比较少，因为大量的全局变量会导致模块间耦合度变大)，所以在程序开始执行前，动态链接会耗费不少时间用于解决模块之间的函数引用的符号查找和重定位。不过可以想象，在一个程序运行过程中，可能很多函数在程序执行完时都不会被用到，比如一些错误处理函数或者是一些用户很少用到的功能模块等，如果一开始就把所有函数都链接好实际上是一种浪费。所以ELF采用了一种叫 延迟绑定(Lazy Binding) 的做法,其基本思想是当函数第一次被用到时才进行绑定(符号查找、重定位等)，如果没有用到则不进行绑定。所以程序开始执行时，模块间的函数调用都没有进行绑定，而是需要用到时才由动态链接器来负责绑定。\",\"ELF使用 PLT(Procedure Linkage Table) 的方法来实现，这种方法使用了一些精巧的指令序列来完成。\",\"注\",\"假设liba.so需要调用libc.so中的bar()函数，那么当liba.so中第一次调用bar()时，这时候就需要调用动态链接器中的某个函数来完成地址绑定工作，我们假设这个函数叫做lookup()，那么lookup()需要知道一些必要信息才能完成这个函数地址绑定的工作:\",\"地址绑定发生在哪个模块，哪个函数。 假设lookup的原型为lookup(module, function)，这两个参数的值在我们的列子中分别为liba.so和bar()。在Glibc中，我们这里的lookup()函数正在的名字叫做_dl_runtime_resolve()。\",\"当我们调用某个外部模块的函数时，如果按照通常的做法应该时通过GOT中相应的项进行间接跳转。PLT为了实现延迟绑定，在这个过程中间又增加了一层间接跳转。调用函数并不直接通过GOT跳转，而是通过一个叫做PLT项的结构来进行跳转。每个外部函数在PLT中都有一个相应的项，比如bar()函数在PLT中的项我们称之为bar@plt。\",\"0000000000001070 <bar@plt>: 1070: f3 0f 1e fa endbr64 1074: ff 25 8e 2f 00 00 jmp *0x2f8e(%rip) # 4008 <bar+0x2ecf> 107a: 66 0f 1f 44 00 00 nopw 0x0(%rax,%rax,1)\",\"注\",\"过程链接表(PLT)是一个数组，其中每个条目时16字节代码。PLT[0]时一个特殊条目，它跳转到动态链接库中。每个被可执行程序调用的库函数都有它自己的PLT条目。每个条目都负责调用一个具体的函数。PLT[1]调用系统启动函数(__libc_start_main)，它初始化执行环境。从PLT[2]开始的条目调用用户代码调用的函数。\",\"全局偏移表(GOT)是一个数组，其中每个条目时8字节地址。和PLT联合使用时，GOT[0]和GOT[1]包含动态链接器在解析函数地址时会使用的信息。GOT[2]是动态链接器在ld-linux.so模块的入口点。其余的每个条目对应于一个被调用的函数，其地址需要在运行是被解析。每个条目都有一个相匹配的PLT条目。初始时每个GOT条目都指向对应PLT条目的第二条指令。 (参考csapp 7.12小节)\",\"#include <stdio.h> #include <stdlib.h> #include <dlfcn.h> int x[2] = {1, 2}; int y[2] = {3, 4}; int z[2]; int main() { void *handle; void (*addvec) (int *, int *, int *, int); char *error; handle = dlopen(\\\"./libvector.so\\\", RTLD_LAZY); if (!handle) { fprintf(stderr, \\\"%s \\\\n\\\", dlerror()); exit(1); } addvec = dlsym(handle, \\\"addvec\\\"); if ((error = dlerror()) != NULL) { fprintf(stderr, \\\"%s\\\\n\\\", error); exit(1); } addvec(x, y, z, 2); printf(\\\"z = [%d %d]\\\\n\\\", z[0], z[1]); if (dlclose(handle) < 0) { fprintf(stderr, \\\"%s\\\\n\\\", dlerror()); exit(1); } return 0; }\",\"用PLT和GOT调用外部函数。在第一次调用addvec时，动态链接器解析它的地址\",\"如何使用GOT和PLT协同工作:\",\"addvec第一次被调用时，延迟解析它的运行时地址： \",\"不直接调用addvec，程序调用进入PLT[2]，这是addvec的PLT条目\",\"第一条PLT指令通过GOT[4]进行间接跳转。因为每个GOT条目初始化时都指向它对应的PLT条目的第二条指令，这个间接跳转只是简单的把控制传送回PLT[2]中的下一条指令。\",\"在把addvec的ID（0x1）压入栈中之后，PLT[2]跳转到PLT[0]。\",\"PLT[0]通过GOT[1]间接的把动态链接器的一个参数压入栈中，然后通过GOT[2]间接跳转到动态链接器中。动态链接器使用两个栈条目来确定addvec的运行时位置，用这个地址重新GOT[4]，再把控制权传递给addvec。\",\"后续再调用addvec时的控制流： \",\"控制传递到PLT[2]。\",\"通过GOT[4]的间接跳转会将控制直接转移到addvec。\",\"PLT在ELF文件中以独立的段存放，段名叫\\\".plt\\\"。因为本身是一些地址无关代码，所以可以和代码段等一起合并成同一个可读可指向的“segment”被装载入内存。\"]},\"81\":{\"h\":\"5. 动态链接相关结构\",\"t\":[\"动态链接情况下，可执行文件的装载与静态链接情况基本一样。首先操作系统会读取可执行文件的头部，检查文件的合法性，然后从头部中的 \\\"Program Header\\\" 中读取每个 \\\"Segment\\\" 的虚拟地址、文件地址和属性，并将它们映射到进程虚拟空间的相应位置，这些步骤和静态链接情况下的装载基本无异。在静态链接情况下，操作系统接着就可以把控制权交给可执行文件的入口地址，然后程序开始执行。\",\"可是在动态链接情况下，操作系统还不能在装载完可执行文件之后就把控制权交给可执行文件，因为可执行文件依赖于很多共享对象。这时，可执行文件对于很多 外部符号的引用还处于无效地址的状态，既还没有和相应的共享对象中的实际位置链接起来。所以在映射完可执行文件后，操作系统会先启动一个动态链接器（Dynamic Linker）。\",\"在Linux下，动态链接器ld.so实际上是一个共享对象，操作系统统一通过映射的方式将它加载到进程的地址空间中。操作系统在加载完动态链接器后，将控制权交给动态链接器的入口地址（与可执行文件一样，共享对象也有入口地址）。当动态链接器获得控制权后，便开始一系列自身的初始化操作，然后根据当前的环境参数，开始对可执行文件进行动态链接工作。当所有动态链接工作完成后，动态链接器会将控制权交给可执行文件的入口地址，程序开始正式执行。\"]},\"82\":{\"h\":\"5.1 \\\".interp\\\"段\",\"t\":[\"注\",\"动态链接去的位置既不是由系统配置指定，也不是由环境参数决定，而是由ELF可执行文件决定。在动态链接的ELF可执行文件中，有一个专门的段叫做==\\\".interp\\\"段(\\\"interp\\\"是\\\"interpreter\\\"(解释器)的缩写)。 \\\".interp\\\"里面保持的就是一个字符串，这个字符串就是可执行文件所需要的动态链接器的路径。在Linux中，操作系统在对可执行文件进行加载时==，会去寻址装载该可执行文件所需要相应的动态链接器，既\\\".interp\\\"段所指定的路径的共享对象。\",\"使用objdump工具查看\\\"interp\\\"内容：\",\"// test.c #include <stdio.h> int main() { printf(\\\"hello world!\\\\n\\\"); return 0; } // gcc test.c -o test\",\"$> objdump -s test test: file format elf64-x86-64 Contents of section .interp: 0318 2f6c6962 36342f6c 642d6c69 6e75782d /lib64/ld-linux- 0328 7838362d 36342e73 6f2e3200 x86-64.so.2.\",\"也可以使用readelf查看：\",\"$> readelf -l test|grep .interpreter [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]\"]},\"83\":{\"h\":\"5.2 \\\".dynamic\\\"段\",\"t\":[\"重要\",\"动态链接ELF中最重要的结构\\\".dynamic\\\"段，这个段保存了动态链接所需要的基本信息，比如依赖于那些共享对象、动态链接符号表的位置、动态链接重定位表的位置、共享对象初始化代码的地址等。\",\"\\\".dynamic\\\"段的结构：\",\"/* Dynamic section entry. */ // 32位 typedef struct { Elf32_Sword d_tag; /* Dynamic entry type */ union { Elf32_Word d_val; /* Integer value */ Elf32_Addr d_ptr; /* Address value */ } d_un; } Elf32_Dyn; // 64位 typedef struct { Elf64_Sxword d_tag; /* Dynamic entry type */ union { Elf64_Xword d_val; /* Integer value */ Elf64_Addr d_ptr; /* Address value */ } d_un; } Elf64_Dyn;\",\"d_tag类型\",\"d_un的含义\",\"DT_SYMTAB\",\"动态链接符号表的地址，d_ptr表示\\\".dynsym\\\"的地址\",\"DT_STRTAB\",\"动态链接字符串表地址，d_ptr表示\\\".dynstr\\\"的地址\",\"DT_STRSZ\",\"动态链接字符串表大小，d_val表示大小\",\"DT_HASH\",\"动态链接哈希表地址，d_ptr表示\\\".hash\\\"的地址\",\"DT_SONAME\",\"本共享对象的\\\"SO-NAME\\\"\",\"DT_RPATH\",\"动态链接共享对象搜索路径\",\"DT_INIT\",\"初始化代码地址\",\"DT_FINIT\",\"结束代码地址\",\"DT_NEED\",\"依赖的共享对象文件，d_ptr表示所依赖的共享对象文件名\",\"DT_REL/DT_RELA\",\"动态链接重定位表地址\",\"DT_RELENT/DT_RELAENT\",\"动态重定位表入口函数\",\"使用readelf工具查看\\\".dynamic\\\"段的内容：\",\"$> readelf -d test Dynamic section at offset 0x2dc8 contains 27 entries: Tag Type Name/Value 0x0000000000000001 (NEEDED) Shared library: [libc.so.6] 0x000000000000000c (INIT) 0x1000 0x000000000000000d (FINI) 0x1168 0x0000000000000019 (INIT_ARRAY) 0x3db8 0x000000000000001b (INIT_ARRAYSZ) 8 (bytes) 0x000000000000001a (FINI_ARRAY) 0x3dc0 0x000000000000001c (FINI_ARRAYSZ) 8 (bytes) 0x000000006ffffef5 (GNU_HASH) 0x3b0 0x0000000000000005 (STRTAB) 0x480 0x0000000000000006 (SYMTAB) 0x3d8 0x000000000000000a (STRSZ) 141 (bytes) 0x000000000000000b (SYMENT) 24 (bytes) 0x0000000000000015 (DEBUG) 0x0 0x0000000000000003 (PLTGOT) 0x3fb8 0x0000000000000002 (PLTRELSZ) 24 (bytes) 0x0000000000000014 (PLTREL) RELA 0x0000000000000017 (JMPREL) 0x610 0x0000000000000007 (RELA) 0x550 0x0000000000000008 (RELASZ) 192 (bytes) 0x0000000000000009 (RELAENT) 24 (bytes) 0x000000000000001e (FLAGS) BIND_NOW 0x000000006ffffffb (FLAGS_1) Flags: NOW PIE 0x000000006ffffffe (VERNEED) 0x520 0x000000006fffffff (VERNEEDNUM) 1 0x000000006ffffff0 (VERSYM) 0x50e 0x000000006ffffff9 (RELACOUNT) 3 0x0000000000000000 (NULL) 0x0\",\"使用ldd查看一个程序主模块或一个共享库依赖于哪些共享库：\",\"$> ldd test linux-vdso.so.1 (0x00007ffe6d77b000) libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f7967314000) /lib64/ld-linux-x86-64.so.2 (0x00007f796754d000)\"]},\"84\":{\"h\":\"5.3 动态符号表\",\"t\":[\"// lib.c #include <stdio.h> void foobar(int i) { printf(\\\"Printing form lib.so %d\\\\n\\\", i); } // gcc -shared -fPIC lib.c -o Lib.so // Program1.c #include \\\"Lib.h\\\" int main() { foobar(1); return 0; }\",\"注\",\"为了完成动态链接，最关键的还是所依赖的符号和相关文件的信息。我们知道在静态链接中，有一个专门的段叫符号表\\\".symtab\\\"(symbol table)，里面保存了所有关于该目标文件的符号的定义和引用。动态链接的符号表示和静态链接十分相似。比如Program1程序依赖于Lib.so，引用了里面的printf()函数。那么对于Program1来说，我们称Program1 导入(import) 了foobar()函数，foobar()是Program1的 导入函数(import function) ；而Lib.so它实际上是定义了foobar()函数，并且提供给其它模块使用，我们称Lib.so导出(export) 了foobar()函数，foobar()是Lib.so的 导出函数(export function) 。对比于这种导入导出函数，在静态链接中就相当于普通函数的定义和引用。 ELF中表示这种模块间符号导入导出的关系就叫做 动态符号表(Dynamic Symbol Table)，对应的段名就是 \\\".dynsym\\\"(Dynamic Symbol)。与\\\".symbol\\\"不同的是，\\\".dynsym\\\"只保存了与动态链接相关的符号，对于模块内部的符号，比如是私有变量则不保存。很多时候动态链接的模块同时拥有\\\".dynsym\\\"和\\\".symtab\\\"两个表，\\\".symtab\\\"中往往保存了所有符号，包括\\\".dynsym\\\"中的符号。 和\\\".symtab\\\"类似，动态符号表也需要一些辅助表，比如用于保存符号名的字符串表。今天链接时叫做字符串表==\\\".strtab\\\"(string table)，在这里就是动态符号字符串表\\\".dynstr\\\"(Dynamic String Table)；由于动态链接下，我们需要在程序运行时查找符号，为了加快符号的查找过程，往往还有辅助的符号哈希表(\\\".hash\\\")==。\",\"使用readelf查看ELF文件的动态符号表以及哈希表：\",\"$> readelf -sD Lib.so Symbol table for image contains 7 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000000000 0 NOTYPE WEAK DEFAULT UND _ITM_deregisterT[...] 2: 0000000000000000 0 FUNC GLOBAL DEFAULT UND [...]@GLIBC_2.2.5 (2) 3: 0000000000000000 0 NOTYPE WEAK DEFAULT UND __gmon_start__ 4: 0000000000000000 0 NOTYPE WEAK DEFAULT UND _ITM_registerTMC[...] 5: 0000000000000000 0 FUNC WEAK DEFAULT UND [...]@GLIBC_2.2.5 (2) 6: 0000000000001119 43 FUNC GLOBAL DEFAULT 14 foobar # .hash似乎已经不用了\"]},\"85\":{\"h\":\"5.4 动态链接重定位表\",\"t\":[\"动态链接重定位相关结构 共享对象的重定位与静态链接的目标文件的重定位十分类似。唯一有区别的是目标文件的重定位是目标文件的重定位是在今天链接时完成，而共享对象的重定位则是在装载时完成的。在静态链接中，目标文件里面包含有专门由于表示重定位信息的重定位表，比如 \\\".rel.text\\\" 表示代码段的重定位表，\\\".rel.data\\\" 是数据段的重定位表。 动态链接的文件中，重定位表分别叫做\\\".rel.dyn\\\"和\\\".rel.plt\\\"，他们分别相当于\\\".rel.text\\\"和\\\".rel.data\\\"。 \\\".rel.dyn\\\" 实际上是对数据引用的修正，它所修正的位置位于 \\\".got\\\"以及数据段 ；而 \\\".rel.plt\\\" 是对函数引用的修正，它所修正的位置位于 \\\".got.plt\\\" 。\",\"使用readelf查看文件的重定位表：\",\"$> readelf -r Lib.so Relocation section '.rela.dyn' at offset 0x468 contains 7 entries: Offset Info Type Sym. Value Sym. Name + Addend 000000003e10 000000000008 R_X86_64_RELATIVE 1110 000000003e18 000000000008 R_X86_64_RELATIVE 10d0 000000004020 000000000008 R_X86_64_RELATIVE 4020 000000003fe0 000100000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTM[...] + 0 000000003fe8 000300000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0 000000003ff0 000400000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCl[...] + 0 000000003ff8 000500000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0 Relocation section '.rela.plt' at offset 0x510 contains 1 entry: Offset Info Type Sym. Value Sym. Name + Addend 000000004018 000200000007 R_X86_64_JUMP_SLO 0000000000000000 printf@GLIBC_2.2.5 $> readelf -S Lib.so ... [22] .got PROGBITS 0000000000003fe0 00002fe0 0000000000000020 0000000000000008 WA 0 0 8 [23] .got.plt PROGBITS 0000000000004000 00003000 0000000000000020 0000000000000008 WA 0 0 8 [24] .data PROGBITS 0000000000004020 00003020 0000000000000008 0000000000000000 WA 0 0 8 ...\",\"R_X86_64_JUMP_SLO(对.got.plt的重定位) 被修正的位置只需要填入符号的地址即可。例如printf这个重定位入口，它的类型为R_X86_64_JUMP_SLO，它的偏移为0x000000004018，它实际上位于\\\".got.plt\\\"中，前三项被系统占据，从第四项开始存放导入函数的地方。0x0000000000004000 + 8 * 3 = 000000004018。 \",\"第一项保存的是\\\".dynamic\\\"段的地址。\",\"第二项保存的是本模块的ID。\",\"第三项保存的是_dl_runtime_resolve()的地址。 当动态链接器需要进行重定位时，先查找\\\"printf\\\"的地址，\\\"printf\\\"位于libc.so.6中。假设链接器在全局符号表里面找到\\\"printf\\\"的地址为0x000008801234，那么链接器就会将这个地址填入到\\\".got.plt\\\"中的偏移为0x000000004018位置中去，从而实现了地址的重定位，既实现了动态链接最关键的一步。\",\"R_X86_64_GLOB_DAT(对.got的重定位) 和R_X86_64_JUMP_SLO一模一样。\",\"R_X86_64_RELATIVE，这种类型的重定位实际上就是基址重置(Rebasing)。共享对象的数据段没有办法做到地址无关的，它可能会包含绝对地址引用，对于这种绝对地址的引用，我们必须在装载时将其重定位。例如：\",\"static int a; static int *p = &a;\",\"在编译时，共享对象的地址是从0开始的，我们假设该静态变量a相对于起始地址0的偏移为B，即p值为B。一旦共享对象被装载到地址A，那么实际上该变量a的地址为A+B，即p的值需要加上一个装载地址A。R_X86_64_RELATIVE类型的重定位入口就是专门用来重定位指针变量p这种类型的，变量p在装载时需要加上一个装载地址A，才是正确的结果。\"]},\"86\":{\"h\":\"5.5 动态链接时进程堆栈初始化信息\",\"t\":[\"注\",\"站在动态链接器的角度看，当操作系统将控制权交给它时，它将开始做链接工作，那么至少它需要知道关于可执行文件和本进程的些信息，比如可执行文件有几个段(\\\"Segment\\\")、每个段的属性、程序的入口地址等。这些信息往往由操作系统传递给动态链接器，保存在进程的堆栈里面。进程初始化时，堆栈里面保存了关于进程执行环境和命令行参数等信息。事实上，堆栈里面还保存了动态链接器所需要的一些辅助信息数组(Auxiliary Vector)。\",\"辅助信息结构：\",\"// /usr/include/elf.h /* Auxiliary vector. */ /* This vector is normally only used by the program interpreter. The usual definition in an ABI supplement uses the name auxv_t. The vector is not usually defined in a standard <elf.h> file, but it can't hurt. We rename it to avoid conflicts. The sizes of these types are an arrangement between the exec server and the program interpreter, so we don't fully specify them here. */ typedef struct { uint32_t a_type; /* Entry type */ union { uint32_t a_val; /* Integer value */ /* We use to have pointer elements added here. We cannot do that, though, since it does not work when using 32-bit definitions on 64-bit platforms and vice versa. */ } a_un; } Elf32_auxv_t; typedef struct { uint64_t a_type; /* Entry type */ union { uint64_t a_val; /* Integer value */ /* We use to have pointer elements added here. We cannot do that, though, since it does not work when using 32-bit definitions on 64-bit platforms and vice versa. */ } a_un; } Elf64_auxv_t;\"]},\"87\":{\"h\":\"6. 动态链接的步骤和实现\",\"t\":[\"动态链接的步骤：\",\"启动动态链接器本身\",\"装载所有需要的共享对象\",\"重定位和初始化\"]},\"88\":{\"h\":\"6.1 动态链接器自举\",\"t\":[\"注\",\"动态链接器本身也是一个共享对象。\",\"对于普通共享对象文件来说，它的重定位工作由动态链接器来完成；它也可以依赖于其它共享对象，其中的被依赖的共享对象有动态链接器负责链接和装载。\",\"对于动态链接器本身？首先动态链接器本身不可以依赖于其它任何共享对象，其次动态链接器本身所需要的全局和静态变量的重定位工作由本身完成。对于第一个条件我们可以人物的控制，在编写动态链接器时保证不使用任何系统库、运行库；对于第二个条件，动态链接器必须在启动时有一段非常精巧的代码可以完成这项艰巨的工作而同时又不能使用全局和静态变量。这种具有一定限制条件的启动代码往往被称为自举（Bootstrap）。\",\"动态链接器入口地址即是自举代码入口，当操作系统将进程控制权交给动态链接器时，动态链接器的自举代码开始执行。自举代码首先会找到它自己的GOT。而GOT的第一个入口保存的是\\\".dynamic\\\"段的偏移地址，由此找到了动态链接器本身的\\\".dynamic\\\"段。通过\\\".dynamic\\\"中的信息，自举代码便可以或得动态链接器本身的重定位表和符号表等，从而得到动态链接器本身的重定位入口，先将它们全部重定位。从这一步开始，动态链接器代码中才可以开始使用自己的全局变量和静态变量。\",\"实际上动态链接器的自举代码中，除了不可以使用全局变量和静态变量之外，甚至不能调用函数，既动态链接器本身的函数也不能调用。\"]},\"89\":{\"h\":\"6.2 装载共享对象\",\"t\":[\"注\",\"完成自举后，动态链接器将可执行文件和链接器本身的符号表都合并到一个符号表中，我们称为全局符号表（Global Symbol Table）。然后链接器开始寻址可执行文件所依赖的共享对象，在\\\".dynamic\\\"段中，有一种类型的入口是DT_NEEDED，它所指出的是可执行文件（或共享对象）所依赖的共享对象。由此，链接器可以列出可执行文件所需的所有共享对象并将这些共享对象的名字放入到一个装载集合中。然后链接器开始从集合中取一个所需的共享对象的名字，找到相应的文件后打开该文件，读取相应的ELF文件头和\\\".dynamic\\\"段，然后将它相应的代码段和数据段映射到进程空间中。如果这个ELF共享对象还依赖于其它共享对象，那么将所依赖的共享对象的名字放到装载集合中。如此循环直到所有依赖的共享对象都被装载完成。链接器的装载会有不同的顺序，可能会使用深度优先或者广度优先或者其它的顺序来遍历整个链接，这取决于链接器，但是一般比较常见的算法是广度优先。 当一个新的共享对象被装载完成时，它的符号表会被合并到全局符号表中，所以当所有的共享对象被装载进来时，全局符号表里将包含进程中所有的动态链接所需的符号。\",\"符号的优先级\",\"// a1.c #include <stdio.h> void a() { printf(\\\"a1.c\\\\n\\\"); } // a2.c #include <stdio.h> void a() { printf(\\\"a2.c\\\\n\\\"); } // b1.c void a(); void b1() { a(); } // b2.c void a(); void b2() { a(); }\",\"假设b1.c依赖于a1.c，b2.c依赖于a2.c:\",\"$> gcc -fPIC -shared a1.c -o a1.so $> gcc -fPIC -shared a2.c -o a2.so $> gcc -fPIC -shared b1.c ./a1.so -o b1.so $> gcc -fPIC -shared b2.c ./a2.so -o b2.so $> ldd b1.so linux-vdso.so.1 (0x00007ffd801db000) ./a1.so (0x00007f0682435000) libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f0682203000) /lib64/ld-linux-x86-64.so.2 (0x00007f0682441000) $> ldd b2.so linux-vdso.so.1 (0x00007ffc144a5000) ./a2.so (0x00007f83a7b6f000) libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f83a793d000) /lib64/ld-linux-x86-64.so.2 (0x00007f83a7b7b000)\",\"假设有程序同时使用b1.c中的函数b1和b2.c中的函数b2\",\"// main.c #include <stdio.h> void b1(); void b2(); int main() { b1(); b2(); return 0; }\",\"$> gcc main.c b1.so b2.so -o main -Xlinker -rpath ./ $> ./main a1.c a1.c\",\"注\",\"\\\"-Xlinker -rpath ./\\\"表示链接器在当前路径寻址共享对象，否则链接器会报无法找到a1.so和a2.so的错误。\",\"查看进程的映射信息:\",\"$> cat /proc/102949/maps 55908b687000-55908b688000 r--p 00000000 fc:03 1085761 /home/far/worker/linker/chapter05/main 55908b688000-55908b689000 r-xp 00001000 fc:03 1085761 /home/far/worker/linker/chapter05/main 55908b689000-55908b68a000 r--p 00002000 fc:03 1085761 /home/far/worker/linker/chapter05/main 55908b68a000-55908b68b000 r--p 00002000 fc:03 1085761 /home/far/worker/linker/chapter05/main 55908b68b000-55908b68c000 rw-p 00003000 fc:03 1085761 /home/far/worker/linker/chapter05/main 55908c862000-55908c883000 rw-p 00000000 00:00 0 [heap] 7ff5b68b2000-7ff5b68b4000 rw-p 00000000 00:00 0 7ff5b68b4000-7ff5b68b5000 r--p 00000000 fc:03 1086585 /home/far/worker/linker/chapter05/a2.so 7ff5b68b5000-7ff5b68b6000 r-xp 00001000 fc:03 1086585 /home/far/worker/linker/chapter05/a2.so 7ff5b68b6000-7ff5b68b7000 r--p 00002000 fc:03 1086585 /home/far/worker/linker/chapter05/a2.so 7ff5b68b7000-7ff5b68b8000 r--p 00002000 fc:03 1086585 /home/far/worker/linker/chapter05/a2.so 7ff5b68b8000-7ff5b68b9000 rw-p 00003000 fc:03 1086585 /home/far/worker/linker/chapter05/a2.so 7ff5b68b9000-7ff5b68ba000 r--p 00000000 fc:03 1086583 /home/far/worker/linker/chapter05/a1.so 7ff5b68ba000-7ff5b68bb000 r-xp 00001000 fc:03 1086583 /home/far/worker/linker/chapter05/a1.so 7ff5b68bb000-7ff5b68bc000 r--p 00002000 fc:03 1086583 /home/far/worker/linker/chapter05/a1.so 7ff5b68bc000-7ff5b68bd000 r--p 00002000 fc:03 1086583 /home/far/worker/linker/chapter05/a1.so 7ff5b68bd000-7ff5b68be000 rw-p 00003000 fc:03 1086583 /home/far/worker/linker/chapter05/a1.so 7ff5b68be000-7ff5b68e6000 r--p 00000000 fc:03 2774 /usr/lib/x86_64-linux-gnu/libc.so.6 7ff5b68e6000-7ff5b6a7b000 r-xp 00028000 fc:03 2774 /usr/lib/x86_64-linux-gnu/libc.so.6 7ff5b6a7b000-7ff5b6ad3000 r--p 001bd000 fc:03 2774 /usr/lib/x86_64-linux-gnu/libc.so.6 7ff5b6ad3000-7ff5b6ad4000 ---p 00215000 fc:03 2774 /usr/lib/x86_64-linux-gnu/libc.so.6 7ff5b6ad4000-7ff5b6ad8000 r--p 00215000 fc:03 2774 /usr/lib/x86_64-linux-gnu/libc.so.6 7ff5b6ad8000-7ff5b6ada000 rw-p 00219000 fc:03 2774 /usr/lib/x86_64-linux-gnu/libc.so.6 7ff5b6ada000-7ff5b6ae7000 rw-p 00000000 00:00 0 7ff5b6af0000-7ff5b6af1000 r--p 00000000 fc:03 1085852 /home/far/worker/linker/chapter05/b2.so 7ff5b6af1000-7ff5b6af2000 r-xp 00001000 fc:03 1085852 /home/far/worker/linker/chapter05/b2.so 7ff5b6af2000-7ff5b6af3000 r--p 00002000 fc:03 1085852 /home/far/worker/linker/chapter05/b2.so 7ff5b6af3000-7ff5b6af4000 r--p 00002000 fc:03 1085852 /home/far/worker/linker/chapter05/b2.so 7ff5b6af4000-7ff5b6af5000 rw-p 00003000 fc:03 1085852 /home/far/worker/linker/chapter05/b2.so 7ff5b6af5000-7ff5b6af6000 r--p 00000000 fc:03 1086586 /home/far/worker/linker/chapter05/b1.so 7ff5b6af6000-7ff5b6af7000 r-xp 00001000 fc:03 1086586 /home/far/worker/linker/chapter05/b1.so 7ff5b6af7000-7ff5b6af8000 r--p 00002000 fc:03 1086586 /home/far/worker/linker/chapter05/b1.so 7ff5b6af8000-7ff5b6af9000 r--p 00002000 fc:03 1086586 /home/far/worker/linker/chapter05/b1.so 7ff5b6af9000-7ff5b6afa000 rw-p 00003000 fc:03 1086586 /home/far/worker/linker/chapter05/b1.so 7ff5b6afa000-7ff5b6afc000 rw-p 00000000 00:00 0 7ff5b6afc000-7ff5b6afe000 r--p 00000000 fc:03 1173 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7ff5b6afe000-7ff5b6b28000 r-xp 00002000 fc:03 1173 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7ff5b6b28000-7ff5b6b33000 r--p 0002c000 fc:03 1173 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7ff5b6b34000-7ff5b6b36000 r--p 00037000 fc:03 1173 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7ff5b6b36000-7ff5b6b38000 rw-p 00039000 fc:03 1173 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7ffc40a9c000-7ffc40abd000 rw-p 00000000 00:00 0 [stack] 7ffc40b0f000-7ffc40b13000 r--p 00000000 00:00 0 [vvar] 7ffc40b13000-7ffc40b15000 r-xp 00000000 00:00 0 [vdso] ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0 [vsyscall]\",\"观察到4个共享对象a1.so、a2.so、b1.so以及b2.so都被装载进来了，那a1.so的函数a和a2.so的函数a是不是冲突了？为什么main的输出结果是两个a1.c呢？也就是说a2.so中的函数a似乎被忽略了。这种一个共享对象里面的全局符号被另一个共享对象的同名全局符号覆盖的现象又被称为共享对象全局符号介入（Global Symbol Interpose）。\",\"注\",\"Linux下的动态链接器时这样处理全局符号介入的：当一个符号需要被加入全局符号表时，如果相同的符号名已经存在，则后加入的符号忽略。 这一点已经说明了为什么 会打印出两个a1.c的原因装载的顺序应该是(对于广度优先b1.so、b2.so、a1.so和a2.so，对于深度优先：b1.so、a1.so、b2.so和a2.so)因此a2.so的同名符号一定会被忽略。\",\"重要\",\"同样因为全局符号介入的问题，导致为什么模块内部调用非\\\"static\\\"函数时为什么也要使用地址无关代码，而不是使用相对地址调用的原因。因为一旦出现全局符号介入就需要修改其调用地址。\"]},\"90\":{\"h\":\"6.3 重定位和初始化\",\"t\":[\"当上面的步骤完成后，链接器开始重新遍历可执行文件和每个共享对象的重定位表，将它们的GOT/PLT中的每个需要重定位的位置进行修正。\",\"重定位完成后，如果某个共享对象有\\\".init\\\"段，那么动态链接器会执行\\\".init\\\"段中的代码，用以实现共享对象特有的初始化过程，比如共享对象中的c++的全局/静态对象的构造就需要通过\\\".init\\\"来初始化。相应的，共享库中还可能有\\\".finit\\\"段，当进程退出时会执行\\\".finit\\\"段中的代码，比如用来实现c++全局对象析构之类的操作。\",\"对于可执行文件而言\\\".init\\\"段和\\\".finit\\\"段是由程序初始化部分代码负责执行的。\",\"当完成了重定位和初始化后，所有的准备工作就宣告完成了，所需要的共享对象也都已经装载并且链接完成，这时动态链接器将进程的控制权交给程序的入口并且开始执行。\"]},\"91\":{\"h\":\"7. 库打桩机制(HOOK)\",\"t\":[\"Linux链接器支持一种强大的技术，它允许你劫持对共享库函数的调用，取而代之执行自己的代码。\",\"以对libc库的malloc和free为例:\",\"// mymalloc.c #ifdef COMPILETIME #include <malloc.h> #include <stdio.h> void *mymalloc(size_t size) { void *ptr = malloc(size); printf(\\\"malloc(%d)=%p\\\\n\\\", (int)size, ptr); return ptr; } void myfree(void *ptr) { free(ptr); printf(\\\"free(%p)\\\\n\\\", ptr); } #endif // malloc.h #ifndef __MALLOC_H__ #define __MALLOC_H__ #include <stdlib.h> #define malloc(size) mymalloc(size) #define free(ptr) myfree(ptr) void *mymalloc(size_t size); void free(void *ptr); #endif //int.c #include <malloc.h> #include <stdio.h> int main() { int *p = malloc(32); free(p); return 0; }\"]},\"92\":{\"h\":\"7.1 编译时打桩\",\"t\":[\"$> gcc -DCOMPILETIME -c mymalloc.c $> gcc -I. -o intc int.c mymalloc.o $> ./intc malloc(32)=0x560a72b382a0 free(0x560a72b382a0)\",\"从结果上看，使用了我们自定义的malloc和free函数。其主要原因是因为我们在编译可执行程序时使用了-I .，这个选项会告诉c的预处理器在搜索系统目录前，先在当前目录中查找malloc.h。需要注意的是mymalloc.h中的包装函数使用的标志malloc.h头文件编译的。\"]},\"93\":{\"h\":\"7.2 链接时打桩\",\"t\":[\"对mymalloc.c文件进行修改得到如下源码：\",\"// link_malloc.c #ifdef LINKTIME #include <stdio.h> void *__real_malloc(size_t size); void __real_free(void *ptr); void *__wrap_malloc(size_t size) { void *ptr = __real_malloc(size); printf(\\\"malloc(%d) = %p\\\\n\\\", (int)size, ptr); return ptr; } void __wrap_free(void *ptr) { __real_free(ptr); printf(\\\"free(%p)\\\\n\\\", ptr); } #endif\",\"$> gcc -DLINKTIME -c link_malloc.c $> gcc -c int.c $> gcc -Wl,--wrap,malloc -Wl,--wrap,free -o intl int.o link_malloc.o $> ./intl malloc(32) = 0x5590c014a2a0 free(0x5590c014a2a0)\",\"重要\",\"Linux静态链接器支持用--wrap f标志进行链时打桩。这个标志告诉链接器，把对符号f的引用解析成__wrap_f，还要对符号__real_f的引用解析位f。 -Wl, option选项表示把option传递给链接器。option中的每个逗号都要替换为一个空格。所以-Wl,--wrap,malloc就把--wrap malloc传递给链接器，-Wl,--wrap,free也类似。\"]},\"94\":{\"h\":\"7.3 运行时打桩\",\"t\":[\"// run_malloc.c #ifdef RUNTIME #define _GNU_SOURCE #include <dlfcn.h> #include <unistd.h> #include <stdio.h> #include <stdlib.h> void *malloc(size_t size) { void *(*mallocp)(size_t); char *error; mallocp = dlsym(RTLD_NEXT, \\\"malloc\\\"); if ((error = dlerror()) != NULL) { fputs(error, stderr); exit(1); } void *ptr = mallocp(size); char buffer[256] = {0}; snprintf(buffer, sizeof(buffer), \\\"malloc(%d) = %p\\\\n\\\", (int)size, ptr); write(STDERR_FILENO, buffer, sizeof(buffer)); return ptr; } void free(void *ptr) { void (*freep)(void *); char *error; freep = dlsym(RTLD_NEXT, \\\"free\\\"); if ((error = dlerror()) != NULL) { fputs(error, stderr); exit(1); } freep(ptr); char buffer[256] = {0}; snprintf(buffer, sizeof(buffer), \\\"free(%p)\\\\n\\\", ptr); write(STDERR_FILENO, buffer, sizeof(buffer)); } #endif\",\"$> gcc -shared -fPIC -DRUNTIME run_malloc.c -o run_malloc.so -ldl $> gcc -o intr int.c ./run_malloc.so $> ./intr malloc(32) = 0x563142b312a0 free(0x563142b312a0\"]},\"95\":{\"h\":\"mysql\"},\"96\":{\"h\":\"第一章 使用mysql\"},\"97\":{\"h\":\"1.1 连接\"},\"98\":{\"h\":\"mysql的选项和参数\",\"t\":[\"~ > mysql -hlocalhost -P3306 -uroot -p'12345678' # mysql指令 mysql: [Warning] Using a password on the command line interface can be insecure. Welcome to the MySQL monitor. Commands end with ; or \\\\g. Your MySQL connection id is 9 Server version: 8.0.43-0ubuntu0.24.04.1 (Ubuntu) Copyright (c) 2000, 2025, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\\\h' for help. Type '\\\\c' to clear the current input statement. mysql>\",\"-h: 主机名 -P: 端口(一般为3306) -u: 用户名 -p: 用户密码\"]},\"99\":{\"h\":\"1.2 选择数据库\",\"t\":[\"USE crashcourse; Database changed\"]},\"100\":{\"h\":\"1.3 了解数据库和表\",\"t\":[\"SHOW DATABASES; -- 查看数据库 +--------------------+ | Database | +--------------------+ | crashcourse | | information_schema | | mysql | | performance_schema | | sys | +--------------------+ 5 rows in set (0.00 sec) SHOW TABLES; -- 查看表 +-----------------------+ | Tables_in_crashcourse | +-----------------------+ | customers | | orderitems | | orders | | productnotes | | products | | vendors | +-----------------------+ 6 rows in set (0.00 sec) show columns from customers; -- 查看表结构 +--------------+-----------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +--------------+-----------+------+-----+---------+----------------+ | cust_id | int | NO | PRI | NULL | auto_increment | | cust_name | char(50) | NO | | NULL | | | cust_address | char(50) | YES | | NULL | | | cust_city | char(50) | YES | | NULL | | | cust_state | char(5) | YES | | NULL | | | cust_zip | char(10) | YES | | NULL | | | cust_country | char(50) | YES | | NULL | | | cust_contact | char(50) | YES | | NULL | | | cust_email | char(255) | YES | | NULL | | +--------------+-----------+------+-----+---------+----------------+ 9 rows in set (0.10 sec) DESCRIBE customers; -- 和使用 show columns form <表名>一个效果 +--------------+-----------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +--------------+-----------+------+-----+---------+----------------+ | cust_id | int | NO | PRI | NULL | auto_increment | | cust_name | char(50) | NO | | NULL | | | cust_address | char(50) | YES | | NULL | | | cust_city | char(50) | YES | | NULL | | | cust_state | char(5) | YES | | NULL | | | cust_zip | char(10) | YES | | NULL | | | cust_country | char(50) | YES | | NULL | | | cust_contact | char(50) | YES | | NULL | | | cust_email | char(255) | YES | | NULL | | +--------------+-----------+------+-----+---------+----------------+ 9 rows in set (0.00 sec)\",\"其它mysql的SHOW语句 SHOW STATUS: 查看服务器状态信息 SHOW CREATE DATABASES和SHOW CREATE TABLE: 分别用来显示创建特定数据库或表的Mysql语句 SHOW GRANTS: 用来显示授予用户的安全权限 SHOW ERRORS和SHOW WARNINGS: 用来显示服务器错误或警告消息 使用HELP SHOW: 显示SHOW语句\"]},\"101\":{\"h\":\"第二章 查询数据\"},\"102\":{\"h\":\"2.1 查询单个列\",\"t\":[\"select prod_name from products; -- select 语句 +----------------+ | prod_name | +----------------+ | .5 ton anvil | | 1 ton anvil | | 2 ton anvil | | Detonator | | Bird seed | | Carrots | | Fuses | | JetPack 1000 | | JetPack 2000 | | Oil can | | Safe | | Sling | | TNT (1 stick) | | TNT (5 sticks) | +----------------+ 14 rows in set (0.01 sec)\"]},\"103\":{\"h\":\"2.2 查询多个列\",\"t\":[\"select prod_id, prod_name, prod_price from products; +---------+----------------+------------+ | prod_id | prod_name | prod_price | +---------+----------------+------------+ | ANV01 | .5 ton anvil | 5.99 | | ANV02 | 1 ton anvil | 9.99 | | ANV03 | 2 ton anvil | 14.99 | | DTNTR | Detonator | 13.00 | | FB | Bird seed | 10.00 | | FC | Carrots | 2.50 | | FU1 | Fuses | 3.42 | | JP1000 | JetPack 1000 | 35.00 | | JP2000 | JetPack 2000 | 55.00 | | OL1 | Oil can | 8.99 | | SAFE | Safe | 50.00 | | SLING | Sling | 4.49 | | TNT1 | TNT (1 stick) | 2.50 | | TNT2 | TNT (5 sticks) | 10.00 | +---------+----------------+------------+ 14 rows in set (0.07 sec)\"]},\"104\":{\"h\":\"2.3 查询所有列\",\"t\":[\"select * from products; -- 使用通配符 * +---------+---------+----------------+------------+----------------------------------------------------------------+ | prod_id | vend_id | prod_name | prod_price | prod_desc | +---------+---------+----------------+------------+----------------------------------------------------------------+ | ANV01 | 1001 | .5 ton anvil | 5.99 | .5 ton anvil, black, complete with handy hook | | ANV02 | 1001 | 1 ton anvil | 9.99 | 1 ton anvil, black, complete with handy hook and carrying case | | ANV03 | 1001 | 2 ton anvil | 14.99 | 2 ton anvil, black, complete with handy hook and carrying case | | DTNTR | 1003 | Detonator | 13.00 | Detonator (plunger powered), fuses not included | | FB | 1003 | Bird seed | 10.00 | Large bag (suitable for road runners) | | FC | 1003 | Carrots | 2.50 | Carrots (rabbit hunting season only) | | FU1 | 1002 | Fuses | 3.42 | 1 dozen, extra long | | JP1000 | 1005 | JetPack 1000 | 35.00 | JetPack 1000, intended for single use | | JP2000 | 1005 | JetPack 2000 | 55.00 | JetPack 2000, multi-use | | OL1 | 1002 | Oil can | 8.99 | Oil can, red | | SAFE | 1003 | Safe | 50.00 | Safe with combination lock | | SLING | 1003 | Sling | 4.49 | Sling, one size fits all | | TNT1 | 1003 | TNT (1 stick) | 2.50 | TNT, red, single stick | | TNT2 | 1003 | TNT (5 sticks) | 10.00 | TNT, red, pack of 10 sticks | +---------+---------+----------------+------------+----------------------------------------------------------------+ 14 rows in set (0.00 sec)\"]},\"105\":{\"h\":\"2.4 查询不同的行\",\"t\":[\"select vend_id from products; -- 不使用distinct +---------+ | vend_id | +---------+ | 1001 | | 1001 | | 1001 | | 1002 | | 1002 | | 1003 | | 1003 | | 1003 | | 1003 | | 1003 | | 1003 | | 1003 | | 1005 | | 1005 | +---------+ 14 rows in set (0.06 sec) select distinct vend_id from products; -- 使用distinct +---------+ | vend_id | +---------+ | 1001 | | 1002 | | 1003 | | 1005 | +---------+ 4 rows in set (0.01 sec)\",\"重要\",\"关键字 distinct\"]},\"106\":{\"h\":\"2.5 分页\",\"t\":[\"select prod_name from products limit 5; -- limit 5指示mysql返回不多于5行 +--------------+ | prod_name | +--------------+ | .5 ton anvil | | 1 ton anvil | | 2 ton anvil | | Detonator | | Bird seed | +--------------+ 5 rows in set (0.00 sec) select prod_name from products limit 5, 5; -- limit 5, 5指示mysql返回从第5行开始返回5行数据 +--------------+ | prod_name | +--------------+ | Carrots | | Fuses | | JetPack 1000 | | JetPack 2000 | | Oil can | +--------------+ 5 rows in set (0.00 sec)\",\"重要\",\"关键字 limit 需要注意的是:\",\"和大多数编程语言的数组索引一样，mysql的行也是从0开始的所以limit 5, 5，实际是从第6行开始返回5行数据\",\"当行数不够时，mysql将只返回它能够返回的那多行\",\"mysql 5之后的另一种写法是 limit 4 offset 3意为从行3开始取4行，和limit 3, 4一样\",\"select prod_name from products limit 4 offset 3; +-----------+ | prod_name | +-----------+ | Detonator | | Bird seed | | Carrots | | Fuses | +-----------+ 4 rows in set (0.06 sec) select prod_name from products limit 3, 4; +-----------+ | prod_name | +-----------+ | Detonator | | Bird seed | | Carrots | | Fuses | +-----------+ 4 rows in set (0.00 sec)\"]},\"107\":{\"h\":\"2.6 使用完全限定的表名\",\"t\":[\"select products.prod_name from products; -- 对prod_name限定为表products +----------------+ | prod_name | +----------------+ | .5 ton anvil | | 1 ton anvil | | 2 ton anvil | | Detonator | | Bird seed | | Carrots | | Fuses | | JetPack 1000 | | JetPack 2000 | | Oil can | | Safe | | Sling | | TNT (1 stick) | | TNT (5 sticks) | +----------------+ 14 rows in set (0.00 sec) select products.prod_name from crashcourse.products; -- 对表名也是可以进行限定的 +----------------+ | prod_name | +----------------+ | .5 ton anvil | | 1 ton anvil | | 2 ton anvil | | Detonator | | Bird seed | | Carrots | | Fuses | | JetPack 1000 | | JetPack 2000 | | Oil can | | Safe | | Sling | | TNT (1 stick) | | TNT (5 sticks) | +----------------+ 14 rows in set (0.00 sec)\"]},\"108\":{\"h\":\"2.7 总结\",\"t\":[\"select语句的基本格式\",\"重要\",\"select [column_name, ...]|[*] from [table_name]\"]},\"109\":{\"h\":\"第三章 排序查询数据\"},\"110\":{\"h\":\"3.1 排序数据\",\"t\":[\"select prod_name from products order by prod_name; +----------------+ | prod_name | +----------------+ | .5 ton anvil | | 1 ton anvil | | 2 ton anvil | | Bird seed | | Carrots | | Detonator | | Fuses | | JetPack 1000 | | JetPack 2000 | | Oil can | | Safe | | Sling | | TNT (1 stick) | | TNT (5 sticks) | +----------------+ 14 rows in set (0.00 sec)\",\"重要\",\"order by语句的默认是升序排列的\"]},\"111\":{\"h\":\"3.2 按多个列排序\",\"t\":[\"-- 在多个行具有相同的prod_price值时，对产品按prod_name进行排序 select prod_id, prod_price, prod_name from products order by prod_price, prod_name; +---------+------------+----------------+ | prod_id | prod_price | prod_name | +---------+------------+----------------+ | FC | 2.50 | Carrots | | TNT1 | 2.50 | TNT (1 stick) | | FU1 | 3.42 | Fuses | | SLING | 4.49 | Sling | | ANV01 | 5.99 | .5 ton anvil | | OL1 | 8.99 | Oil can | | ANV02 | 9.99 | 1 ton anvil | | FB | 10.00 | Bird seed | | TNT2 | 10.00 | TNT (5 sticks) | | DTNTR | 13.00 | Detonator | | ANV03 | 14.99 | 2 ton anvil | | JP1000 | 35.00 | JetPack 1000 | | SAFE | 50.00 | Safe | | JP2000 | 55.00 | JetPack 2000 | +---------+------------+----------------+ 14 rows in set (0.01 sec)\"]},\"112\":{\"h\":\"3.3 指定排序方向\",\"t\":[\"-- 对prod_price进行降序排序 select prod_id, prod_price, prod_name from products order by prod_price desc; +---------+------------+----------------+ | prod_id | prod_price | prod_name | +---------+------------+----------------+ | JP2000 | 55.00 | JetPack 2000 | | SAFE | 50.00 | Safe | | JP1000 | 35.00 | JetPack 1000 | | ANV03 | 14.99 | 2 ton anvil | | DTNTR | 13.00 | Detonator | | FB | 10.00 | Bird seed | | TNT2 | 10.00 | TNT (5 sticks) | | ANV02 | 9.99 | 1 ton anvil | | OL1 | 8.99 | Oil can | | ANV01 | 5.99 | .5 ton anvil | | SLING | 4.49 | Sling | | FU1 | 3.42 | Fuses | | FC | 2.50 | Carrots | | TNT1 | 2.50 | TNT (1 stick) | +---------+------------+----------------+ 14 rows in set (0.08 sec) -- 对prod_price进行降序排序，再对prod_name进行升序排序 select prod_id, prod_price, prod_name from products order by prod_price desc, prod_name; +---------+------------+----------------+ | prod_id | prod_price | prod_name | +---------+------------+----------------+ | JP2000 | 55.00 | JetPack 2000 | | SAFE | 50.00 | Safe | | JP1000 | 35.00 | JetPack 1000 | | ANV03 | 14.99 | 2 ton anvil | | DTNTR | 13.00 | Detonator | | FB | 10.00 | Bird seed | | TNT2 | 10.00 | TNT (5 sticks) | | ANV02 | 9.99 | 1 ton anvil | | OL1 | 8.99 | Oil can | | ANV01 | 5.99 | .5 ton anvil | | SLING | 4.49 | Sling | | FU1 | 3.42 | Fuses | | FC | 2.50 | Carrots | | TNT1 | 2.50 | TNT (1 stick) | +---------+------------+----------------+ 14 rows in set (0.04 sec)\",\"重要\",\"desc: 降序 asc: 升序(默认排序)\"]},\"113\":{\"h\":\"3.3.1 使用limit和desc获取最贵的物品的价格\",\"t\":[\"select prod_id, prod_price, prod_name from products order by prod_price desc limit 1 offset 0; +---------+------------+--------------+ | prod_id | prod_price | prod_name | +---------+------------+--------------+ | JP2000 | 55.00 | JetPack 2000 | +---------+------------+--------------+ 1 row in set (0.00 sec) -- 或者 select prod_id, prod_price, prod_name from products order by prod_price desc limit 1; +---------+------------+--------------+ | prod_id | prod_price | prod_name | +---------+------------+--------------+ | JP2000 | 55.00 | JetPack 2000 | +---------+------------+--------------+ 1 row in set (0.00 sec)\",\"提示\",\"在给出order by子句时，应该保证它位于from子句之后。如果使用limit，它必须位于order by之后。\"]},\"114\":{\"h\":\"第四章 过滤数据\"},\"115\":{\"h\":\"4.1 使用where子句\",\"t\":[\"select prod_name, prod_price from products where prod_price = 2.50; +---------------+------------+ | prod_name | prod_price | +---------------+------------+ | Carrots | 2.50 | | TNT (1 stick) | 2.50 | +---------------+------------+ 2 rows in set (0.08 sec)\",\"提示\",\"在同时使用order by和where子句时，应该让order by位于where之后。 关于order by的使用请查看这里\"]},\"116\":{\"h\":\"4.2 where子句操作符\",\"t\":[\"操作符\",\"说明\",\"=\",\"等于\",\"<>\",\"不等于\",\"!=\",\"不等于\",\"<\",\"小于\",\"<=\",\"小于等于\",\">\",\"大于\",\">=\",\"大于等于\",\"between\",\"在指定的两个值之间\"]},\"117\":{\"h\":\"4.2.1 检查单个值\",\"t\":[\"-- 查找prod_name='fuses'的商品 select prod_name, prod_price from products where prod_name = 'fuses'; +-----------+------------+ | prod_name | prod_price | +-----------+------------+ | Fuses | 3.42 | +-----------+------------+ 1 row in set (0.08 sec)\",\"提示\",\"需要注意的是mysql在只想匹配时默认是不区分大小写的，所以fuses匹配了Fuses\",\"-- 列出所有小于10$的商品 select prod_name, prod_price from products where prod_price < 10; +---------------+------------+ | prod_name | prod_price | +---------------+------------+ | .5 ton anvil | 5.99 | | 1 ton anvil | 9.99 | | Carrots | 2.50 | | Fuses | 3.42 | | Oil can | 8.99 | | Sling | 4.49 | | TNT (1 stick) | 2.50 | +---------------+------------+ 7 rows in set (0.00 sec) -- 列出所有小于等于10$的商品，并对其进行排序 select prod_name, prod_price from products where prod_price <= 10 order by prod_price; +----------------+------------+ | prod_name | prod_price | +----------------+------------+ | Carrots | 2.50 | | TNT (1 stick) | 2.50 | | Fuses | 3.42 | | Sling | 4.49 | | .5 ton anvil | 5.99 | | Oil can | 8.99 | | 1 ton anvil | 9.99 | | Bird seed | 10.00 | | TNT (5 sticks) | 10.00 | +----------------+------------+ 9 rows in set (0.00 sec)\"]},\"118\":{\"h\":\"4.2.2 不匹配检查\",\"t\":[\"-- 查找所有vend_id不等于1003的商品，<>和!=效果一样 select vend_id, prod_name from products where vend_id <> 1003; +---------+--------------+ | vend_id | prod_name | +---------+--------------+ | 1001 | .5 ton anvil | | 1001 | 1 ton anvil | | 1001 | 2 ton anvil | | 1002 | Fuses | | 1002 | Oil can | | 1005 | JetPack 1000 | | 1005 | JetPack 2000 | +---------+--------------+ 7 rows in set (0.03 sec)\",\"提示\",\"单引号和双引号都是用于限定字符串的，与数值列进行比较的值不用引号。\"]},\"119\":{\"h\":\"4.2.3 范围检查\",\"t\":[\"-- 查找所有价格在5$到10$之间的所有产品 select prod_name, prod_price from products where prod_price between 5 and 10; +----------------+------------+ | prod_name | prod_price | +----------------+------------+ | .5 ton anvil | 5.99 | | 1 ton anvil | 9.99 | | Bird seed | 10.00 | | Oil can | 8.99 | | TNT (5 sticks) | 10.00 | +----------------+------------+ 5 rows in set (0.01 sec) -- 效果一样 select prod_name, prod_price from products where prod_price >= 5 and prod_price <= 10; +----------------+------------+ | prod_name | prod_price | +----------------+------------+ | .5 ton anvil | 5.99 | | 1 ton anvil | 9.99 | | Bird seed | 10.00 | | Oil can | 8.99 | | TNT (5 sticks) | 10.00 | +----------------+------------+ 5 rows in set (0.00 sec)\"]},\"120\":{\"h\":\"4.2.4 空值检查\",\"t\":[\"提示\",\"什么是空值: 在创建表时，表设计人员可以指定其中的列是否可以不包含值。在一个列不包含值时，称其为包含空值NULL。\",\"select prod_name from products where prod_price is null; Empty set (0.00 sec) -- 只能使用is null语句，不能使用= null这种语句 select cust_id from customers where cust_email is null; +---------+ | cust_id | +---------+ | 10002 | | 10005 | +---------+ 2 rows in set (0.04 sec)\",\"重要\",\"NULL与不匹配: 在通过过滤选择出不具有特定值的行时，你可能希望返回具有NULL值的行。但是，不行。因为未知具有特殊的含义，数据库不知道它们是否匹配，所以在匹配过滤或不匹配过滤时不返回它们。因此，在过滤数据时，一定要验证返回数据中确实给出了被过滤列具有NULL的行。\"]},\"121\":{\"h\":\"第五章 数据过滤\"},\"122\":{\"h\":\"5.1 组合where语句\"},\"123\":{\"h\":\"5.1.1 and操作符\",\"t\":[\"-- 查找由供应商1003制造并且价格小于10$的所有产品的价格和名称。 select prod_id, prod_price, prod_name from products where vend_id = 1003 and prod_price <= 10; +---------+------------+----------------+ | prod_id | prod_price | prod_name | +---------+------------+----------------+ | FB | 10.00 | Bird seed | | FC | 2.50 | Carrots | | SLING | 4.49 | Sling | | TNT1 | 2.50 | TNT (1 stick) | | TNT2 | 10.00 | TNT (5 sticks) | +---------+------------+----------------+ 5 rows in set (0.09 sec)\"]},\"124\":{\"h\":\"5.1.2 or操作符\",\"t\":[\"-- 查找由供应商1003或者1002制造的所有产品的价格和名称。 select vend_id, prod_id, prod_price, prod_name from products where vend_id = 1003 or vend_id = 1002; +---------+---------+------------+----------------+ | vend_id | prod_id | prod_price | prod_name | +---------+---------+------------+----------------+ | 1002 | FU1 | 3.42 | Fuses | | 1002 | OL1 | 8.99 | Oil can | | 1003 | DTNTR | 13.00 | Detonator | | 1003 | FB | 10.00 | Bird seed | | 1003 | FC | 2.50 | Carrots | | 1003 | SAFE | 50.00 | Safe | | 1003 | SLING | 4.49 | Sling | | 1003 | TNT1 | 2.50 | TNT (1 stick) | | 1003 | TNT2 | 10.00 | TNT (5 sticks) | +---------+---------+------------+----------------+ 9 rows in set (0.05 sec)\"]},\"125\":{\"h\":\"5.1.3 计算次序\",\"t\":[\"-- 要列出价格为10美元（含）以上且由1002或1003制造的所有产品。 select vend_id, prod_id, prod_price, prod_name from products where vend_id = 1003 or vend_id = 1002 and prod_price >= 10; +---------+---------+------------+----------------+ | vend_id | prod_id | prod_price | prod_name | +---------+---------+------------+----------------+ | 1003 | DTNTR | 13.00 | Detonator | | 1003 | FB | 10.00 | Bird seed | | 1003 | FC | 2.50 | Carrots | | 1003 | SAFE | 50.00 | Safe | | 1003 | SLING | 4.49 | Sling | | 1003 | TNT1 | 2.50 | TNT (1 stick) | | 1003 | TNT2 | 10.00 | TNT (5 sticks) | +---------+---------+------------+----------------+ 7 rows in set (0.00 sec) -- 这里已经出问题了因为只限制了1002商家的产品要大于等于10$，和大多数编程语言一样sql也有计算次序问题，所以解决办法如下 select vend_id, prod_id, prod_price, prod_name from products where (vend_id = 1003 or vend_id = 1002) and prod_price >= 10; +---------+---------+------------+----------------+ | vend_id | prod_id | prod_price | prod_name | +---------+---------+------------+----------------+ | 1003 | DTNTR | 13.00 | Detonator | | 1003 | FB | 10.00 | Bird seed | | 1003 | SAFE | 50.00 | Safe | | 1003 | TNT2 | 10.00 | TNT (5 sticks) | +---------+---------+------------+----------------+ 4 rows in set (0.00 sec)\"]},\"126\":{\"h\":\"5.2 in操作符\",\"t\":[\"重要\",\"IN操作符用来指定条件范围，范围中的每个条件都可以进行匹配。IN取合法值的由逗号分隔的清单，全都括在圆括号中。\",\"-- 列出由厂商1002，1003生产的所有商品并对商品名称进行升序排序。 select prod_name, prod_price from products where vend_id in(1002, 1003) order by prod_name; +----------------+------------+ | prod_name | prod_price | +----------------+------------+ | Bird seed | 10.00 | | Carrots | 2.50 | | Detonator | 13.00 | | Fuses | 3.42 | | Oil can | 8.99 | | Safe | 50.00 | | Sling | 4.49 | | TNT (1 stick) | 2.50 | | TNT (5 sticks) | 10.00 | +----------------+------------+ 9 rows in set (0.00 sec)\",\"提示\",\"IN WHERE子句中用来指定要匹配值的清单的关键字，功能与OR相当。\"]},\"127\":{\"h\":\"5.3 not操作符\",\"t\":[\"-- 列出除1002和1003之外的所有供应商制造的产品 select vend_id, prod_name, prod_price from products where vend_id not in(1002, 1003) order by prod_name; +---------+--------------+------------+ | vend_id | prod_name | prod_price | +---------+--------------+------------+ | 1001 | .5 ton anvil | 5.99 | | 1001 | 1 ton anvil | 9.99 | | 1001 | 2 ton anvil | 14.99 | | 1005 | JetPack 1000 | 35.00 | | 1005 | JetPack 2000 | 55.00 | +---------+--------------+------------+ 5 rows in set (0.01 sec) -- 另一种写法 select vend_id, prod_name, prod_price from products where not vend_id = 1002 and not vend_id = 1003 order by pr od_name; +---------+--------------+------------+ | vend_id | prod_name | prod_price | +---------+--------------+------------+ | 1001 | .5 ton anvil | 5.99 | | 1001 | 1 ton anvil | 9.99 | | 1001 | 2 ton anvil | 14.99 | | 1005 | JetPack 1000 | 35.00 | | 1005 | JetPack 2000 | 55.00 | +---------+--------------+------------+ 5 rows in set (0.01 sec)\"]},\"128\":{\"h\":\"第六章 用通配符进行过滤\"},\"129\":{\"h\":\"6.1 like操作符\",\"t\":[\"提示\",\"通配符: 用来匹配值的一部分的特殊字符。 搜索模式: 由字面值、通配符或两者组合构成的搜索条件。\",\"为在搜索子句中使用通配符，必须使用LIKE操作符。LIKE指示MySQL，后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较。\"]},\"130\":{\"h\":\"6.1.1 百分号(%)通配符\",\"t\":[\"-- 找出所有以词jet起头的产品 select prod_id, prod_name from products where prod_name like 'jet%'; +---------+--------------+ | prod_id | prod_name | +---------+--------------+ | JP1000 | JetPack 1000 | | JP2000 | JetPack 2000 | +---------+--------------+ 2 rows in set (0.08 sec) -- 匹配任何位置包含文本anvil的值 select prod_id, prod_name from products where prod_name like '%anvil%'; +---------+--------------+ | prod_id | prod_name | +---------+--------------+ | ANV01 | .5 ton anvil | | ANV02 | 1 ton anvil | | ANV03 | 2 ton anvil | +---------+--------------+ 3 rows in set (0.00 sec)\",\"重要\",\"在搜索串中，%表示任何字符出现任意次数。\",\"注意事项:\",\"注\",\"区分大小写 根据MySQL的配置方式，搜索可以是区分大小写的。如果区分大小写，'jet%'与JetPack 1000将不匹配。\",\"注\",\"注意尾空格 尾空格可能会干扰通配符匹配。例如，在保存词anvil 时，如果它后面有一个或多个空格，则子句WHERE prod_name LIKE '%anvil'将不会匹配它们，因为在最后的l后有多余的字符。解决这个问题的一个简单的办法是在搜索模式最后附加一个%。一个更好的办法是使用函数去掉首尾空格。\",\"注\",\"注意NULL 虽然似乎%通配符可以匹配任何东西，但有一个例外，即NULL。即使是WHERE prod_name LIKE '%'也不能匹配用值NULL作为产品名的行。\"]},\"131\":{\"h\":\"6.1.2 下划线(_)通配符\",\"t\":[\"重要\",\"下划线的用途与%一样，但下划线只匹配单个字符而不是多个字符。\",\"-- 使用%匹配 select prod_id, prod_name from products where prod_name like '_ ton anvil'; +---------+-------------+ | prod_id | prod_name | +---------+-------------+ | ANV02 | 1 ton anvil | | ANV03 | 2 ton anvil | +---------+-------------+ 2 rows in set (0.01 sec) -- 使用_匹配 select prod_id, prod_name from products where prod_name like '% ton anvil'; +---------+--------------+ | prod_id | prod_name | +---------+--------------+ | ANV01 | .5 ton anvil | | ANV02 | 1 ton anvil | | ANV03 | 2 ton anvil | +---------+--------------+ 3 rows in set (0.00 sec)\"]},\"132\":{\"h\":\"6.2 使用通配符的技巧\",\"t\":[\"提示\",\"不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。\",\"在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。\",\"仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。\"]},\"133\":{\"h\":\"第七章 用正则表达式进行搜索\"},\"134\":{\"h\":\"7.1 使用mysql正则表达式\"},\"135\":{\"h\":\"7.1.1 基本字符匹配\",\"t\":[\"-- 检索列prod_name包含文本1000的所有行 select prod_name from products where prod_name regexp '1000' order by prod_name; +--------------+ | prod_name | +--------------+ | JetPack 1000 | +--------------+ 1 row in set (0.10 sec)\",\"提示\",\"'.'是正则表达式语言中一个特殊的字符。它表示匹配任意字符。\",\"select prod_name from products where prod_name regexp '.000' order by prod_name; +--------------+ | prod_name | +--------------+ | JetPack 1000 | | JetPack 2000 | +--------------+ 2 rows in set (0.00 sec)\",\"注\",\"匹配不区分大小写 MySQL中的正则表达式匹配（自版本3.23.4后）不区分大小写（即，大写和小写都匹配）。为区分大小写，可使用BINARY关键字，如WHERE prod_name REGEXP BINARY 'JetPack .000'。\"]},\"136\":{\"h\":\"7.1.2 进行or匹配\",\"t\":[\"提示\",\"为搜索两个串之一（或者为这个串，或者为另一个串），使用|。\",\"两个以上的OR条件 可以给出两个以上的OR条件。例如，'1000 | 2000 | 3000'将匹配1000或2000或3000。\",\"select prod_name from products where prod_name regexp '1000|2000' order by prod_name; +--------------+ | prod_name | +--------------+ | JetPack 1000 | | JetPack 2000 | +--------------+ 2 rows in set (0.00 sec)\"]},\"137\":{\"h\":\"7.1.3 匹配几个字符之一\",\"t\":[\"提示\",\"通过指定一组用[和]括起来的字符来完成\",\"select prod_name from products where prod_name regexp '[123] ton' order by prod_name; +-------------+ | prod_name | +-------------+ | 1 ton anvil | | 2 ton anvil | +-------------+ 2 rows in set (0.00 sec)\",\"注\",\"正则表达式[123]Ton为[1|2|3]Ton的缩写，也可以使用后者。 使用[^123]匹配除这些字符之外的所有字符\",\"select prod_name from products where prod_name regexp '[^123] ton' order by prod_name; +--------------+ | prod_name | +--------------+ | .5 ton anvil | +--------------+ 1 row in set (0.01 sec)\"]},\"138\":{\"h\":\"7.1.4 匹配范围\",\"t\":[\"注\",\"集合可用来定义要匹配的一个或多个字符。例如，下面的集合将匹配数字0到9：[0123456789] 为简化这种类型的集合，可使用-来定义一个范围。下面的式子功能上等同于上述数字列表：[0-9] 范围不限于完整的集合，[1-3]和[6-9]也是合法的范围。此外，范围不一定只是数值的，[a-z]匹配任意字母字符。\",\"-- 使用正则表达式[1-5] Ton select prod_name from products where prod_name regexp '[1-5] Ton' order by prod_name; +--------------+ | prod_name | +--------------+ | .5 ton anvil | | 1 ton anvil | | 2 ton anvil | +--------------+ 3 rows in set (0.08 sec)\"]},\"139\":{\"h\":\"7.1.5 匹配特殊字符\",\"t\":[\"提示\",\"为了匹配特殊字符，必须用\\\\为前导。\\\\-表示查找-，\\\\.表示查找.。\",\"select vend_name from vendors where vend_name regexp '.' order by vend_name; +----------------+ | vend_name | +----------------+ | ACME | | Anvils R Us | | Furball Inc. | | Jet Set | | Jouets Et Ours | | LT Supplies | +----------------+ 6 rows in set (0.01 sec) -- 使用\\\\\\\\进行转译 select vend_name from vendors where vend_name regexp '\\\\\\\\.' order by vend_name; +--------------+ | vend_name | +--------------+ | Furball Inc. | +--------------+ 1 row in set (0.00 sec)\"]},\"140\":{\"h\":\"7.1.6 匹配字符类\",\"t\":[\"类\",\"说明\",\"[:alnum:]\",\"任意字母和数字([a-zA-Z0-9])\",\"[:alpha:]\",\"任意符([a-zA-Z])\",\"[:blank:]\",\"空格和制表([\\\\t])\",\"[:cntrl:]\",\"ASCII控制字符(ASCII 0到31和127)\",\"[:digit:]\",\"任意数字([0-9])\",\"[:graph:]\",\"与[:print:]相同，但不包括空格\",\"[:lower:]\",\"任意小写字母([a-z])\",\"[:print:]\",\"任意可打印字符\",\"[:punct:]\",\"既不在[:alnum:]又不在[:cntrl:]中的任意字符\",\"[:space:]\",\"包括空格在内的任意空白字符([\\\\f\\\\n\\\\r\\\\t\\\\v])\",\"[:upper:]\",\"任意大写字母([A-Z])\",\"[:xdigit:]\",\"任意十六进制数字(同[a-fA-F0-9])\"]},\"141\":{\"h\":\"7.1.7 匹配多个实例\",\"t\":[\"元字符\",\"说明\",\"*\",\"0个或多个匹配\",\"+\",\"1个或多个匹配(等于{1,})\",\"?\",\"0个或1个匹配(等于{0,1})\",\"{n}\",\"指定数目的匹配\",\"{n,}\",\"不少于指定数目的匹配\",\"{n,m}\",\"匹配数目的范围(m不超过255)\",\"-- \\\\\\\\(匹配)，[0-9]匹配任意数字（这个例子中为1和5），sticks?匹配stick和sticks（s后的?使s可选，因为?匹配它前面的任何字符的0次或1次出现），\\\\\\\\)匹配)。没有?，匹配stick和sticks会非常困难。 select prod_name from products where prod_name regexp '\\\\\\\\([0-9] sticks?\\\\\\\\)' order by prod_name; +----------------+ | prod_name | +----------------+ | TNT (1 stick) | | TNT (5 sticks) | +----------------+ 2 rows in set (0.09 sec) -- [:digit:]匹配任意数字，因而它为数字的一个集合。{4}确切地要求它前面的字符（任意数字）出现4次，所以[[:digit:]]{4}匹配连在一起的任意4位数字。 select prod_name from products where prod_name regexp '[[:digit:]]{4}' order by prod_name; +--------------+ | prod_name | +--------------+ | JetPack 1000 | | JetPack 2000 | +--------------+ 2 rows in set (0.00 sec)\"]},\"142\":{\"h\":\"7.1.8 定位符\",\"t\":[\"元字符\",\"说明\",\"^\",\"文本的开始\",\"$\",\"文本的结尾\",\"[[:<:]]\",\"词的开始\",\"[[:>:]]\",\"词的结尾\",\"-- ^匹配串的开始。因此，^[0-9\\\\\\\\.]只在.或任意数字为串中第一个字符时才匹配它们。 select prod_name from products where prod_name regexp '^[0-9\\\\\\\\.]' order by prod_name; +--------------+ | prod_name | +--------------+ | .5 ton anvil | | 1 ton anvil | | 2 ton anvil | +--------------+ 3 rows in set (0.06 sec)\",\"注\",\"简单的正则表达式测试 可以在不使用数据库表的情况下用SELECT来测试正则表达式。REGEXP检查总是返回0（没有匹配）或1（匹配）。可以用带文字串的REGEXP来测试表达式，并试验它们。相应的语法如下：这个例子显然将返回0（因为文本hello中没有数字）。\"]},\"143\":{\"h\":\"第八章 创建计算字段\"},\"144\":{\"h\":\"8.1 拼接字段\",\"t\":[\"注\",\"拼接（concatenate） 将值联结到一起构成单个值。 在MySQL的SELECT语句中，可使用concat()函数来拼接两个列。\",\"-- 使用concat拼接 select concat(vend_name, '(', vend_country, ')') from vendors order by vend_name; +-------------------------------------------+ | concat(vend_name, '(', vend_country, ')') | +-------------------------------------------+ | ACME(USA) | | Anvils R Us(USA) | | Furball Inc.(USA) | | Jet Set(England) | | Jouets Et Ours(France) | | LT Supplies(USA) | +-------------------------------------------+ 6 rows in set (0.07 sec)\",\"提示\",\"使用rtrim移除右边的空格 ltrim移除左边的空格 trim移除左右两边的空格\",\"select concat(rtrim(vend_name), '(', rtrim(vend_country), ')') from vendors order by vend_name; +---------------------------------------------------------+ | concat(rtrim(vend_name), '(', rtrim(vend_country), ')') | +---------------------------------------------------------+ | ACME(USA) | | Anvils R Us(USA) | | Furball Inc.(USA) | | Jet Set(England) | | Jouets Et Ours(France) | | LT Supplies(USA) | +---------------------------------------------------------+ 6 rows in set (0.05 sec)\"]},\"145\":{\"h\":\"8.1.1 使用别名(alias)\",\"t\":[\"select concat(rtrim(vend_name), '(', rtrim(vend_country), ')') as vend_title from vendors order by vend_name; +------------------------+ | vend_title | +------------------------+ | ACME(USA) | | Anvils R Us(USA) | | Furball Inc.(USA) | | Jet Set(England) | | Jouets Et Ours(France) | | LT Supplies(USA) | +------------------------+ 6 rows in set (0.04 sec)\"]},\"146\":{\"h\":\"8.2 执行算术计算\",\"t\":[\"-- orders表包含收到的所有订单，orderitems表包含每个订单中的各项物品。 select prod_id, quantity, item_price from orderitems where order_num = 20005; +---------+----------+------------+ | prod_id | quantity | item_price | +---------+----------+------------+ | ANV01 | 10 | 5.99 | | ANV02 | 3 | 9.99 | | TNT2 | 5 | 10.00 | | FB | 1 | 10.00 | +---------+----------+------------+ 4 rows in set (0.04 sec) # item_price列包含订单中每项物品的单价。如下汇总物品的价格（单价乘以订购数量）： select prod_id, quantity, item_price, quantity * item_price as expanded_price from orderitems where order_num = 20005; +---------+----------+------------+----------------+ | prod_id | quantity | item_price | expanded_price | +---------+----------+------------+----------------+ | ANV01 | 10 | 5.99 | 59.90 | | ANV02 | 3 | 9.99 | 29.97 | | TNT2 | 5 | 10.00 | 50.00 | | FB | 1 | 10.00 | 10.00 | +---------+----------+------------+----------------+ 4 rows in set (0.00 sec)\",\"操作符\",\"说明\",\"+\",\"加\",\"-\",\"减\",\"*\",\"乘\",\"/\",\"除\"]},\"147\":{\"h\":\"第九章 使用数据处理函数\"},\"148\":{\"h\":\"9.1 使用函数\"},\"149\":{\"h\":\"9.1.1 文本处理函数\",\"t\":[\"函数\",\"说明\",\"Left()\",\"返回串左边的字符\",\"Length()\",\"返回串的长度\",\"Locate()\",\"找出串的一个子串\",\"Lower()\",\"将串转换为小写\",\"LTrim()\",\"去掉串左边的空格\",\"Right()\",\"返回串右边的字符\",\"RTrim()\",\"去掉串右边的空格\",\"Soundex()\",\"返回串的SOUNDEX值\",\"SubString()\",\"返回子串的字符\",\"Upper()\",\"将串转换为大写\",\"select vend_name, upper(vend_name) as vend_name_upcase from vendors order by vend_name; +----------------+------------------+ | vend_name | vend_name_upcase | +----------------+------------------+ | ACME | ACME | | Anvils R Us | ANVILS R US | | Furball Inc. | FURBALL INC. | | Jet Set | JET SET | | Jouets Et Ours | JOUETS ET OURS | | LT Supplies | LT SUPPLIES | +----------------+------------------+ 6 rows in set (0.01 sec)\",\"[!node] SOUNDEX是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。SOUNDEX考虑了类似的发音字符和音节，使得能对串进行发音比较而不是字母比较。虽然SOUNDEX不是SQL概念，但MySQL（就像多数DBMS一样）都提供对SOUNDEX的支持。\",\"select cust_name, cust_contact from customers where cust_contact = 'Y. Lie'; Empty set (0.01 sec) select cust_name, cust_contact from customers where Soundex(cust_contact) = Soundex('Y. Lie'); +-------------+--------------+ | cust_name | cust_contact | +-------------+--------------+ | Coyote Inc. | Y Lee | +-------------+--------------+ 1 row in set (0.01 sec)\",\"在这个例子中，WHERE子句使用Soundex()函数来转换cust_contact列值和搜索串为它们的SOUNDEX值。因为Y.Lee和Y.Lie发音相似，所以它们的SOUNDEX值匹配，因此WHERE子句正确地过滤出了所需的数据。\"]},\"150\":{\"h\":\"9.1.2 日期和时间处理函数\",\"t\":[\"函数\",\"说明\",\"AddDate()\",\"增加一个日期（天、周等）\",\"AddTime()\",\"增加一个时间（时、分等）\",\"CurDate()\",\"返回当前日期\",\"CurTime()\",\"返回当前时间\",\"Date()\",\"返回日期时间的日期部分\",\"DateDiff()\",\"计算两个日期之差\",\"Date_Add()\",\"高度灵活的日期运算函数\",\"Date_Format()\",\"返回一个格式化的日期或时间串\",\"Day()\",\"返回一个日期的天数部分\",\"DayOfWeek()\",\"对于一个日期，返回对应的星期几\",\"Hour()\",\"返回一个时间的小时部分\",\"Minute()\",\"返回一个时间的分钟部分\",\"Month()\",\"返回一个日期的月份部分\",\"Now()\",\"返回当前日期和时间\",\"Second()\",\"返回一个时间的秒部分\",\"Time()\",\"返回一个日期时间的时间部分\",\"Year()\",\"返回一个日期的年份部分\",\"注意\",\"首先需要注意的是MySQL使用的日期格式。不管是插入或更新表值还是用WHERE子句进行过滤，日期必须为格式yyyy-mm-dd。因此，2005年9月1日，给出为2005-09-01。虽然其他的日期格式可能也行，但这是首选的日期格式，因为它排除了多义性（如，04/05/06是2006年5月4日或2006年4月5日或2004年5月6日或……）。\",\"select cust_id, order_num, order_date from orders where date(order_date) = '2005-09-01'; +---------+-----------+---------------------+ | cust_id | order_num | order_date | +---------+-----------+---------------------+ | 10001 | 20005 | 2005-09-01 00:00:00 | +---------+-----------+---------------------+ 1 row in set (0.01 sec)\",\"注意\",\"但是，使用WHERE order_date = '2005-09-01'可靠吗？order_ date的数据类型为datetime。这种类型存储日期及时间值。样例表中的值全都具有时间值00:00:00，但实际中很可能并不总是这样。如果用当前日期和时间存储订单日期（因此你不仅知道订单日期，还知道下 订 单 当 天 的 时 间 ）， 怎 么 办 ？ 比 如 ， 存 储 的 order_date 值 为2005-09-01 11:30:05，则WHERE order_date = '2005-09-01'失败。即使给出具有该日期的一行，也不会把它检索出来，因为WHERE匹配失败。\",\"-- 检索出2005年9月所有订单 select cust_id, order_num, order_date from orders where date(order_date) between '2005-09-01' and '2005-09-30'; +---------+-----------+---------------------+ | cust_id | order_num | order_date | +---------+-----------+---------------------+ | 10001 | 20005 | 2005-09-01 00:00:00 | | 10003 | 20006 | 2005-09-12 00:00:00 | | 10004 | 20007 | 2005-09-30 00:00:00 | +---------+-----------+---------------------+ 3 rows in set (0.07 sec) -- 方法2: 使用year和month select cust_id, order_num, order_date from orders where year(order_date) = 2005 and month(order_date) = 9; +---------+-----------+---------------------+ | cust_id | order_num | order_date | +---------+-----------+---------------------+ | 10001 | 20005 | 2005-09-01 00:00:00 | | 10003 | 20006 | 2005-09-12 00:00:00 | | 10004 | 20007 | 2005-09-30 00:00:00 | +---------+-----------+---------------------+ 3 rows in set (0.06 sec)\"]},\"151\":{\"h\":\"9.1.3 数值处理函数\",\"t\":[\"函数\",\"说明\",\"Abs()\",\"返回一个数的绝对值\",\"Cos()\",\"返回一个角度的余弦\",\"Exp()\",\"返回一个数的指数值\",\"Mod()\",\"返回除操作的余数\",\"Pi()\",\"返回圆周率\",\"Rand()\",\"返回一个随机数\",\"Sin()\",\"返回一个角度的正弦\",\"Sqrt()\",\"返回一个数的平方根\",\"Tan()\",\"返回一个角度的正切\"]},\"152\":{\"h\":\"第十章 汇总数据\"},\"153\":{\"h\":\"10.1 聚集函数\",\"t\":[\"函数\",\"说明\",\"AVG()\",\"返回某列的平均值\",\"COUNT()\",\"返回某列的行数\",\"MAX()\",\"返回某列的最大值\",\"MIN()\",\"返回某列的最小值\",\"SUM()\",\"返回某列值之和\"]},\"154\":{\"h\":\"10.1.1 AVG()函数\",\"t\":[\"重要\",\"AVG()通过对表中行数计数并计算特定列值之和，求得该列的平均值。AVG()可用来返回所有列的平均值，也可以用来返回特定列或行的平均值。\",\"select avg(prod_price) as avg_price from products; +-----------+ | avg_price | +-----------+ | 16.133571 | +-----------+ 1 row in set (0.06 sec) -- AVG()也可以用来确定特定列或行的平均值。下面的例子返回特定供应商所提供产品的平均价格： select avg(prod_price) as avg_price from products where vend_id = 1003; +-----------+ | avg_price | +-----------+ | 13.212857 | +-----------+ 1 row in set (0.01 sec)\",\"注意\",\"只用于单个列 AVG()只能用来确定特定数值列的平均值，而且列名必须作为函数参数给出。为了获得多个列的平均值，必须使用多个AVG()函数。\",\"注\",\"NULL值 AVG()函数忽略列值为NULL的行。\"]},\"155\":{\"h\":\"10.1.2 COUNT()函数\",\"t\":[\"重要\",\"COUNT()函数进行计数。可利用COUNT()确定表中行的数目或符合特定条件的行的数目。\",\"使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。\",\"使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。\",\"select count(*) as num_cust from customers; +----------+ | num_cust | +----------+ | 5 | +----------+ 1 row in set (0.05 sec) select count(cust_email) as num_cust from customers; +----------+ | num_cust | +----------+ | 3 | +----------+ 1 row in set (0.00 sec)\",\"注意\",\"NULL值 如果指定列名，则指定列的值为空的行被COUNT()函数忽略，但如果COUNT()函数中用的是星号（*），则不忽略。\"]},\"156\":{\"h\":\"10.1.3 MAX()函数\",\"t\":[\"重要\",\"MAX()返回指定列中的最大值，MAX()要求指定列名。\",\"-- MAX()返回products表中最贵的物品的价格。 select max(prod_price) as max_price from products; +-----------+ | max_price | +-----------+ | 55.00 | +-----------+ 1 row in set (0.00 sec)\",\"注意\",\"对非数值数据使用MAX() 虽然MAX()一般用来找出最大的数值或日期值，但MySQL允许将它用来返回任意列中的最大值，包括返回文本列中的最大值。在用于文本数据时，如果数据按相应的列排序，则MAX()返回最后一行。\",\"注\",\"NULL值 MAX()函数忽略列值为NULL的行。\"]},\"157\":{\"h\":\"10.1.4 MIN()函数\",\"t\":[\"重要\",\"MIN()的功能正好与MAX()功能相反，它返回指定列的最小值。与MAX()一样，MIN()要求指定列名，\",\"-- 其中MIN()返回products表中最便宜物品的价格 select min(prod_price) as max_prica from products; +-----------+ | max_prica | +-----------+ | 2.50 | +-----------+ 1 row in set (0.00 sec)\",\"注意\",\"对非数值数据使用MIN() MIN()函数与MAX()函数类似，MySQL允许将它用来返回任意列中的最小值，包括返回文本列中的最小值。在用于文本数据时，如果数据按相应的列排序，则MIN()返回最前面的行。\",\"注\",\"NULL值 MIN()函数忽略列值为NULL的行。\"]},\"158\":{\"h\":\"10.1.5 SUM()函数\",\"t\":[\"重要\",\"SUM()用来返回指定列值的和（总计）。\",\"-- 检索所订购物品的总数（所有quantity值之和） select sum(quantity) as items_ordered from orderitems where order_num = 20005; +---------------+ | items_ordered | +---------------+ | 19 | +---------------+ 1 row in set (0.00 sec) -- 合计每项物品的item_price*quantity，得出总的订单金额 select sum(item_price * quantity) as total_price from orderitems where order_num = 20005; +-------------+ | total_price | +-------------+ | 149.87 | +-------------+ 1 row in set (0.00 sec)\",\"注\",\"NULL值 SUM()函数忽略列值为NULL的行。\"]},\"159\":{\"h\":\"10.2 聚集不同的值\",\"t\":[\"重要\",\"以上5个聚集函数都可以如下使用：\",\"对所有的行执行计算，指定ALL参数或不给参数（因为ALL是默认行为）；\",\"只包含不同的值，指定DISTINCT参数。\",\"select avg(distinct prod_price) as avg_price from products where vend_id = 1003; +-----------+ | avg_price | +-----------+ | 15.998000 | +-----------+ 1 row in set (0.00 sec)\"]},\"160\":{\"h\":\"10.3 组合聚集函数\",\"t\":[\"select count(*) as num_items, min(prod_price) as price_min, max(prod_price) as price_max, avg(prod_price) as price_avg from products; +-----------+-----------+-----------+-----------+ | num_items | price_min | price_max | price_avg | +-----------+-----------+-----------+-----------+ | 14 | 2.50 | 55.00 | 16.133571 | +-----------+-----------+-----------+-----------+ 1 row in set (0.02 sec)\"]},\"161\":{\"h\":\"第十一章 分组数据\"},\"162\":{\"h\":\"11.1 数据分组\",\"t\":[\"select count(*) as num_prods from products where vend_id = 1003; +-----------+ | num_prods | +-----------+ | 7 | +-----------+ 1 row in set (0.09 sec)\",\"注\",\"问题: 但如果要返回每个供应商提供的产品数目怎么办？或者返回只提供单项产品的供应商所提供的产品，或返回提供10个以上产品的供应商怎么办？ 这时候就只能使用分组了，分组允许把数据分为多个逻辑组，以便能对每个组进行聚集计算。\"]},\"163\":{\"h\":\"11.2 创建分组\",\"t\":[\"重要\",\"分组是在SELECT语句的GROUP BY子句中建立的。\",\"-- vend_id包含产品供应商的ID，num_prods为计算字段（用COUNT(*)函数建立）。GROUP BY子句指示MySQL按vend_id排序并分组数据。这导致对每个vend_id而不是整个表计算num_prods一次。从输出中可以看到，供应商1001有3个产品，供应商1002有2个产品，供应商1003有7个产品，而供应商1005有2个产品。 select vend_id, count(*) as num_prods from products group by vend_id; +---------+-----------+ | vend_id | num_prods | +---------+-----------+ | 1001 | 3 | | 1002 | 2 | | 1003 | 7 | | 1005 | 2 | +---------+-----------+ 4 rows in set (0.03 sec)\",\"注意\",\"在具体使用GROUP BY子句前，需要知道一些重要的规定:\",\"GROUP BY子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。\",\"如果在GROUP BY子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据）。\",\"GROUP BY子句中列出的每个列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在SELECT中使用表达式，则必须在GROUP BY子句中指定相同的表达式。不能使用别名。\",\"除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子句中给出。\",\"如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列中有多行NULL值，它们将分为一组。\",\"GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。\",\"注\",\"使用ROLLUP 使用WITH ROLLUP关键字，可以得到每个分组以及每个分组汇总级别（针对每个分组）的值\",\"select vend_id, count(*) as num_prods from products group by vend_id with rollup; +---------+-----------+ | vend_id | num_prods | +---------+-----------+ | 1001 | 3 | | 1002 | 2 | | 1003 | 7 | | 1005 | 2 | | NULL | 14 | +---------+-----------+ 5 rows in set (0.03 sec)\"]},\"164\":{\"h\":\"11.3 过滤分组(HAVING)\",\"t\":[\"重要\",\"HAVING支持所有WHERE操作符，唯一的差别是WHERE过滤行，而HAVING过滤分组。\",\"-- 过滤COUNT(*) >=2（两个以上的订单）的那些分组。 select cust_id, count(*) as orders from orders group by cust_id having count(*) >= 2; +---------+--------+ | cust_id | orders | +---------+--------+ | 10001 | 2 | +---------+--------+ 1 row in set (0.08 sec)\",\"注\",\"HAVING和WHERE的差别 这里有另一种理解方法，WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。这是一个重要的区别，WHERE排除的行不包括在分组中。这可能会改变计算值，从而影响HAVING子句中基于这些值过滤掉的分组。\",\"-- WHERE子句过滤所有prod_price至少为10的行。 -- 然后按vend_id分组数据，HAVING子句过滤计数为2或2以上的分组。 select vend_id, count(*) as num_prods from products where prod_price >= 10 group by vend_id having count(*) >= 2; +---------+-----------+ | vend_id | num_prods | +---------+-----------+ | 1003 | 4 | | 1005 | 2 | +---------+-----------+ 2 rows in set (0.03 sec) -- 如果没有WHERE子句，将会多检索出两行（供应商1002，销售的所有产品价格都在10以下；供应商1001，销售3个产品，但只有一个产品的价格大于等于10）： select vend_id, count(*) as num_prods from products group by vend_id having count(*) >= 2; +---------+-----------+ | vend_id | num_prods | +---------+-----------+ | 1001 | 3 | | 1002 | 2 | | 1003 | 7 | | 1005 | 2 | +---------+-----------+ 4 rows in set (0.01 sec) select * from products; +---------+---------+----------------+------------+----------------------------------------------------------------+ | prod_id | vend_id | prod_name | prod_price | prod_desc | +---------+---------+----------------+------------+----------------------------------------------------------------+ | ANV01 | 1001 | .5 ton anvil | 5.99 | .5 ton anvil, black, complete with handy hook | | ANV02 | 1001 | 1 ton anvil | 9.99 | 1 ton anvil, black, complete with handy hook and carrying case | | ANV03 | 1001 | 2 ton anvil | 14.99 | 2 ton anvil, black, complete with handy hook and carrying case | | DTNTR | 1003 | Detonator | 13.00 | Detonator (plunger powered), fuses not included | | FB | 1003 | Bird seed | 10.00 | Large bag (suitable for road runners) | | FC | 1003 | Carrots | 2.50 | Carrots (rabbit hunting season only) | | FU1 | 1002 | Fuses | 3.42 | 1 dozen, extra long | | JP1000 | 1005 | JetPack 1000 | 35.00 | JetPack 1000, intended for single use | | JP2000 | 1005 | JetPack 2000 | 55.00 | JetPack 2000, multi-use | | OL1 | 1002 | Oil can | 8.99 | Oil can, red | | SAFE | 1003 | Safe | 50.00 | Safe with combination lock | | SLING | 1003 | Sling | 4.49 | Sling, one size fits all | | TNT1 | 1003 | TNT (1 stick) | 2.50 | TNT, red, single stick | | TNT2 | 1003 | TNT (5 sticks) | 10.00 | TNT, red, pack of 10 sticks | +---------+---------+----------------+------------+----------------------------------------------------------------+ 14 rows in set (0.00 sec)\"]},\"165\":{\"h\":\"11.4 分组和排序\",\"t\":[\"order by\",\"group by\",\"排序产生的输出\",\"分组行。但输出可能不是分组的顺序\",\"任意列都可以使用（甚至非选择的列也可以使用）\",\"只可能使用选择列或表达式列，而且必须使用每个选择列表达式\",\"不一定需要\",\"如果与聚集函数一起使用列（或表达式），则必须使用\",\"注意\",\"不要忘记ORDER BY 一般在使用GROUP BY子句时，应该也给出ORDER BY子句。这是保证数据正确排序的唯一方法。千万不要仅依赖GROUP BY排序数据。\",\"select order_num, sum(quantity * item_price) as ordertotal from orderitems group by order_num having sum(quantity * item_price) >= 50; +-----------+------------+ | order_num | ordertotal | +-----------+------------+ | 20005 | 149.87 | | 20006 | 55.00 | | 20007 | 1000.00 | | 20008 | 125.00 | +-----------+------------+ 4 rows in set (0.02 sec) select order_num, sum(quantity * item_price) as ordertotal from orderitems group by order_num having sum(quantity * item_price) >= 50 order by ordertotal; +-----------+------------+ | order_num | ordertotal | +-----------+------------+ | 20006 | 55.00 | | 20008 | 125.00 | | 20005 | 149.87 | | 20007 | 1000.00 | +-----------+------------+ 4 rows in set (0.00 sec)\"]},\"166\":{\"h\":\"11.5 select子句顺序\",\"t\":[\"子句\",\"说明\",\"是否必须使用\",\"SELECT\",\"要返回的列或表达式\",\"是\",\"FROM\",\"从中检索数据的表\",\"仅在从表选择数据时使用\",\"WHERE\",\"行级过滤\",\"否\",\"GROUP BY\",\"分组说明\",\"仅在按组计算聚集时使用\",\"HAVING\",\"组级过滤\",\"否\",\"ORDER BY\",\"输出排序顺序\",\"否\",\"LIMIT\",\"要检索的行数\",\"否\"]},\"167\":{\"h\":\"第十二章 使用子查询\"},\"168\":{\"h\":\"12.1 利用子查询进行过滤\",\"t\":[\"提示\",\"订单存储在两个表中。\",\"对于包含订单号、客户ID、订单日期的每个订单，orders表存储一行。\",\"各订单的物品存储在相关的orderitems表中。\",\"orders表不存储客户信息。它只存储客户的ID。实际的客户信息存储在customers表中。\",\"-- 1. prod_id为TNT2的所有订单物品，检索其order_num列 select order_num from orderitems where prod_id = 'TNT2'; +-----------+ | order_num | +-----------+ | 20005 | | 20007 | +-----------+ 2 rows in set (0.08 sec) -- 2. 查询具有订单20005和20007的客户ID。 select cust_id from orders where order_num in(20005, 20007); +---------+ | cust_id | +---------+ | 10001 | | 10004 | +---------+ 2 rows in set (0.01 sec) -- 把第一个查询（返回订单号的那一个）变为子查询组合两个查询。 select cust_id from orders where order_num in(select order_num from orderitems where prod_id = 'TNT2'); +---------+ | cust_id | +---------+ | 10001 | | 10004 | +---------+ 2 rows in set (0.02 sec) -- 3. 检索这些客户ID的客户信息。 select cust_name, cust_contact from customers where cust_id in(10001,10004); +----------------+--------------+ | cust_name | cust_contact | +----------------+--------------+ | Coyote Inc. | Y Lee | | Yosemite Place | Y Sam | +----------------+--------------+ 2 rows in set (0.01 sec) -- 组合所有查询 select cust_name, cust_contact from customers where cust_id in(select cust_id from orders where order_num in(select order_num from orderitems where prod_id = 'TNT2')); +----------------+--------------+ | cust_name | cust_contact | +----------------+--------------+ | Coyote Inc. | Y Lee | | Yosemite Place | Y Sam | +----------------+--------------+ 2 rows in set (0.02 sec)\",\"注意\",\"列必须匹配 在WHERE子句中使用子查询（如这里所示），应该保证SELECT语句具有与WHERE子句中相同数目的列。通常，子查询将返回单个列并且与单个列匹配，但如果需要也可以使用多个列。\"]},\"169\":{\"h\":\"12.2 作为计算字段使用子查询\",\"t\":[\"显示customers表中每个客户的订单总数。订单与相应的客户ID存储在orders表中。\",\"从customers表中检索客户列表。\",\"对于检索出的每个客户，统计其在orders表中的订单数目。\",\"select count(*) as orders from orders where cust_id = 10001; +--------+ | orders | +--------+ | 2 | +--------+ 1 row in set (0.03 sec) select cust_name, cust_state, (select count(*) from orders where orders.cust_id = customers.cust_id) as orders from customers order by cust_name; +----------------+------------+--------+ | cust_name | cust_state | orders | +----------------+------------+--------+ | Coyote Inc. | MI | 2 | | E Fudd | IL | 1 | | Mouse House | OH | 0 | | Wascals | IN | 1 | | Yosemite Place | AZ | 1 | +----------------+------------+--------+ 5 rows in set (0.01 sec)\",\"注\",\"相关子查询（correlated subquery） 涉及外部查询的子查询。\"]},\"170\":{\"h\":\"第十三章 联结表\"},\"171\":{\"h\":\"13.1 联结\"},\"172\":{\"h\":\"13.1.1 关系表\",\"t\":[\"重要\",\"主键(primary key): 一个表的唯一标识 外键(foreign key): 外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。\"]},\"173\":{\"h\":\"13.2 创建联结\",\"t\":[\"select vend_name, prod_name, prod_price from vendors, products where vendors.vend_id = products.vend_id order by vend_name, prod_name; +-------------+----------------+------------+ | vend_name | prod_name | prod_price | +-------------+----------------+------------+ | ACME | Bird seed | 10.00 | | ACME | Carrots | 2.50 | | ACME | Detonator | 13.00 | | ACME | Safe | 50.00 | | ACME | Sling | 4.49 | | ACME | TNT (1 stick) | 2.50 | | ACME | TNT (5 sticks) | 10.00 | | Anvils R Us | .5 ton anvil | 5.99 | | Anvils R Us | 1 ton anvil | 9.99 | | Anvils R Us | 2 ton anvil | 14.99 | | Jet Set | JetPack 1000 | 35.00 | | Jet Set | JetPack 2000 | 55.00 | | LT Supplies | Fuses | 3.42 | | LT Supplies | Oil can | 8.99 | +-------------+----------------+------------+ 14 rows in set (0.06 sec)\",\"注意\",\"完全限定列名 在引用的列可能出现二义性时，必须使用完全限定列名（用一个点分隔的表名和列名）。如果引用一个没有用表名限制的具有二义性的列名，MySQL将返回错误。\"]},\"174\":{\"h\":\"13.2.1 WHERE子句的重要性\",\"t\":[\"提示\",\"没有WHERE子句，第一个表中的每个行将与第二个表中的每个行配对，而不管它们逻辑上是否可以配在一起。\",\"提示\",\"笛卡儿积（cartesian product） 由没有联结条件的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。\",\"select vend_name, prod_name, prod_price from vendors, products order by vend_name, prod_name; +----------------+----------------+------------+ | vend_name | prod_name | prod_price | +----------------+----------------+------------+ | ACME | .5 ton anvil | 5.99 | | ACME | 1 ton anvil | 9.99 | | ACME | 2 ton anvil | 14.99 | | ACME | Bird seed | 10.00 | | ACME | Carrots | 2.50 | | ACME | Detonator | 13.00 | | ACME | Fuses | 3.42 | | ACME | JetPack 1000 | 35.00 | | ACME | JetPack 2000 | 55.00 | | ACME | Oil can | 8.99 | | ACME | Safe | 50.00 | | ACME | Sling | 4.49 | | ACME | TNT (1 stick) | 2.50 | | ACME | TNT (5 sticks) | 10.00 | | Anvils R Us | .5 ton anvil | 5.99 | | Anvils R Us | 1 ton anvil | 9.99 | | Anvils R Us | 2 ton anvil | 14.99 | | Anvils R Us | Bird seed | 10.00 | | Anvils R Us | Carrots | 2.50 | | Anvils R Us | Detonator | 13.00 | | Anvils R Us | Fuses | 3.42 | | Anvils R Us | JetPack 1000 | 35.00 | | Anvils R Us | JetPack 2000 | 55.00 | | Anvils R Us | Oil can | 8.99 | | Anvils R Us | Safe | 50.00 | | Anvils R Us | Sling | 4.49 | | Anvils R Us | TNT (1 stick) | 2.50 | | Anvils R Us | TNT (5 sticks) | 10.00 | | Furball Inc. | .5 ton anvil | 5.99 | | Furball Inc. | 1 ton anvil | 9.99 | | Furball Inc. | 2 ton anvil | 14.99 | | Furball Inc. | Bird seed | 10.00 | | Furball Inc. | Carrots | 2.50 | | Furball Inc. | Detonator | 13.00 | | Furball Inc. | Fuses | 3.42 | | Furball Inc. | JetPack 1000 | 35.00 | | Furball Inc. | JetPack 2000 | 55.00 | | Furball Inc. | Oil can | 8.99 | | Furball Inc. | Safe | 50.00 | | Furball Inc. | Sling | 4.49 | | Furball Inc. | TNT (1 stick) | 2.50 | | Furball Inc. | TNT (5 sticks) | 10.00 | | Jet Set | .5 ton anvil | 5.99 | | Jet Set | 1 ton anvil | 9.99 | | Jet Set | 2 ton anvil | 14.99 | | Jet Set | Bird seed | 10.00 | | Jet Set | Carrots | 2.50 | | Jet Set | Detonator | 13.00 | | Jet Set | Fuses | 3.42 | | Jet Set | JetPack 1000 | 35.00 | | Jet Set | JetPack 2000 | 55.00 | | Jet Set | Oil can | 8.99 | | Jet Set | Safe | 50.00 | | Jet Set | Sling | 4.49 | | Jet Set | TNT (1 stick) | 2.50 | | Jet Set | TNT (5 sticks) | 10.00 | | Jouets Et Ours | .5 ton anvil | 5.99 | | Jouets Et Ours | 1 ton anvil | 9.99 | | Jouets Et Ours | 2 ton anvil | 14.99 | | Jouets Et Ours | Bird seed | 10.00 | | Jouets Et Ours | Carrots | 2.50 | | Jouets Et Ours | Detonator | 13.00 | | Jouets Et Ours | Fuses | 3.42 | | Jouets Et Ours | JetPack 1000 | 35.00 | | Jouets Et Ours | JetPack 2000 | 55.00 | | Jouets Et Ours | Oil can | 8.99 | | Jouets Et Ours | Safe | 50.00 | | Jouets Et Ours | Sling | 4.49 | | Jouets Et Ours | TNT (1 stick) | 2.50 | | Jouets Et Ours | TNT (5 sticks) | 10.00 | | LT Supplies | .5 ton anvil | 5.99 | | LT Supplies | 1 ton anvil | 9.99 | | LT Supplies | 2 ton anvil | 14.99 | | LT Supplies | Bird seed | 10.00 | | LT Supplies | Carrots | 2.50 | | LT Supplies | Detonator | 13.00 | | LT Supplies | Fuses | 3.42 | | LT Supplies | JetPack 1000 | 35.00 | | LT Supplies | JetPack 2000 | 55.00 | | LT Supplies | Oil can | 8.99 | | LT Supplies | Safe | 50.00 | | LT Supplies | Sling | 4.49 | | LT Supplies | TNT (1 stick) | 2.50 | | LT Supplies | TNT (5 sticks) | 10.00 | +----------------+----------------+------------+ 84 rows in set (0.01 sec)\"]},\"175\":{\"h\":\"13.2.2 内部联结\",\"t\":[\"提示\",\"目前为止所用的联结称为等值联结（equijoin），它基于两个表之间的相等测试。这种联结也称为内部联结。其实，对于这种联结可以使用稍微不同的语法来明确指定联结的类型。\",\"-- 这里，两个表之间的关系是FROM子句的组成部分，以INNER JOIN指定。在使用这种语法时，联结条件用特定的ON子句而不是WHERE子句给出。传递给ON的实际条件与传递给WHERE的相同。 select vend_name, prod_name, prod_price from vendors inner join products on vendors.vend_id = products.vend_id; +-------------+----------------+------------+ | vend_name | prod_name | prod_price | +-------------+----------------+------------+ | Anvils R Us | .5 ton anvil | 5.99 | | Anvils R Us | 1 ton anvil | 9.99 | | Anvils R Us | 2 ton anvil | 14.99 | | LT Supplies | Fuses | 3.42 | | LT Supplies | Oil can | 8.99 | | ACME | Detonator | 13.00 | | ACME | Bird seed | 10.00 | | ACME | Carrots | 2.50 | | ACME | Safe | 50.00 | | ACME | Sling | 4.49 | | ACME | TNT (1 stick) | 2.50 | | ACME | TNT (5 sticks) | 10.00 | | Jet Set | JetPack 1000 | 35.00 | | Jet Set | JetPack 2000 | 55.00 | +-------------+----------------+------------+ 14 rows in set (0.00 sec) -- where语句和on语句一样 select vend_name, prod_name, prod_price from vendors inner join products where vendors.vend_id = products.vend_id; +-------------+----------------+------------+ | vend_name | prod_name | prod_price | +-------------+----------------+------------+ | Anvils R Us | .5 ton anvil | 5.99 | | Anvils R Us | 1 ton anvil | 9.99 | | Anvils R Us | 2 ton anvil | 14.99 | | LT Supplies | Fuses | 3.42 | | LT Supplies | Oil can | 8.99 | | ACME | Detonator | 13.00 | | ACME | Bird seed | 10.00 | | ACME | Carrots | 2.50 | | ACME | Safe | 50.00 | | ACME | Sling | 4.49 | | ACME | TNT (1 stick) | 2.50 | | ACME | TNT (5 sticks) | 10.00 | | Jet Set | JetPack 1000 | 35.00 | | Jet Set | JetPack 2000 | 55.00 | +-------------+----------------+------------+ 14 rows in set (0.00 sec)\"]},\"176\":{\"h\":\"13.2.3 联结多个表\",\"t\":[\"select prod_name, vend_name, prod_price, quantity from orderitems, products, vendors where products.vend_id = vendors.vend_id and orderitems.prod_id = products.prod_id and order_num = 20005; +----------------+-------------+------------+----------+ | prod_name | vend_name | prod_price | quantity | +----------------+-------------+------------+----------+ | .5 ton anvil | Anvils R Us | 5.99 | 10 | | 1 ton anvil | Anvils R Us | 9.99 | 3 | | TNT (5 sticks) | ACME | 10.00 | 5 | | Bird seed | ACME | 10.00 | 1 | +----------------+-------------+------------+----------+ 4 rows in set (0.00 sec)\",\"注意\",\"性能考虑 MySQL在运行时关联指定的每个表以处理联结。这种处理可能是非常耗费资源的，因此应该仔细，不要联结不必要的表。联结的表越多，性能下降越厉害。\"]},\"177\":{\"h\":\"第十四章 创建高级联结\"},\"178\":{\"h\":\"14.1 使用表别名\",\"t\":[\"select cust_name, cust_contact from customers as c, orders as o, orderitems as oi where c.cust_id = o.cust_id and oi.order_num = o.order_num and prod_id = 'TNT2'; +----------------+--------------+ | cust_name | cust_contact | +----------------+--------------+ | Coyote Inc. | Y Lee | | Yosemite Place | Y Sam | +----------------+--------------+ 2 rows in set (0.09 sec)\"]},\"179\":{\"h\":\"14.2 使用不同类型的联结\"},\"180\":{\"h\":\"14.2.1 自联结\",\"t\":[\"假如你发现某物品（其ID为DTNTR）存在问题，因此想知道生产该物品的供应商生产的其他物品是否也存在这些问题。此查询要求首先找到生产ID为DTNTR的物品的供应商，然后找出这个供应商生产的其他物品。\",\"-- 使用子查询 select prod_id, prod_name from products where vend_id = (select vend_id from products where prod_id = 'DTNTR'); +---------+----------------+ | prod_id | prod_name | +---------+----------------+ | DTNTR | Detonator | | FB | Bird seed | | FC | Carrots | | SAFE | Safe | | SLING | Sling | | TNT1 | TNT (1 stick) | | TNT2 | TNT (5 sticks) | +---------+----------------+ 7 rows in set (0.05 sec) -- 使用联结查询 select p1.prod_id, p1.prod_name from products as p1, products as p2 where p1.vend_id = p2.vend_id and p2.prod_i d = 'DTNTR'; +---------+----------------+ | prod_id | prod_name | +---------+----------------+ | DTNTR | Detonator | | FB | Bird seed | | FC | Carrots | | SAFE | Safe | | SLING | Sling | | TNT1 | TNT (1 stick) | | TNT2 | TNT (5 sticks) | +---------+----------------+ 7 rows in set (0.00 sec)\",\"提示\",\"用自联结而不用子查询 自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终的结果是相同的，但有时候处理联结远比处理子查询快得多。应该试一下两种方法，以确定哪一种的性能更好。\"]},\"181\":{\"h\":\"14.2.2 自然联结\",\"t\":[\"无论何时对表进行联结，应该至少有一个列出现在不止一个表中（被联结的列）。标准的联结（内部联结）返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次。\",\"select c.*, o.order_num, o.order_date, oi.prod_id, oi.quantity, oi.item_price from customers as c, orders as o, orderitems as oi where c.cust_id = o.cust_id and oi.order_num = o.order_num and prod_id = 'FB'; +---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+------------+ | cust_id | cust_name | cust_address | cust_city | cust_state | cust_zip | cust_country | cust_contact | cust_email | order_num | order_date | prod_id | quantity | item_price | +---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+------------+ | 10001 | Coyote Inc. | 200 Maple Lane | Detroit | MI | 44444 | USA | Y Lee | ylee@coyote.com | 20005 | 2005-09-01 00:00:00 | FB | 1 | 10.00 | | 10001 | Coyote Inc. | 200 Maple Lane | Detroit | MI | 44444 | USA | Y Lee | ylee@coyote.com | 20009 | 2005-10-08 00:00:00 | FB | 1 | 10.00 | +---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+------------+ 2 rows in set (0.03 sec)\",\"注\",\"事实上，迄今为止我们建立的每个内部联结都是自然联结，很可能我们永远都不会用到不是自然联结的内部联结。\"]},\"182\":{\"h\":\"14.2.3 外部联结\",\"t\":[\"许多联结将一个表中的行与另一个表中的行相关联。但有时候会需要包含没有关联行的那些行。例如，可能需要使用联结来完成以下工作：\",\"对每个客户下了多少订单进行计数，包括那些至今尚未下订单的客户；\",\"列出所有产品以及订购数量，包括没有人订购的产品；\",\"计算平均销售规模，包括那些至今尚未下订单的客户。 在上述例子中，联结包含了那些在相关表中没有关联行的行。这种类型的联结称为外部联结。\",\"-- 内部联结 select customers.cust_id, orders.order_num from customers inner join orders on customers.cust_id = orders.cust_id; +---------+-----------+ | cust_id | order_num | +---------+-----------+ | 10001 | 20005 | | 10001 | 20009 | | 10003 | 20006 | | 10004 | 20007 | | 10005 | 20008 | +---------+-----------+ 5 rows in set (0.05 sec) -- 外部联结 select customers.cust_id, orders.order_num from customers left outer join orders on customers.cust_id = orders.cust_id; +---------+-----------+ | cust_id | order_num | +---------+-----------+ | 10001 | 20005 | | 10001 | 20009 | | 10002 | NULL | | 10003 | 20006 | | 10004 | 20007 | | 10005 | 20008 | +---------+-----------+ 6 rows in set (0.00 sec)\",\"重要\",\"这条SELECT语句使用了关键字OUTER JOIN来指定联结的类型（而不是在WHERE子句中指定）。但是，与内部联结关联两个表中的行不同的是，外部联结还包括没有关联行的行。在使用OUTER JOIN语法时，必须使用RIGHT或LEFT关键字指定包括其所有行的表（RIGHT指出的是OUTER JOIN右边的表，而LEFT指出的是OUTER JOIN左边的表）。上面的例子使用LEFT OUTER JOIN从FROM子句的左边表（customers表）中选择所有行。为了从右边的表中选择所有行，应该使用RIGHT OUTER JOIN，\"]},\"183\":{\"h\":\"14.3 使用带聚集函数的联结\",\"t\":[\"select customers.cust_name, customers.cust_id, count(orders.order_num) as num_ord from customers inner join orders on customers.cust_id = orders.cust_id group by customers.cust_id; +----------------+---------+---------+ | cust_name | cust_id | num_ord | +----------------+---------+---------+ | Coyote Inc. | 10001 | 2 | | Wascals | 10003 | 1 | | Yosemite Place | 10004 | 1 | | E Fudd | 10005 | 1 | +----------------+---------+---------+ 4 rows in set (0.06 sec)\"]},\"184\":{\"h\":\"14.4 使用联结和联结条件\",\"t\":[\"注意所使用的联结类型。一般我们使用内部联结，但使用外部联结也是有效的。\",\"保证使用正确的联结条件，否则将返回不正确的数据。\",\"应该总是提供联结条件，否则会得出笛卡儿积。\",\"在一个联结中可以包含多个表，甚至对于每个联结可以采用不同的联结类型。虽然这样做是合法的，一般也很有用，但应该在一起测试它们前，分别测试每个联结。这将使故障排除更为简单。\"]},\"185\":{\"h\":\"第十五章 组合查询\"},\"186\":{\"h\":\"15.1 组合查询\",\"t\":[\"注\",\"多数SQL查询都只包含从一个或多个表中返回数据的单条SELECT语句。MySQL也允许执行多个查询（多条SELECT语句），并将结果作为单个查询结果集返回。这些组合查询通常称为并（union）或复合查询（compound query）。\",\"有两种基本情况，其中需要使用组合查询：\",\"在单个查询中从不同的表返回类似结构的数据；\",\"对单个表执行多个查询，按单个查询返回数据。\",\"提示\",\"组合查询和多个WHERE条件 多数情况下，组合相同表的两个查询完成的工作与具有多个WHERE子句条件的单条查询完成的工作相同。换句话说，任何具有多个WHERE子句的SELECT语句都可以作为一个组合查询给出，在以下段落中可以看到这一点。这两种技术在不同的查询中性能也不同。因此，应该试一下这两种技术，以确定对特定的查询哪一种性能更好。\"]},\"187\":{\"h\":\"15.2 创建组合查询\",\"t\":[\"提示\",\"可用UNION操作符来组合数条SQL查询。利用UNION，可给出多条SELECT语句，将它们的结果组合成单个结果集。\"]},\"188\":{\"h\":\"15.2.1 使用UNION\",\"t\":[\"假如需要价格小于等于5的所有物品的一个列表，而且还想包括供应商1001和1002生产的所有物品（不考虑价格）。当然，可以利用WHERE子句来完成此工作，不过这次我们将使用UNION。\",\"-- 检索价格不高于5的所有物品。 select vend_id, prod_id, prod_price from products where prod_price <= 5; +---------+---------+------------+ | vend_id | prod_id | prod_price | +---------+---------+------------+ | 1003 | FC | 2.50 | | 1002 | FU1 | 3.42 | | 1003 | SLING | 4.49 | | 1003 | TNT1 | 2.50 | +---------+---------+------------+ 4 rows in set (0.00 sec) -- 找出供应商1001和1002生产的所有物品。 select vend_id, prod_id, prod_price from products where vend_id in(1001,1002); +---------+---------+------------+ | vend_id | prod_id | prod_price | +---------+---------+------------+ | 1001 | ANV01 | 5.99 | | 1001 | ANV02 | 9.99 | | 1001 | ANV03 | 14.99 | | 1002 | FU1 | 3.42 | | 1002 | OL1 | 8.99 | +---------+---------+------------+ 5 rows in set (0.00 sec) -- 组合 select vend_id, prod_id, prod_price from products where prod_price <= 5 union select vend_id, prod_id, prod_price from products where vend_id in(1001,1002); +---------+---------+------------+ | vend_id | prod_id | prod_price | +---------+---------+------------+ | 1003 | FC | 2.50 | | 1002 | FU1 | 3.42 | | 1003 | SLING | 4.49 | | 1003 | TNT1 | 2.50 | | 1001 | ANV01 | 5.99 | | 1001 | ANV02 | 9.99 | | 1001 | ANV03 | 14.99 | | 1002 | OL1 | 8.99 | +---------+---------+------------+ 8 rows in set (0.02 sec)\"]},\"189\":{\"h\":\"15.2.2 UNION规则\",\"t\":[\"UNION必须由两条或两条以上的SELECT语句组成，语句之间用关键字UNION分隔（因此，如果组合4条SELECT语句，将要使用3个UNION关键字）。\",\"UNION中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。\",\"列数据类型必须兼容：类型不必完全相同，但必须是DBMS可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。\"]},\"190\":{\"h\":\"15.2.3 包含或取消重复的行\",\"t\":[\"注意\",\"UNION从查询结果集中自动去除了重复的行（换句话说，它的行为与单条SELECT语句中使用多个WHERE子句条件一样）。 这是UNION的默认行为，但是如果需要，可以改变它。事实上，如果想返回所有匹配行，可使用UNION ALL而不是UNION。\",\"select vend_id, prod_id, prod_price from products where prod_price <= 5 union all select vend_id, prod_id, prod_price from products where vend_id in(1001,1002); +---------+---------+------------+ | vend_id | prod_id | prod_price | +---------+---------+------------+ | 1003 | FC | 2.50 | | 1002 | FU1 | 3.42 | | 1003 | SLING | 4.49 | | 1003 | TNT1 | 2.50 | | 1001 | ANV01 | 5.99 | | 1001 | ANV02 | 9.99 | | 1001 | ANV03 | 14.99 | | 1002 | FU1 | 3.42 | | 1002 | OL1 | 8.99 | +---------+---------+------------+ 9 rows in set (0.06 sec)\",\"注意\",\"UNION与WHERE 本章开始时说过，UNION几乎总是完成与多个WHERE条件相同的工作。UNION ALL为UNION的一种形式，它完成WHERE子句完成不了的工作。如果确实需要每个条件的匹配行全部出现（包括重复行），则必须使用UNION ALL而不是WHERE。\"]},\"191\":{\"h\":\"15.2.4 对组合查询结果排序\",\"t\":[\"select vend_id, prod_id, prod_price from products where prod_price <= 5 union select vend_id, prod_id, prod_price from products where vend_id in(1001,1002) order by vend_id, prod_price; +---------+---------+------------+ | vend_id | prod_id | prod_price | +---------+---------+------------+ | 1001 | ANV01 | 5.99 | | 1001 | ANV02 | 9.99 | | 1001 | ANV03 | 14.99 | | 1002 | FU1 | 3.42 | | 1002 | OL1 | 8.99 | | 1003 | FC | 2.50 | | 1003 | TNT1 | 2.50 | | 1003 | SLING | 4.49 | +---------+---------+------------+ 8 rows in set (0.00 sec)\"]},\"192\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"query\",{\"1\":{\"186\":1}}],[\"quantity\",{\"1\":{\"146\":5,\"158\":3,\"165\":4,\"176\":2,\"181\":2}}],[\"上面的例子使用left\",{\"1\":{\"182\":1}}],[\"许多联结将一个表中的行与另一个表中的行相关联\",{\"1\":{\"182\":1}}],[\"迄今为止我们建立的每个内部联结都是自然联结\",{\"1\":{\"181\":1}}],[\"标准的联结\",{\"1\":{\"181\":1}}],[\"标志来编译\",{\"1\":{\"56\":1}}],[\"假如需要价格小于等于5的所有物品的一个列表\",{\"1\":{\"188\":1}}],[\"假如你发现某物品\",{\"1\":{\"180\":1}}],[\"假设有程序同时使用b1\",{\"1\":{\"89\":1}}],[\"假设b1\",{\"1\":{\"89\":1}}],[\"假设链接器在全局符号表里面找到\",{\"1\":{\"85\":1}}],[\"假设lookup的原型为lookup\",{\"1\":{\"80\":1}}],[\"假设liba\",{\"1\":{\"80\":1}}],[\"假设module\",{\"1\":{\"78\":1}}],[\"假设共享库被加载到0x100000000的位置\",{\"1\":{\"77\":1}}],[\"假设该模块经过加载后位于虚拟内存的0x10000000处\",{\"1\":{\"77\":1}}],[\"假设系统中有两环境变量\",{\"1\":{\"70\":1}}],[\"假设\",{\"1\":{\"67\":1}}],[\"假设我们的elf可执行文件只有一个代码段\",{\"1\":{\"64\":1}}],[\"性能下降越厉害\",{\"1\":{\"176\":1}}],[\"性能考虑\",{\"1\":{\"176\":1}}],[\"传递给on的实际条件与传递给where的相同\",{\"1\":{\"175\":1}}],[\"目前为止所用的联结称为等值联结\",{\"1\":{\"175\":1}}],[\"目标操作系统\",{\"1\":{\"18\":1}}],[\"目标硬件\",{\"1\":{\"18\":1}}],[\"目标文件里面包含有专门由于表示重定位信息的重定位表\",{\"1\":{\"85\":1}}],[\"目标文件b声明符号\",{\"1\":{\"43\":1}}],[\"目标文件将信息按不同的属性进行存储\",{\"1\":{\"18\":1}}],[\"目标文件是什么样的\",{\"0\":{\"18\":1}}],[\"目标文件的格式\",{\"0\":{\"17\":1}}],[\"目标文件\",{\"0\":{\"16\":1}}],[\"笛卡儿积\",{\"1\":{\"174\":1}}],[\"完全限定列名\",{\"1\":{\"173\":1}}],[\"完成自举后\",{\"1\":{\"89\":1}}],[\"外部联结还包括没有关联行的行\",{\"1\":{\"182\":1}}],[\"外部联结\",{\"0\":{\"182\":1},\"1\":{\"182\":1}}],[\"外部符号的引用还处于无效地址的状态\",{\"1\":{\"81\":1}}],[\"外键为某个表中的一列\",{\"1\":{\"172\":1}}],[\"外键\",{\"1\":{\"172\":1}}],[\"联结包含了那些在相关表中没有关联行的行\",{\"1\":{\"182\":1}}],[\"联结的表越多\",{\"1\":{\"176\":1}}],[\"联结多个表\",{\"0\":{\"176\":1}}],[\"联结条件用特定的on子句而不是where子句给出\",{\"1\":{\"175\":1}}],[\"联结\",{\"0\":{\"171\":1}}],[\"联结表\",{\"0\":{\"170\":1}}],[\"涉及外部查询的子查询\",{\"1\":{\"169\":1}}],[\"统计其在orders表中的订单数目\",{\"1\":{\"169\":1}}],[\"统一放到一个全局符号表\",{\"1\":{\"49\":1}}],[\"显示customers表中每个客户的订单总数\",{\"1\":{\"169\":1}}],[\"显示show语句\",{\"1\":{\"100\":1}}],[\"作为计算字段使用子查询\",{\"0\":{\"169\":1}}],[\"作为补充我在这里给出了书中想要的效果\",{\"1\":{\"77\":1}}],[\"子查询将返回单个列并且与单个列匹配\",{\"1\":{\"168\":1}}],[\"子句\",{\"1\":{\"166\":1}}],[\"列数据类型必须兼容\",{\"1\":{\"189\":1}}],[\"列必须匹配\",{\"1\":{\"168\":1}}],[\"列出所有产品以及订购数量\",{\"1\":{\"182\":1}}],[\"列出所有小于等于10$的商品\",{\"1\":{\"117\":1}}],[\"列出所有小于10$的商品\",{\"1\":{\"117\":1}}],[\"列出除1002和1003之外的所有供应商制造的产品\",{\"1\":{\"127\":1}}],[\"列出由厂商1002\",{\"1\":{\"126\":1}}],[\"变为子查询组合两个查询\",{\"1\":{\"168\":1}}],[\"变量p在装载时需要加上一个装载地址a\",{\"1\":{\"85\":1}}],[\"变量名等\",{\"1\":{\"34\":1}}],[\"变量var的地址确认为0x1000\",{\"1\":{\"14\":1}}],[\"各订单的物品存储在相关的orderitems表中\",{\"1\":{\"168\":1}}],[\"各个段在链接后的虚拟地址空间已经确定\",{\"1\":{\"50\":1}}],[\"客户id\",{\"1\":{\"168\":1}}],[\"利用union\",{\"1\":{\"187\":1}}],[\"利用子查询进行过滤\",{\"0\":{\"168\":1}}],[\"利用缓存\",{\"1\":{\"18\":1}}],[\"输出排序顺序\",{\"1\":{\"166\":1}}],[\"输出的可执行文件中的空间\",{\"1\":{\"49\":1}}],[\"否\",{\"1\":{\"166\":4}}],[\"否则会得出笛卡儿积\",{\"1\":{\"184\":1}}],[\"否则将返回不正确的数据\",{\"1\":{\"184\":1}}],[\"否则不要把它们用在搜索模式的开始处\",{\"1\":{\"132\":1}}],[\"否则链接器会报无法找到a1\",{\"1\":{\"89\":1}}],[\"否则链接就会报符号未定义错误\",{\"1\":{\"55\":1}}],[\"否则就会超出被分配的空间\",{\"1\":{\"75\":1}}],[\"否则就会引起应用程序崩溃\",{\"1\":{\"75\":1}}],[\"否则就是不合理的\",{\"1\":{\"67\":1}}],[\"否则\",{\"1\":{\"55\":1}}],[\"行级过滤\",{\"1\":{\"166\":1}}],[\"行号信息\",{\"1\":{\"35\":1}}],[\"仅在按组计算聚集时使用\",{\"1\":{\"166\":1}}],[\"仅在从表选择数据时使用\",{\"1\":{\"166\":1}}],[\"仅接着是elf各个段\",{\"1\":{\"24\":1}}],[\"千万不要仅依赖group\",{\"1\":{\"165\":1}}],[\"甚至对于每个联结可以采用不同的联结类型\",{\"1\":{\"184\":1}}],[\"甚至相同的列多次出现\",{\"1\":{\"181\":1}}],[\"甚至非选择的列也可以使用\",{\"1\":{\"165\":1}}],[\"甚至不能调用函数\",{\"1\":{\"88\":1}}],[\"甚至不需要设置页映射关系\",{\"1\":{\"64\":1}}],[\"销售3个产品\",{\"1\":{\"164\":1}}],[\"销售的所有产品价格都在10以下\",{\"1\":{\"164\":1}}],[\"唯一的差别是where过滤行\",{\"1\":{\"164\":1}}],[\"唯一有区别的是目标文件的重定位是目标文件的重定位是在今天链接时完成\",{\"1\":{\"85\":1}}],[\"针对每个分组\",{\"1\":{\"163\":1}}],[\"换句话说\",{\"1\":{\"163\":1,\"186\":1,\"190\":1}}],[\"供应商1001\",{\"1\":{\"164\":1}}],[\"供应商1001有3个产品\",{\"1\":{\"163\":1}}],[\"供应商1002\",{\"1\":{\"164\":1}}],[\"供应商1002有2个产品\",{\"1\":{\"163\":1}}],[\"供应商1003有7个产品\",{\"1\":{\"163\":1}}],[\"问题\",{\"1\":{\"162\":1}}],[\"聚集不同的值\",{\"0\":{\"159\":1}}],[\"聚集函数\",{\"0\":{\"153\":1}}],[\"得出总的订单金额\",{\"1\":{\"158\":1}}],[\"得到有效地址\",{\"1\":{\"56\":1}}],[\"合计每项物品的item\",{\"1\":{\"158\":1}}],[\"合并到输出文件的\",{\"1\":{\"49\":1}}],[\"总计\",{\"1\":{\"158\":1}}],[\"总结\",{\"0\":{\"108\":1}}],[\"功能相反\",{\"1\":{\"157\":1}}],[\"功能与or相当\",{\"1\":{\"126\":1}}],[\"忽略null值\",{\"1\":{\"155\":1}}],[\"求得该列的平均值\",{\"1\":{\"154\":1}}],[\"汇总数据\",{\"0\":{\"152\":1}}],[\"汇编\",{\"0\":{\"9\":1},\"1\":{\"6\":1}}],[\"方法2\",{\"1\":{\"150\":1}}],[\"失败\",{\"1\":{\"150\":1}}],[\"值\",{\"1\":{\"150\":1}}],[\"值得注意的是\",{\"1\":{\"57\":1}}],[\"储\",{\"1\":{\"150\":1}}],[\"比\",{\"1\":{\"150\":1}}],[\"比如用来实现c++全局对象析构之类的操作\",{\"1\":{\"90\":1}}],[\"比如用于保存符号名的字符串表\",{\"1\":{\"84\":1}}],[\"比如共享对象中的c++的全局\",{\"1\":{\"90\":1}}],[\"比如可执行文件有几个段\",{\"1\":{\"86\":1}}],[\"比如是私有变量则不保存\",{\"1\":{\"84\":1}}],[\"比如是否可写\",{\"1\":{\"31\":1}}],[\"比如program1程序依赖于lib\",{\"1\":{\"84\":1}}],[\"比如依赖于那些共享对象\",{\"1\":{\"83\":1}}],[\"比如bar\",{\"1\":{\"80\":1}}],[\"比如一些错误处理函数或者是一些用户很少用到的功能模块等\",{\"1\":{\"80\":1}}],[\"比如一个c函数\",{\"1\":{\"40\":1}}],[\"比如全局符号的数量或者代码的长度等\",{\"1\":{\"77\":1}}],[\"比如第一个地址对应变量b\",{\"1\":{\"77\":1}}],[\"比如其它模块中定义的全局变量\",{\"1\":{\"77\":1}}],[\"比如模块中定义的全局变量\",{\"1\":{\"77\":1}}],[\"比如0x1000到0x2000分配给模块a\",{\"1\":{\"75\":1}}],[\"比如动态链接器就必须读取elf文件头\",{\"1\":{\"69\":1}}],[\"比如seg0和seg1的接壤部分的那个物理页\",{\"1\":{\"69\":1}}],[\"比如simplesection\",{\"1\":{\"39\":2}}],[\"比如上面提到的\",{\"1\":{\"67\":1}}],[\"比如有两个段分别叫\",{\"1\":{\"67\":1}}],[\"比如这个就是代码段\",{\"1\":{\"54\":1}}],[\"比如代码段\",{\"1\":{\"54\":1}}],[\"比如我们假设\",{\"1\":{\"50\":1}}],[\"比如将所有输入文件的\",{\"1\":{\"49\":1}}],[\"比如文件foo\",{\"1\":{\"55\":1}}],[\"比如文件a声明符号\",{\"1\":{\"43\":1}}],[\"比如文件b用到了目标a中的函数\",{\"1\":{\"35\":1}}],[\"比如main\",{\"1\":{\"41\":1}}],[\"比如foo命名空间下的bar变量\",{\"1\":{\"41\":1}}],[\"比如n\",{\"1\":{\"41\":1}}],[\"比如段名\",{\"1\":{\"34\":1}}],[\"比如每个段的段名\",{\"1\":{\"24\":1}}],[\"比如\",{\"1\":{\"7\":1,\"14\":1,\"33\":1,\"50\":1,\"85\":1}}],[\"办\",{\"1\":{\"150\":1}}],[\"么\",{\"1\":{\"150\":1}}],[\"怎\",{\"1\":{\"150\":1}}],[\"间\",{\"1\":{\"150\":1}}],[\"间接跳转到动态链接器中\",{\"1\":{\"80\":1}}],[\"间接的把动态链接器的一个参数压入栈中\",{\"1\":{\"80\":1}}],[\"订单与相应的客户id存储在orders表中\",{\"1\":{\"169\":1}}],[\"订单日期的每个订单\",{\"1\":{\"168\":1}}],[\"订单存储在两个表中\",{\"1\":{\"168\":1}}],[\"订\",{\"1\":{\"150\":1}}],[\"样例表中的值全都具有时间值00\",{\"1\":{\"150\":1}}],[\"给出为2005\",{\"1\":{\"150\":1}}],[\"日期必须为格式yyyy\",{\"1\":{\"150\":1}}],[\"日期和时间处理函数\",{\"0\":{\"150\":1}}],[\"高度灵活的日期运算函数\",{\"1\":{\"150\":1}}],[\"高28位表示符号绑定信息\",{\"1\":{\"37\":1}}],[\"增加一个时间\",{\"1\":{\"150\":1}}],[\"增加一个日期\",{\"1\":{\"150\":1}}],[\"周等\",{\"1\":{\"150\":1}}],[\"天\",{\"1\":{\"150\":2}}],[\"虽然这样做是合法的\",{\"1\":{\"184\":1}}],[\"虽然最终的结果是相同的\",{\"1\":{\"180\":1}}],[\"虽然max\",{\"1\":{\"156\":1}}],[\"虽然其他的日期格式可能也行\",{\"1\":{\"150\":1}}],[\"虽然soundex不是sql概念\",{\"1\":{\"149\":1}}],[\"虽然似乎\",{\"1\":{\"130\":1}}],[\"返回所有数据\",{\"1\":{\"181\":1}}],[\"返回订单号的那一个\",{\"1\":{\"168\":1}}],[\"返回最前面的行\",{\"1\":{\"157\":1}}],[\"返回最后一行\",{\"1\":{\"156\":1}}],[\"返回products表中最便宜物品的价格\",{\"1\":{\"157\":1}}],[\"返回products表中最贵的物品的价格\",{\"1\":{\"156\":1}}],[\"返回指定列中的最大值\",{\"1\":{\"156\":1}}],[\"返回某列值之和\",{\"1\":{\"153\":1}}],[\"返回某列的最小值\",{\"1\":{\"153\":1}}],[\"返回某列的最大值\",{\"1\":{\"153\":1}}],[\"返回某列的行数\",{\"1\":{\"153\":1}}],[\"返回某列的平均值\",{\"1\":{\"153\":1}}],[\"返回圆周率\",{\"1\":{\"151\":1}}],[\"返回除操作的余数\",{\"1\":{\"151\":1}}],[\"返回对应的星期几\",{\"1\":{\"150\":1}}],[\"返回一个角度的正切\",{\"1\":{\"151\":1}}],[\"返回一个角度的正弦\",{\"1\":{\"151\":1}}],[\"返回一个角度的余弦\",{\"1\":{\"151\":1}}],[\"返回一个随机数\",{\"1\":{\"151\":1}}],[\"返回一个数的平方根\",{\"1\":{\"151\":1}}],[\"返回一个数的指数值\",{\"1\":{\"151\":1}}],[\"返回一个数的绝对值\",{\"1\":{\"151\":1}}],[\"返回一个日期时间的时间部分\",{\"1\":{\"150\":1}}],[\"返回一个日期的年份部分\",{\"1\":{\"150\":1}}],[\"返回一个日期的月份部分\",{\"1\":{\"150\":1}}],[\"返回一个日期的天数部分\",{\"1\":{\"150\":1}}],[\"返回一个时间的秒部分\",{\"1\":{\"150\":1}}],[\"返回一个时间的分钟部分\",{\"1\":{\"150\":1}}],[\"返回一个时间的小时部分\",{\"1\":{\"150\":1}}],[\"返回一个格式化的日期或时间串\",{\"1\":{\"150\":1}}],[\"返回日期时间的日期部分\",{\"1\":{\"150\":1}}],[\"返回当前时间\",{\"1\":{\"150\":1}}],[\"返回当前日期和时间\",{\"1\":{\"150\":1}}],[\"返回当前日期\",{\"1\":{\"150\":1}}],[\"返回子串的字符\",{\"1\":{\"149\":1}}],[\"返回串的soundex值\",{\"1\":{\"149\":1}}],[\"返回串的长度\",{\"1\":{\"149\":1}}],[\"返回串右边的字符\",{\"1\":{\"149\":1}}],[\"返回串左边的字符\",{\"1\":{\"149\":1}}],[\"去掉串右边的空格\",{\"1\":{\"149\":1}}],[\"去掉串左边的空格\",{\"1\":{\"149\":1}}],[\"乘\",{\"1\":{\"146\":1}}],[\"减\",{\"1\":{\"146\":1}}],[\"单\",{\"1\":{\"150\":1}}],[\"单价乘以订购数量\",{\"1\":{\"146\":1}}],[\"单引号和双引号都是用于限定字符串的\",{\"1\":{\"118\":1}}],[\"执行算术计算\",{\"0\":{\"146\":1}}],[\"执行指令\",{\"1\":{\"70\":1}}],[\"拼接\",{\"1\":{\"144\":1}}],[\"拼接字段\",{\"0\":{\"144\":1}}],[\"简单的正则表达式测试\",{\"1\":{\"142\":1}}],[\"简单的动态链接例子\",{\"0\":{\"73\":1}}],[\"词的结尾\",{\"1\":{\"142\":1}}],[\"词的开始\",{\"1\":{\"142\":1}}],[\"文本处理函数\",{\"0\":{\"149\":1}}],[\"文本的结尾\",{\"1\":{\"142\":1}}],[\"文本的开始\",{\"1\":{\"142\":1}}],[\"文件地址和属性\",{\"1\":{\"81\":1}}],[\"文件类型\",{\"0\":{\"26\":1},\"1\":{\"26\":1}}],[\"文件机器字节长度\",{\"1\":{\"25\":1}}],[\"文件头同时包括一个段表\",{\"1\":{\"18\":1}}],[\"文件头\",{\"0\":{\"25\":1},\"1\":{\"18\":1}}],[\"定位符\",{\"0\":{\"142\":1}}],[\"定义了两个表之间的关系\",{\"1\":{\"172\":1}}],[\"定义了一个符号来解析u中的一个引用\",{\"1\":{\"55\":1}}],[\"定义在目标文件的全局符号\",{\"1\":{\"35\":1}}],[\"出现4次\",{\"1\":{\"141\":1}}],[\"确定表中行的数目或符合特定条件的行的数目\",{\"1\":{\"155\":1}}],[\"确定got的位置和上面的访问变量a的方法基本一样\",{\"1\":{\"77\":1}}],[\"确切地要求它前面的字符\",{\"1\":{\"141\":1}}],[\"没有where子句\",{\"1\":{\"174\":1}}],[\"没有匹配\",{\"1\":{\"142\":1}}],[\"没有\",{\"1\":{\"141\":1}}],[\"元字符\",{\"1\":{\"141\":1,\"142\":1}}],[\"又不在\",{\"1\":{\"140\":1}}],[\"任意列都可以使用\",{\"1\":{\"165\":1}}],[\"任意十六进制数字\",{\"1\":{\"140\":1}}],[\"任意大写字母\",{\"1\":{\"140\":1}}],[\"任意可打印字符\",{\"1\":{\"140\":1}}],[\"任意小写字母\",{\"1\":{\"140\":1}}],[\"任意数字\",{\"1\":{\"140\":1,\"141\":1}}],[\"任意符\",{\"1\":{\"140\":1}}],[\"任意字母和数字\",{\"1\":{\"140\":1}}],[\"任何具有多个where子句的select语句都可以作为一个组合查询给出\",{\"1\":{\"186\":1}}],[\"任何一条指令与它需要访问的模块内部数据之间的相对位置是固定的\",{\"1\":{\"77\":1}}],[\"任何人以后将不能在同一个程序里面使用模块a和c\",{\"1\":{\"75\":1}}],[\"任何不包含在e中的成员目标文件都简单地被丢弃\",{\"1\":{\"55\":1}}],[\"必须使用right或left关键字指定包括其所有行的表\",{\"1\":{\"182\":1}}],[\"必须使用完全限定列名\",{\"1\":{\"173\":1}}],[\"必须使用多个avg\",{\"1\":{\"154\":1}}],[\"必须使用like操作符\",{\"1\":{\"129\":1}}],[\"必须用\",{\"1\":{\"139\":1}}],[\"此查询要求首先找到生产id为dtntr的物品的供应商\",{\"1\":{\"180\":1}}],[\"此外\",{\"1\":{\"138\":1}}],[\"此时可以给编译选项加上\",{\"1\":{\"57\":1}}],[\"此时\",{\"1\":{\"55\":1}}],[\"此时的指令地址时暂时的\",{\"1\":{\"52\":1}}],[\"集合可用来定义要匹配的一个或多个字符\",{\"1\":{\"138\":1}}],[\"括起来的字符来完成\",{\"1\":{\"137\":1}}],[\"自然联结排除多次出现\",{\"1\":{\"181\":1}}],[\"自然联结\",{\"0\":{\"181\":1}}],[\"自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句\",{\"1\":{\"180\":1}}],[\"自联结\",{\"0\":{\"180\":1}}],[\"自版本3\",{\"1\":{\"135\":1}}],[\"自举代码便可以或得动态链接器本身的重定位表和符号表等\",{\"1\":{\"88\":1}}],[\"自举代码首先会找到它自己的got\",{\"1\":{\"88\":1}}],[\"检索价格不高于5的所有物品\",{\"1\":{\"188\":1}}],[\"检索出的行的数目将是第一个表中的行数乘以第二个表中的行数\",{\"1\":{\"174\":1}}],[\"检索出2005年9月所有订单\",{\"1\":{\"150\":1}}],[\"检索这些客户id的客户信息\",{\"1\":{\"168\":1}}],[\"检索其order\",{\"1\":{\"168\":1}}],[\"检索所订购物品的总数\",{\"1\":{\"158\":1}}],[\"检索列prod\",{\"1\":{\"135\":1}}],[\"检查单个值\",{\"0\":{\"117\":1}}],[\"检查文件的合法性\",{\"1\":{\"81\":1}}],[\"仔细注意通配符的位置\",{\"1\":{\"132\":1}}],[\"匹配连在一起的任意4位数字\",{\"1\":{\"141\":1}}],[\"匹配它前面的任何字符的0次或1次出现\",{\"1\":{\"141\":1}}],[\"匹配stick和sticks会非常困难\",{\"1\":{\"141\":1}}],[\"匹配stick和sticks\",{\"1\":{\"141\":1}}],[\"匹配数目的范围\",{\"1\":{\"141\":1}}],[\"匹配多个实例\",{\"0\":{\"141\":1}}],[\"匹配字符类\",{\"0\":{\"140\":1}}],[\"匹配特殊字符\",{\"0\":{\"139\":1}}],[\"匹配任意数字\",{\"1\":{\"141\":2}}],[\"匹配任意字母字符\",{\"1\":{\"138\":1}}],[\"匹配任何位置包含文本anvil的值\",{\"1\":{\"130\":1}}],[\"匹配范围\",{\"0\":{\"138\":1}}],[\"匹配除这些字符之外的所有字符\",{\"1\":{\"137\":1}}],[\"匹配几个字符之一\",{\"0\":{\"137\":1}}],[\"匹配不区分大小写\",{\"1\":{\"135\":1}}],[\"匹配\",{\"1\":{\"131\":2,\"141\":2,\"142\":1}}],[\"下面的例子返回特定供应商所提供产品的平均价格\",{\"1\":{\"154\":1}}],[\"下面的式子功能上等同于上述数字列表\",{\"1\":{\"138\":1}}],[\"下面的集合将匹配数字0到9\",{\"1\":{\"138\":1}}],[\"下划线的用途与\",{\"1\":{\"131\":1}}],[\"下划线\",{\"0\":{\"131\":1}}],[\"下一条指令\",{\"1\":{\"54\":1}}],[\"但必须是dbms可以隐含地转换的类型\",{\"1\":{\"189\":1}}],[\"但应该在一起测试它们前\",{\"1\":{\"184\":1}}],[\"但使用外部联结也是有效的\",{\"1\":{\"184\":1}}],[\"但有时候会需要包含没有关联行的那些行\",{\"1\":{\"182\":1}}],[\"但有时候处理联结远比处理子查询快得多\",{\"1\":{\"180\":1}}],[\"但有一个例外\",{\"1\":{\"130\":1}}],[\"但输出可能不是分组的顺序\",{\"1\":{\"165\":1}}],[\"但只有一个产品的价格大于等于10\",{\"1\":{\"164\":1}}],[\"但不能是聚集函数\",{\"1\":{\"163\":1}}],[\"但不包括空格\",{\"1\":{\"140\":1}}],[\"但如果需要也可以使用多个列\",{\"1\":{\"168\":1}}],[\"但如果要返回每个供应商提供的产品数目怎么办\",{\"1\":{\"162\":1}}],[\"但如果count\",{\"1\":{\"155\":1}}],[\"但实际中很可能并不总是这样\",{\"1\":{\"150\":1}}],[\"但这是首选的日期格式\",{\"1\":{\"150\":1}}],[\"但mysql允许将它用来返回任意列中的最大值\",{\"1\":{\"156\":1}}],[\"但mysql\",{\"1\":{\"149\":1}}],[\"但下划线只匹配单个字符而不是多个字符\",{\"1\":{\"131\":1}}],[\"但是如果需要\",{\"1\":{\"190\":1}}],[\"但是一般比较常见的算法是广度优先\",{\"1\":{\"89\":1}}],[\"但是由于地址无关代码都是和硬件平台相关的\",{\"1\":{\"77\":1}}],[\"但是不影响我们进行分析\",{\"1\":{\"77\":1}}],[\"但是不同的是\",{\"1\":{\"77\":1}}],[\"但是当你讲bar函数修改为静态成员函数时就是书中想要的结果\",{\"1\":{\"77\":1}}],[\"但是当程序规模很大时仍然会出现明明冲突的问题\",{\"1\":{\"40\":1}}],[\"但是有一个很大的缺点是指令部分无法在多个进程之间共享\",{\"1\":{\"77\":1}}],[\"但是没有使用模块a\",{\"1\":{\"75\":1}}],[\"但是命令行中又发现lib\",{\"1\":{\"73\":1}}],[\"但是对于动态链接来说\",{\"1\":{\"73\":1}}],[\"但是对于动态链接\",{\"1\":{\"73\":1}}],[\"但是和静态链接不同的是\",{\"1\":{\"73\":1}}],[\"但是\",{\"1\":{\"67\":1,\"75\":1,\"120\":1,\"150\":1,\"182\":1}}],[\"但是经过链接合并后\",{\"1\":{\"50\":1}}],[\"但是它在装载时占用地址空间\",{\"1\":{\"49\":1}}],[\"但是这样会有些问题\",{\"1\":{\"48\":1}}],[\"但是只是把elf文件中关键的段显示了出来\",{\"1\":{\"28\":1}}],[\"解决这个问题的一个简单的办法是在搜索模式最后附加一个\",{\"1\":{\"130\":1}}],[\"解释器\",{\"1\":{\"82\":1}}],[\"尾空格可能会干扰通配符匹配\",{\"1\":{\"130\":1}}],[\"搜索起来是最慢的\",{\"1\":{\"132\":1}}],[\"搜索可以是区分大小写的\",{\"1\":{\"130\":1}}],[\"搜索模式\",{\"1\":{\"129\":1}}],[\"根据mysql的配置方式\",{\"1\":{\"130\":1}}],[\"根据objdump反汇编后得到的结果和书中列出的不太一样\",{\"1\":{\"77\":1}}],[\"区分大小写\",{\"1\":{\"130\":1}}],[\"找出供应商1001和1002生产的所有物品\",{\"1\":{\"188\":1}}],[\"找出串的一个子串\",{\"1\":{\"149\":1}}],[\"找出所有以词jet起头的产品\",{\"1\":{\"130\":1}}],[\"找到相应的文件后打开该文件\",{\"1\":{\"89\":1}}],[\"找到相应的符号后进行重定位\",{\"1\":{\"55\":1}}],[\"百分号\",{\"0\":{\"130\":1}}],[\"全都括在圆括号中\",{\"1\":{\"126\":1}}],[\"全局符号表里将包含进程中所有的动态链接所需的符号\",{\"1\":{\"89\":1}}],[\"全局偏移表\",{\"1\":{\"80\":1}}],[\"全局变量往往比较少\",{\"1\":{\"80\":1}}],[\"全局变量和局部静态变量经常存放于数据段\",{\"1\":{\"18\":1}}],[\"范围不一定只是数值的\",{\"1\":{\"138\":1}}],[\"范围不限于完整的集合\",{\"1\":{\"138\":1}}],[\"范围中的每个条件都可以进行匹配\",{\"1\":{\"126\":1}}],[\"范围检查\",{\"0\":{\"119\":1}}],[\"含\",{\"1\":{\"125\":1}}],[\"要检索的行数\",{\"1\":{\"166\":1}}],[\"要返回的列或表达式\",{\"1\":{\"166\":1}}],[\"要求指定列名\",{\"1\":{\"156\":1,\"157\":1}}],[\"要列出价格为10美元\",{\"1\":{\"125\":1}}],[\"要使得代码地址无关\",{\"1\":{\"77\":1}}],[\"组级过滤\",{\"1\":{\"166\":1}}],[\"组合\",{\"1\":{\"188\":1}}],[\"组合相同表的两个查询完成的工作与具有多个where子句条件的单条查询完成的工作相同\",{\"1\":{\"186\":1}}],[\"组合查询和多个where条件\",{\"1\":{\"186\":1}}],[\"组合查询\",{\"0\":{\"185\":1,\"186\":1}}],[\"组合所有查询\",{\"1\":{\"168\":1}}],[\"组合聚集函数\",{\"0\":{\"160\":1}}],[\"组合where语句\",{\"0\":{\"122\":1}}],[\"组装\",{\"1\":{\"12\":1}}],[\"你可能希望返回具有null值的行\",{\"1\":{\"120\":1}}],[\"称其为包含空值null\",{\"1\":{\"120\":1}}],[\"称目标文件b引用\",{\"1\":{\"35\":1}}],[\"表达式或聚集函数\",{\"1\":{\"189\":1}}],[\"表设计人员可以指定其中的列是否可以不包含值\",{\"1\":{\"120\":1}}],[\"表示查找\",{\"1\":{\"139\":2}}],[\"表示任何字符出现任意次数\",{\"1\":{\"130\":1}}],[\"表示链接器在当前路径寻址共享对象\",{\"1\":{\"89\":1}}],[\"表示代码段的重定位表\",{\"1\":{\"85\":1}}],[\"表示生成位置无关代码\",{\"1\":{\"73\":1}}],[\"表示产生共享对象\",{\"1\":{\"73\":1}}],[\"表示vma对应的segment在可执行文件中的偏移\",{\"1\":{\"68\":1}}],[\"表示共享\",{\"1\":{\"68\":1}}],[\"表示私有\",{\"1\":{\"68\":1}}],[\"表示可执行\",{\"1\":{\"68\":1}}],[\"表示可写\",{\"1\":{\"68\":1}}],[\"表示可读\",{\"1\":{\"68\":1}}],[\"表示该入口在要被重定位段中的位置\",{\"1\":{\"54\":1}}],[\"表示它作用于那个段\",{\"1\":{\"33\":1}}],[\"表示符号表的下标\",{\"1\":{\"33\":1}}],[\"空格和制表\",{\"1\":{\"140\":1}}],[\"空值检查\",{\"0\":{\"120\":1}}],[\"空间使用率只有58\",{\"1\":{\"69\":1}}],[\"空间与地址分配\",{\"0\":{\"47\":1},\"1\":{\"49\":1}}],[\"效果一样\",{\"1\":{\"119\":1}}],[\"小于等于\",{\"1\":{\"116\":1}}],[\"小于\",{\"1\":{\"116\":1}}],[\"说明\",{\"1\":{\"116\":1,\"140\":1,\"141\":1,\"142\":1,\"146\":1,\"149\":1,\"150\":1,\"151\":1,\"153\":1,\"166\":1}}],[\"操作符\",{\"1\":{\"116\":1,\"146\":1}}],[\"操作系统在对可执行文件进行加载时==\",{\"1\":{\"82\":1}}],[\"操作系统在加载完动态链接器后\",{\"1\":{\"81\":1}}],[\"操作系统在某个特定的地址划分出一些地址块\",{\"1\":{\"75\":1}}],[\"操作系统统一通过映射的方式将它加载到进程的地址空间中\",{\"1\":{\"81\":1}}],[\"操作系统会先启动一个动态链接器\",{\"1\":{\"81\":1}}],[\"操作系统还不能在装载完可执行文件之后就把控制权交给可执行文件\",{\"1\":{\"81\":1}}],[\"操作系统接着就可以把控制权交给可执行文件的入口地址\",{\"1\":{\"81\":1}}],[\"操作系统通过给进程空间划出一个个vma来管理进程的虚拟空间\",{\"1\":{\"68\":1}}],[\"操作系统处理页错误时\",{\"1\":{\"65\":1}}],[\"操作系统只是通过可执行文件头部的信息建立起可执行文件和进程虚拟内存之间的映射关系\",{\"1\":{\"65\":1}}],[\"操作系统创建进程后\",{\"1\":{\"64\":1}}],[\"操作系统将从物理内存中分配一个物理页\",{\"1\":{\"64\":1}}],[\"过滤count\",{\"1\":{\"164\":1}}],[\"过滤分组\",{\"0\":{\"164\":1}}],[\"过滤数据\",{\"0\":{\"114\":1}}],[\"过程链接表\",{\"1\":{\"80\":1}}],[\"过程\",{\"1\":{\"64\":1}}],[\"应该试一下这两种技术\",{\"1\":{\"186\":1}}],[\"应该试一下两种方法\",{\"1\":{\"180\":1}}],[\"应该总是提供联结条件\",{\"1\":{\"184\":1}}],[\"应该使用right\",{\"1\":{\"182\":1}}],[\"应该使用其他操作符\",{\"1\":{\"132\":1}}],[\"应该至少有一个列出现在不止一个表中\",{\"1\":{\"181\":1}}],[\"应该保证select语句具有与where子句中相同数目的列\",{\"1\":{\"168\":1}}],[\"应该保证它位于from子句之后\",{\"1\":{\"113\":1}}],[\"应该也给出order\",{\"1\":{\"165\":1}}],[\"应该让order\",{\"1\":{\"115\":1}}],[\"应当知道所需的页在可执行文件中的那一个位置\",{\"1\":{\"64\":1}}],[\"升序\",{\"1\":{\"112\":1}}],[\"降序\",{\"1\":{\"112\":1}}],[\"排序产生的输出\",{\"1\":{\"165\":1}}],[\"排序数据\",{\"0\":{\"110\":1}}],[\"排序查询数据\",{\"0\":{\"109\":1}}],[\"关系表\",{\"0\":{\"172\":1}}],[\"关于order\",{\"1\":{\"115\":1}}],[\"关于地址和空间的两个含义\",{\"1\":{\"49\":1}}],[\"关键字\",{\"1\":{\"105\":1,\"106\":1}}],[\"查找由供应商1003或者1002制造的所有产品的价格和名称\",{\"1\":{\"124\":1}}],[\"查找由供应商1003制造并且价格小于10$的所有产品的价格和名称\",{\"1\":{\"123\":1}}],[\"查找所有价格在5$到10$之间的所有产品\",{\"1\":{\"119\":1}}],[\"查找所有vend\",{\"1\":{\"118\":1}}],[\"查找prod\",{\"1\":{\"117\":1}}],[\"查询具有订单20005和20007的客户id\",{\"1\":{\"168\":1}}],[\"查询不同的行\",{\"0\":{\"105\":1}}],[\"查询所有列\",{\"0\":{\"104\":1}}],[\"查询多个列\",{\"0\":{\"103\":1}}],[\"查询单个列\",{\"0\":{\"102\":1}}],[\"查询数据\",{\"0\":{\"101\":1}}],[\"查看服务器状态信息\",{\"1\":{\"100\":1}}],[\"查看表结构\",{\"1\":{\"100\":1}}],[\"查看表\",{\"1\":{\"100\":1}}],[\"查看数据库\",{\"1\":{\"100\":1}}],[\"查看进程的映射信息\",{\"1\":{\"89\":1}}],[\"查看动态链接时重定位项\",{\"1\":{\"77\":1}}],[\"查看got位置\",{\"1\":{\"77\":1}}],[\"查看可执行文件的堆栈\",{\"1\":{\"68\":1}}],[\"选择数据库\",{\"0\":{\"99\":1}}],[\"端口\",{\"1\":{\"98\":1}}],[\"主键\",{\"1\":{\"172\":1}}],[\"主机名\",{\"1\":{\"98\":1}}],[\"主要原因是内存对齐\",{\"1\":{\"48\":1}}],[\"主要决定段的属性的是段的类型\",{\"1\":{\"30\":1}}],[\"~\",{\"1\":{\"98\":1}}],[\"连接\",{\"0\":{\"97\":1}}],[\"连接器在完成第一步的虚拟内存分配后就可以确定所有符号的虚拟地址了\",{\"1\":{\"52\":1}}],[\"连接器通过给每个符号加上一个偏移量\",{\"1\":{\"50\":1}}],[\"连接器默认其为0\",{\"1\":{\"44\":1}}],[\"连接器按如下规则处理与选择被多次定义的全局符号\",{\"1\":{\"43\":1}}],[\"取而代之执行自己的代码\",{\"1\":{\"91\":1}}],[\"先在当前目录中查找malloc\",{\"1\":{\"92\":1}}],[\"先将它们全部重定位\",{\"1\":{\"88\":1}}],[\"先查找\",{\"1\":{\"85\":1}}],[\"启动动态链接器本身\",{\"1\":{\"87\":1}}],[\"启动运行\",{\"1\":{\"64\":1}}],[\"辅助信息结构\",{\"1\":{\"86\":1}}],[\"事实上\",{\"1\":{\"86\":1,\"181\":1,\"190\":1}}],[\"保证使用正确的联结条件\",{\"1\":{\"184\":1}}],[\"保存在进程的堆栈里面\",{\"1\":{\"86\":1}}],[\"保留所有的\",{\"1\":{\"7\":1}}],[\"站在动态链接器的角度看\",{\"1\":{\"86\":1}}],[\"才是正确的结果\",{\"1\":{\"85\":1}}],[\"位于libc\",{\"1\":{\"85\":1}}],[\"位于elf文件头后所以elf文件头的大小正好为代码段的偏移0x40\",{\"1\":{\"29\":1}}],[\"前三项被系统占据\",{\"1\":{\"85\":1}}],[\"实际的客户信息存储在customers表中\",{\"1\":{\"168\":1}}],[\"实际是从第6行开始返回5行数据\",{\"1\":{\"106\":1}}],[\"实际上动态链接器的自举代码中\",{\"1\":{\"88\":1}}],[\"实际上是对数据引用的修正\",{\"1\":{\"85\":1}}],[\"实际汇编得到的结果是使用了共享对象全局符号介入\",{\"1\":{\"77\":1}}],[\"他们分别相当于\",{\"1\":{\"85\":1}}],[\"他们需要被正确决议\",{\"1\":{\"44\":1}}],[\"往往还有辅助的符号哈希表\",{\"1\":{\"84\":1}}],[\"今天链接时叫做字符串表==\",{\"1\":{\"84\":1}}],[\"类\",{\"1\":{\"140\":1}}],[\"类似\",{\"1\":{\"84\":1}}],[\"类型不必完全相同\",{\"1\":{\"189\":1}}],[\"类型四\",{\"1\":{\"77\":1}}],[\"类型三\",{\"1\":{\"77\":1}}],[\"类型二\",{\"1\":{\"77\":1}}],[\"类型一\",{\"1\":{\"77\":1}}],[\"类型的重定位入口\",{\"1\":{\"79\":1}}],[\"类型的segment\",{\"1\":{\"67\":1}}],[\"类型的\",{\"1\":{\"39\":1,\"67\":1}}],[\"两个以上的订单\",{\"1\":{\"164\":1}}],[\"两个以上的or条件\",{\"1\":{\"136\":1}}],[\"两个表之间的关系是from子句的组成部分\",{\"1\":{\"175\":1}}],[\"两个表\",{\"1\":{\"84\":1}}],[\"两步链接\",{\"1\":{\"49\":1}}],[\"很可能我们永远都不会用到不是自然联结的内部联结\",{\"1\":{\"181\":1}}],[\"很多时候动态链接的模块同时拥有\",{\"1\":{\"84\":1}}],[\"很明显\",{\"1\":{\"77\":1}}],[\"与内部联结关联两个表中的行不同的是\",{\"1\":{\"182\":1}}],[\"与max\",{\"1\":{\"157\":1}}],[\"与jetpack\",{\"1\":{\"130\":1}}],[\"与数值列进行比较的值不用引号\",{\"1\":{\"118\":1}}],[\"与\",{\"1\":{\"84\":1,\"140\":1}}],[\"与可执行文件一样\",{\"1\":{\"81\":1}}],[\"导致为什么模块内部调用非\",{\"1\":{\"89\":1}}],[\"导出函数\",{\"1\":{\"84\":1}}],[\"导入函数\",{\"1\":{\"84\":1}}],[\"导入\",{\"1\":{\"84\":1}}],[\"引用了里面的printf\",{\"1\":{\"84\":1}}],[\"里面保存了所有关于该目标文件的符号的定义和引用\",{\"1\":{\"84\":1}}],[\"里面保持的就是一个字符串\",{\"1\":{\"82\":1}}],[\"结束代码地址\",{\"1\":{\"83\":1}}],[\"结尾\",{\"1\":{\"41\":1}}],[\"本章开始时说过\",{\"1\":{\"190\":1}}],[\"本共享对象的\",{\"1\":{\"83\":1}}],[\"本来需要5个物理页的现在只需要3个物理页\",{\"1\":{\"69\":1}}],[\"内部联结\",{\"0\":{\"175\":1},\"1\":{\"181\":1,\"182\":1}}],[\"内容\",{\"1\":{\"82\":1}}],[\"内存空间得到了充分利用\",{\"1\":{\"69\":1}}],[\"内存共享比如libc的动态链接库\",{\"1\":{\"18\":1}}],[\"便开始一系列自身的初始化操作\",{\"1\":{\"81\":1}}],[\"首先需要注意的是mysql使用的日期格式\",{\"1\":{\"150\":1}}],[\"首先动态链接器本身不可以依赖于其它任何共享对象\",{\"1\":{\"88\":1}}],[\"首先操作系统会读取可执行文件的头部\",{\"1\":{\"81\":1}}],[\"首先将控制权交给动态链接器\",{\"1\":{\"73\":1}}],[\"控制传递到plt\",{\"1\":{\"80\":1}}],[\"后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较\",{\"1\":{\"129\":1}}],[\"后续再调用addvec时的控制流\",{\"1\":{\"80\":1}}],[\"后面跟一个0\",{\"1\":{\"70\":1}}],[\"后面四个字节就是被调用函数的相对于调用指令的下一条指令的偏移量\",{\"1\":{\"52\":1}}],[\"后面四字节就是该指令的下一条指令的偏移量\",{\"1\":{\"52\":1}}],[\"后面\",{\"1\":{\"41\":1}}],[\"后面紧跟一个0表示结束\",{\"1\":{\"70\":1}}],[\"后面紧跟\",{\"1\":{\"41\":1}}],[\"压入栈中之后\",{\"1\":{\"80\":1}}],[\"进行转译\",{\"1\":{\"139\":1}}],[\"进行or匹配\",{\"0\":{\"136\":1}}],[\"进行间接跳转\",{\"1\":{\"80\":1}}],[\"进程初始化时\",{\"1\":{\"86\":1}}],[\"进程栈初始化\",{\"0\":{\"70\":1}}],[\"进程虚拟空间分布\",{\"0\":{\"66\":1}}],[\"进程从刚才页错误的位置重新开始执行\",{\"1\":{\"65\":1}}],[\"进程建立完成后\",{\"1\":{\"65\":1}}],[\"进程的建立\",{\"0\":{\"64\":1}}],[\"延迟解析它的运行时地址\",{\"1\":{\"80\":1}}],[\"延迟绑定实现\",{\"1\":{\"80\":1}}],[\"延迟绑定\",{\"0\":{\"80\":1},\"1\":{\"77\":1,\"80\":1}}],[\"用自联结而不用子查询\",{\"1\":{\"180\":1}}],[\"用一个点分隔的表名和列名\",{\"1\":{\"173\":1}}],[\"用count\",{\"1\":{\"163\":1}}],[\"用正则表达式进行搜索\",{\"0\":{\"133\":1}}],[\"用来返回指定列值的和\",{\"1\":{\"158\":1}}],[\"用来匹配值的一部分的特殊字符\",{\"1\":{\"129\":1}}],[\"用来显示服务器错误或警告消息\",{\"1\":{\"100\":1}}],[\"用来显示授予用户的安全权限\",{\"1\":{\"100\":1}}],[\"用通配符进行过滤\",{\"0\":{\"128\":1}}],[\"用户密码\",{\"1\":{\"98\":1}}],[\"用户名\",{\"1\":{\"98\":1}}],[\"用以实现共享对象特有的初始化过程\",{\"1\":{\"90\":1}}],[\"用这个地址重新got\",{\"1\":{\"80\":1}}],[\"用plt和got调用外部函数\",{\"1\":{\"80\":1}}],[\"用于解决上述问题\",{\"1\":{\"79\":1}}],[\"ylee\",{\"1\":{\"181\":2}}],[\"yosemite\",{\"1\":{\"168\":2,\"169\":1,\"178\":1,\"183\":1}}],[\"your\",{\"1\":{\"98\":1}}],[\"year\",{\"1\":{\"150\":2}}],[\"yes\",{\"1\":{\"100\":14}}],[\"y\",{\"1\":{\"80\":2,\"149\":3,\"168\":4,\"178\":2,\"181\":2}}],[\"ymbol\",{\"1\":{\"77\":1}}],[\"初始化代码地址\",{\"1\":{\"83\":1}}],[\"初始化为0的全局变量和局部静态变量\",{\"1\":{\"18\":1,\"22\":1}}],[\"初始时每个got条目都指向对应plt条目的第二条指令\",{\"1\":{\"80\":1}}],[\"开始对可执行文件进行动态链接工作\",{\"1\":{\"81\":1}}],[\"开始的条目调用用户代码调用的函数\",{\"1\":{\"80\":1}}],[\"开头\",{\"1\":{\"41\":1}}],[\"哪个函数\",{\"1\":{\"80\":1}}],[\"时一个特殊条目\",{\"1\":{\"80\":1}}],[\"时\",{\"1\":{\"80\":1,\"130\":1,\"150\":2}}],[\"无论何时对表进行联结\",{\"1\":{\"181\":1}}],[\"无法根据这个上下文判断global是定义在同一个模块的其它目标文件还是定义在另一个模块当中\",{\"1\":{\"78\":1}}],[\"无映像文件\",{\"1\":{\"68\":2}}],[\"绝大多数情况下都使用\",{\"1\":{\"77\":1}}],[\"跳转到plt\",{\"1\":{\"80\":1}}],[\"跳转的一种优化\",{\"1\":{\"77\":1}}],[\"跳转\",{\"1\":{\"77\":2}}],[\"跳转等\",{\"1\":{\"77\":2}}],[\"观察函数bar\",{\"1\":{\"77\":1}}],[\"观察到4个共享对象a1\",{\"1\":{\"89\":1}}],[\"观察到调用ext\",{\"1\":{\"77\":1}}],[\"观察到变量b的地址需要重定位\",{\"1\":{\"77\":1}}],[\"观察到整个虚拟地址空间中\",{\"1\":{\"73\":1}}],[\"观察到进程中10个vma中只有前五个是映射到可执行文件中的两个segment\",{\"1\":{\"68\":1}}],[\"基本字符匹配\",{\"0\":{\"135\":1}}],[\"基本的思想是把和地址相关的部分放到数据段里面\",{\"1\":{\"77\":1}}],[\"基本原则是将相同权限属性的\",{\"1\":{\"68\":1}}],[\"加\",{\"1\":{\"146\":1}}],[\"加上固定的偏移量就可以访问模块内部数据了\",{\"1\":{\"77\":1}}],[\"加载地址\",{\"1\":{\"49\":1}}],[\"或复合查询\",{\"1\":{\"186\":1}}],[\"或表达式\",{\"1\":{\"165\":1}}],[\"或返回提供10个以上产品的供应商怎么办\",{\"1\":{\"162\":1}}],[\"或1\",{\"1\":{\"142\":1}}],[\"或任意数字为串中第一个字符时才匹配它们\",{\"1\":{\"142\":1}}],[\"或共享对象\",{\"1\":{\"89\":1}}],[\"或\",{\"1\":{\"77\":1}}],[\"或许是书中的纰漏吧\",{\"1\":{\"77\":1}}],[\"或者返回只提供单项产品的供应商所提供的产品\",{\"1\":{\"162\":1}}],[\"或者为另一个串\",{\"1\":{\"136\":1}}],[\"或者为这个串\",{\"1\":{\"136\":1}}],[\"或者是基于寄存器的相对调用\",{\"1\":{\"77\":1}}],[\"或者是一个特殊的值\",{\"1\":{\"44\":1}}],[\"或者多个模块被多个程序使用呢\",{\"1\":{\"75\":1}}],[\"或者写成\",{\"1\":{\"42\":1}}],[\"或者对于有些特殊符号\",{\"1\":{\"38\":1}}],[\"或者段\",{\"1\":{\"18\":1}}],[\"或者中间目标文件\",{\"1\":{\"9\":1}}],[\"或者\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"40\":1,\"113\":1}}],[\"join从from子句的左边表\",{\"1\":{\"182\":1}}],[\"join左边的表\",{\"1\":{\"182\":1}}],[\"join右边的表\",{\"1\":{\"182\":1}}],[\"join语法时\",{\"1\":{\"182\":1}}],[\"join来指定联结的类型\",{\"1\":{\"182\":1}}],[\"join\",{\"1\":{\"175\":2,\"182\":3,\"183\":1}}],[\"join指定\",{\"1\":{\"175\":1}}],[\"jouets\",{\"1\":{\"139\":1,\"144\":2,\"145\":1,\"149\":2,\"174\":14}}],[\"jet\",{\"1\":{\"130\":2,\"139\":1,\"144\":2,\"145\":1,\"149\":2,\"173\":2,\"174\":14,\"175\":4}}],[\"jetpack\",{\"1\":{\"102\":2,\"103\":2,\"104\":4,\"106\":2,\"107\":4,\"110\":2,\"111\":2,\"112\":4,\"113\":2,\"118\":2,\"127\":4,\"130\":2,\"135\":4,\"136\":2,\"141\":2,\"164\":4,\"173\":2,\"174\":12,\"175\":4}}],[\"jp2000\",{\"1\":{\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"113\":2,\"130\":1,\"164\":1}}],[\"jp1000\",{\"1\":{\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"130\":1,\"164\":1}}],[\"jump\",{\"1\":{\"85\":4}}],[\"jmprel\",{\"1\":{\"83\":1}}],[\"jmp\",{\"1\":{\"77\":3,\"80\":1}}],[\"jne\",{\"1\":{\"52\":1,\"53\":1}}],[\"模块间的函数调用都没有进行绑定\",{\"1\":{\"80\":1}}],[\"模块间变量访问\",{\"1\":{\"78\":1}}],[\"模块间调用\",{\"1\":{\"77\":2}}],[\"模块间数据访问\",{\"1\":{\"77\":2}}],[\"模块在编译时可以确定模块内部变量相对于当前指令的偏移\",{\"1\":{\"77\":1}}],[\"模块外部函数调用\",{\"1\":{\"77\":2}}],[\"模块外部数据访问\",{\"1\":{\"77\":2}}],[\"模块外部的数据访问\",{\"1\":{\"77\":1}}],[\"模块外部的函数调用\",{\"1\":{\"77\":1}}],[\"模块内部调用或跳转\",{\"1\":{\"77\":1}}],[\"模块内部函数调用\",{\"1\":{\"77\":2}}],[\"模块内部数据访问\",{\"1\":{\"77\":3}}],[\"模块内部的跳转\",{\"1\":{\"77\":1}}],[\"模块内部的数据访问\",{\"1\":{\"77\":1}}],[\"模块内部的函数调用\",{\"1\":{\"77\":1}}],[\"模块内部引用和模块外部引用\",{\"1\":{\"77\":1}}],[\"按单个查询返回数据\",{\"1\":{\"186\":1}}],[\"按多个列排序\",{\"0\":{\"111\":1}}],[\"按照不同的引用方式又分为\",{\"1\":{\"77\":1}}],[\"按序叠加内存分配\",{\"1\":{\"48\":1}}],[\"按序叠加\",{\"0\":{\"48\":1}}],[\"余数分配给了另一个模块c\",{\"1\":{\"75\":1}}],[\"例如\",{\"1\":{\"85\":1,\"130\":1,\"136\":1,\"138\":1,\"182\":1,\"189\":1}}],[\"例如printf这个重定位入口\",{\"1\":{\"85\":1}}],[\"例如函数bar中的一段反汇编代码\",{\"1\":{\"77\":1}}],[\"例如程序program1使用了模块b\",{\"1\":{\"75\":1}}],[\"例如a和b链接后\",{\"1\":{\"14\":1}}],[\"固定装载地址的困扰\",{\"0\":{\"75\":1}}],[\"动态符号表也需要一些辅助表\",{\"1\":{\"84\":1}}],[\"动态符号表\",{\"0\":{\"84\":1},\"1\":{\"84\":1}}],[\"动态重定位表入口函数\",{\"1\":{\"83\":1}}],[\"动态的分配一块足够大小的地址空间给相应的共享对象\",{\"1\":{\"73\":1}}],[\"动态链接时进程堆栈初始化信息\",{\"0\":{\"86\":1}}],[\"动态链接重定位相关结构\",{\"1\":{\"85\":1}}],[\"动态链接重定位表\",{\"0\":{\"85\":1}}],[\"动态链接重定位表地址\",{\"1\":{\"83\":1}}],[\"动态链接重定位表的位置\",{\"1\":{\"83\":1}}],[\"动态链接的步骤\",{\"1\":{\"87\":1}}],[\"动态链接的步骤和实现\",{\"0\":{\"87\":1}}],[\"动态链接的文件中\",{\"1\":{\"85\":1}}],[\"动态链接的符号表示和静态链接十分相似\",{\"1\":{\"84\":1}}],[\"动态链接的链接工作在运行时完成\",{\"1\":{\"80\":1}}],[\"动态链接共享对象搜索路径\",{\"1\":{\"83\":1}}],[\"动态链接哈希表地址\",{\"1\":{\"83\":1}}],[\"动态链接字符串表大小\",{\"1\":{\"83\":1}}],[\"动态链接字符串表地址\",{\"1\":{\"83\":1}}],[\"动态链接符号表的地址\",{\"1\":{\"83\":1}}],[\"动态链接符号表的位置\",{\"1\":{\"83\":1}}],[\"动态链接elf中最重要的结构\",{\"1\":{\"83\":1}}],[\"动态链接去的位置既不是由系统配置指定\",{\"1\":{\"82\":1}}],[\"动态链接情况下\",{\"1\":{\"81\":1}}],[\"动态链接相关结构\",{\"0\":{\"81\":1}}],[\"动态链接会耗费不少时间用于解决模块之间的函数引用的符号查找和重定位\",{\"1\":{\"80\":1}}],[\"动态链接器将可执行文件和链接器本身的符号表都合并到一个符号表中\",{\"1\":{\"89\":1}}],[\"动态链接器代码中才可以开始使用自己的全局变量和静态变量\",{\"1\":{\"88\":1}}],[\"动态链接器的自举代码开始执行\",{\"1\":{\"88\":1}}],[\"动态链接器入口地址即是自举代码入口\",{\"1\":{\"88\":1}}],[\"动态链接器必须在启动时有一段非常精巧的代码可以完成这项艰巨的工作而同时又不能使用全局和静态变量\",{\"1\":{\"88\":1}}],[\"动态链接器本身也是一个共享对象\",{\"1\":{\"88\":1}}],[\"动态链接器自举\",{\"0\":{\"88\":1}}],[\"动态链接器会将控制权交给可执行文件的入口地址\",{\"1\":{\"81\":1}}],[\"动态链接器会寻找斌装载所需要的共享对象\",{\"1\":{\"80\":1}}],[\"动态链接器ld\",{\"1\":{\"81\":1}}],[\"动态链接器使用两个栈条目来确定addvec的运行时位置\",{\"1\":{\"80\":1}}],[\"动态链接器解析它的地址\",{\"1\":{\"80\":1}}],[\"动态链接器都要进行一次链接工作\",{\"1\":{\"80\":1}}],[\"动态链接器和普通共享对象一样被映射到进程的地址空间\",{\"1\":{\"73\":1}}],[\"动态链接下对于全局和静态的数据访问都要进行复杂的got定位\",{\"1\":{\"80\":1}}],[\"动态链接库比静态链接慢的主要原因\",{\"1\":{\"80\":1}}],[\"动态链接模块被装载至虚拟空间后\",{\"1\":{\"76\":1}}],[\"动态链接模块的装载地址是从地址0x0000000000000000开始的\",{\"1\":{\"73\":1}}],[\"动态链接程序运行时地址空间分布\",{\"1\":{\"73\":1}}],[\"动态链接过程\",{\"1\":{\"73\":1}}],[\"动态链接\",{\"0\":{\"71\":1},\"1\":{\"32\":1}}],[\"共享库中还可能有\",{\"1\":{\"90\":1}}],[\"共享对象的地址是从0开始的\",{\"1\":{\"85\":1}}],[\"共享对象的数据段没有办法做到地址无关的\",{\"1\":{\"85\":1}}],[\"共享对象的重定位与静态链接的目标文件的重定位十分类似\",{\"1\":{\"85\":1}}],[\"共享对象的最终装载地址在编译时是不确定的\",{\"1\":{\"73\":1}}],[\"共享对象初始化代码的地址等\",{\"1\":{\"83\":1}}],[\"共享对象也有入口地址\",{\"1\":{\"81\":1}}],[\"共享模块的全局变量问题\",{\"0\":{\"78\":1}}],[\"共享目标文件\",{\"1\":{\"17\":1}}],[\"我们假设该静态变量a相对于起始地址0的偏移为b\",{\"1\":{\"85\":1}}],[\"我们假设这个函数叫做lookup\",{\"1\":{\"80\":1}}],[\"我们必须在装载时将其重定位\",{\"1\":{\"85\":1}}],[\"我们需要在程序运行时查找符号\",{\"1\":{\"84\":1}}],[\"我们称为全局符号表\",{\"1\":{\"89\":1}}],[\"我们称lib\",{\"1\":{\"84\":1}}],[\"我们称program1\",{\"1\":{\"84\":1}}],[\"我们知道在静态链接中\",{\"1\":{\"84\":1}}],[\"我们知道这个地址是无效地址\",{\"1\":{\"73\":1}}],[\"我们这里的lookup\",{\"1\":{\"80\":1}}],[\"我们可以选择装载时重定位的方法来解决数据段中绝对地址引用问题\",{\"1\":{\"79\":1}}],[\"我们可以手工指定各个模块的地址\",{\"1\":{\"75\":1}}],[\"我们设想是否可以让共享对象在任意地址加载\",{\"1\":{\"75\":1}}],[\"我们首先会遇到的问题是共享对象地址冲突问题\",{\"1\":{\"75\":1}}],[\"我们只关心\",{\"1\":{\"67\":1}}],[\"我们只关心其中两种最基本的重定位类型\",{\"1\":{\"56\":1}}],[\"多数情况下\",{\"1\":{\"186\":1}}],[\"多数sql查询都只包含从一个或多个表中返回数据的单条select语句\",{\"1\":{\"186\":1}}],[\"多条select语句\",{\"1\":{\"186\":1}}],[\"多出了几个文件的映射\",{\"1\":{\"73\":1}}],[\"多余\",{\"1\":{\"67\":1}}],[\"kill\",{\"1\":{\"73\":1}}],[\"key\",{\"1\":{\"28\":1,\"67\":1,\"100\":2,\"172\":2}}],[\"还知道下\",{\"1\":{\"150\":1}}],[\"还要对符号\",{\"1\":{\"93\":1}}],[\"还是非空值\",{\"1\":{\"155\":1}}],[\"还是会产生跨模块代码\",{\"1\":{\"78\":1}}],[\"还是用到了动态链接形式的c语言运行时库\",{\"1\":{\"73\":1}}],[\"还有一点不同的是\",{\"1\":{\"73\":1}}],[\"还有linux下的动态链接器\",{\"1\":{\"73\":1}}],[\"还有它所依赖的共享目标文件\",{\"1\":{\"73\":1}}],[\"还存在其它几种不常用的符号\",{\"1\":{\"35\":1}}],[\"整个进程只有可执行文件需要被映射\",{\"1\":{\"73\":1}}],[\"整个链接的过程基于符号才能正确完成\",{\"1\":{\"35\":1}}],[\"把第一个查询\",{\"1\":{\"168\":1}}],[\"把通配符置于搜索模式的开始处\",{\"1\":{\"132\":1}}],[\"把对符号f的引用解析成\",{\"1\":{\"93\":1}}],[\"把地址0x2000到0x3000分配给模块b\",{\"1\":{\"75\":1}}],[\"把lib\",{\"1\":{\"73\":1}}],[\"把这个过程保留到装载时进行\",{\"1\":{\"73\":1}}],[\"把链接的过程推迟到运行时进行\",{\"1\":{\"72\":1}}],[\"把它们合并到一起当作一个段进行映射\",{\"1\":{\"67\":1}}],[\"紧接的就是指向这两个参数字符串的指针\",{\"1\":{\"70\":1}}],[\"指定的所有列都一起计算\",{\"1\":{\"163\":1}}],[\"指定distinct参数\",{\"1\":{\"159\":1}}],[\"指定all参数或不给参数\",{\"1\":{\"159\":1}}],[\"指定数目的匹配\",{\"1\":{\"141\":1}}],[\"指定排序方向\",{\"0\":{\"112\":1}}],[\"指令引用和数据访问\",{\"1\":{\"77\":1}}],[\"指令部分是在多个进程之间共享的\",{\"1\":{\"76\":1}}],[\"指令修正方式\",{\"0\":{\"56\":1}}],[\"指向的位置是初始化以后堆栈的顶部\",{\"1\":{\"70\":1}}],[\"栈指针寄存器esp\",{\"1\":{\"70\":1}}],[\"栈vma\",{\"1\":{\"68\":1}}],[\"物理页多次映射\",{\"1\":{\"69\":1}}],[\"物理页普通映射\",{\"1\":{\"69\":1}}],[\"另一种写法\",{\"1\":{\"127\":1}}],[\"另一份seg1\",{\"1\":{\"69\":1}}],[\"另外三个所在的设备号和次设备号以及文件节点都是0\",{\"1\":{\"68\":1}}],[\"另外值得注意的是可能有些编译器并不是将弱符号使用common块\",{\"1\":{\"57\":1}}],[\"系统将它们映射两份到虚拟地址空间\",{\"1\":{\"69\":1}}],[\"权限\",{\"1\":{\"69\":1}}],[\"偏移\",{\"1\":{\"69\":1}}],[\"长度\",{\"1\":{\"69\":1}}],[\"匿名\",{\"1\":{\"68\":2}}],[\"代码vma\",{\"1\":{\"68\":1}}],[\"代码段结束地址\",{\"1\":{\"40\":1}}],[\"代码段\",{\"0\":{\"20\":1},\"1\":{\"29\":1}}],[\"堆栈里面还保存了动态链接器所需要的一些辅助信息数组\",{\"1\":{\"86\":1}}],[\"堆栈里面保存了关于进程执行环境和命令行参数等信息\",{\"1\":{\"86\":1}}],[\"堆栈提示段\",{\"1\":{\"19\":1}}],[\"堆vma\",{\"1\":{\"68\":1}}],[\"堆和栈\",{\"0\":{\"68\":1}}],[\"来定义一个范围\",{\"1\":{\"138\":1}}],[\"来定义任何一个强符号为弱符号\",{\"1\":{\"43\":1}}],[\"来初始化\",{\"1\":{\"90\":1}}],[\"来说\",{\"1\":{\"67\":1}}],[\"描述\",{\"1\":{\"67\":1}}],[\"描述了整个文件的文件属性\",{\"1\":{\"18\":1}}],[\"属性的结构叫做段表\",{\"1\":{\"67\":1}}],[\"属性和位置\",{\"1\":{\"49\":1}}],[\"正则表达式\",{\"1\":{\"137\":1}}],[\"正好对应通过指令计算出的偏移量0x114e\",{\"1\":{\"77\":1}}],[\"正如描述\",{\"1\":{\"67\":1}}],[\"正确的\",{\"1\":{\"55\":2}}],[\"计算平均销售规模\",{\"1\":{\"182\":1}}],[\"计算两个日期之差\",{\"1\":{\"150\":1}}],[\"计算次序\",{\"0\":{\"125\":1}}],[\"计算出相应的页面在可执行文件中的偏移\",{\"1\":{\"65\":1}}],[\"计算输出文件中各个段合并后的长度和位置\",{\"1\":{\"49\":1}}],[\"会打印出两个a1\",{\"1\":{\"89\":1}}],[\"会去寻址装载该可执行文件所需要相应的动态链接器\",{\"1\":{\"82\":1}}],[\"会发现对应页面是一个空页面\",{\"1\":{\"65\":1}}],[\"会在进程相应的数据结构中设置一个\",{\"1\":{\"64\":1}}],[\"页错误\",{\"0\":{\"65\":1},\"1\":{\"65\":1}}],[\"页映射\",{\"0\":{\"62\":1}}],[\"直接跳转到可执行文件的入口地址\",{\"1\":{\"64\":1}}],[\"直到u和d都不再发生变化\",{\"1\":{\"55\":1}}],[\"再对prod\",{\"1\":{\"112\":1}}],[\"再把控制权传递给addvec\",{\"1\":{\"80\":1}}],[\"再设置缺页的虚拟页和物理页的映射关系\",{\"1\":{\"64\":1}}],[\"再以\",{\"1\":{\"41\":1}}],[\"缺页\",{\"1\":{\"64\":1}}],[\"创建组合查询\",{\"0\":{\"187\":1}}],[\"创建高级联结\",{\"0\":{\"177\":1}}],[\"创建联结\",{\"0\":{\"173\":1}}],[\"创建分组\",{\"0\":{\"163\":1}}],[\"创建计算字段\",{\"0\":{\"143\":1}}],[\"创建虚拟地址空间实际上只是分配一个页目录\",{\"1\":{\"64\":1}}],[\"创建一个独立的虚拟地址空间\",{\"1\":{\"64\":1}}],[\"从customers表中检索客户列表\",{\"1\":{\"169\":1}}],[\"从中检索数据的表\",{\"1\":{\"166\":1}}],[\"从输出中可以看到\",{\"1\":{\"163\":1}}],[\"从结果上看\",{\"1\":{\"92\":1}}],[\"从第四项开始存放导入函数的地方\",{\"1\":{\"85\":1}}],[\"从plt\",{\"1\":{\"80\":1}}],[\"从这一步开始\",{\"1\":{\"88\":1}}],[\"从这一点可以推断\",{\"1\":{\"73\":1}}],[\"从这点来看\",{\"1\":{\"79\":1}}],[\"从功能上来说完全一样\",{\"1\":{\"77\":1}}],[\"从\",{\"1\":{\"67\":2}}],[\"从装载的角度看\",{\"1\":{\"67\":1}}],[\"从而影响having子句中基于这些值过滤掉的分组\",{\"1\":{\"164\":1}}],[\"从而得到动态链接器本身的重定位入口\",{\"1\":{\"88\":1}}],[\"从而实现了地址的重定位\",{\"1\":{\"85\":1}}],[\"从而使得共享模块中对global的引用要执行可执行文件中的globa副本\",{\"1\":{\"78\":1}}],[\"从而导致这些地址对每个进程来说是不同的\",{\"1\":{\"76\":1}}],[\"从而节省内存空间\",{\"1\":{\"67\":1}}],[\"从而触发页错误\",{\"1\":{\"65\":1}}],[\"从操作系统装载可执行文件的角度看\",{\"1\":{\"67\":1}}],[\"从操作系统角度看可执行文件的装载\",{\"0\":{\"63\":1}}],[\"从进程的角度看这一步可以简单的认为操作系统执行了一条跳转指令\",{\"1\":{\"64\":1}}],[\"从磁盘中读取到内存中\",{\"1\":{\"64\":1}}],[\"从段表中可以得到每个的段的所有信息\",{\"1\":{\"18\":1}}],[\"虚拟内存\",{\"1\":{\"62\":1}}],[\"虚拟地址内存分配\",{\"1\":{\"52\":1}}],[\"虚拟地址\",{\"1\":{\"49\":1}}],[\"建议阅读csapp\",{\"1\":{\"62\":1}}],[\"覆盖装入的方法把挖掘内存潜力的任务交给了程序员\",{\"1\":{\"61\":1}}],[\"覆盖装入\",{\"0\":{\"61\":1}}],[\"工具查看这个文件包含了那些目标文件\",{\"1\":{\"58\":1}}],[\"采用的就是与common块一样的机制\",{\"1\":{\"57\":1}}],[\"现在我们希望程序模块中共享的指令部分在装载时不需要因为装载地址的改变而改变\",{\"1\":{\"77\":1}}],[\"现在的linux下的gcc编译器中\",{\"1\":{\"40\":1}}],[\"现代的链接机制在处理弱符号时\",{\"1\":{\"57\":1}}],[\"早期的fortran没有动态分配空间的机制\",{\"1\":{\"57\":1}}],[\"被联结的列\",{\"1\":{\"181\":1}}],[\"被修正的位置只需要填入符号的地址即可\",{\"1\":{\"85\":1}}],[\"被装载入内存\",{\"1\":{\"80\":1}}],[\"被引用的符号地址\",{\"1\":{\"56\":1}}],[\"被隐藏的过程\",{\"0\":{\"6\":1}}],[\"大写和小写都匹配\",{\"1\":{\"135\":1}}],[\"大于等于\",{\"1\":{\"116\":1}}],[\"大于\",{\"1\":{\"116\":1}}],[\"大于2gb的程序可以使用\",{\"1\":{\"56\":1}}],[\"大型代码模型\",{\"1\":{\"56\":1}}],[\"中选择所有行\",{\"1\":{\"182\":1}}],[\"中\",{\"1\":{\"85\":1}}],[\"中往往保存了所有符号\",{\"1\":{\"84\":1}}],[\"中读取每个\",{\"1\":{\"81\":1}}],[\"中型代码模型\",{\"1\":{\"56\":1}}],[\"中的任意字符\",{\"1\":{\"140\":1}}],[\"中的信息\",{\"1\":{\"88\":1}}],[\"中的偏移为0x000000004018位置中去\",{\"1\":{\"85\":1}}],[\"中的符号\",{\"1\":{\"84\":1}}],[\"中的下一条指令\",{\"1\":{\"80\":1}}],[\"中的\",{\"1\":{\"50\":1}}],[\"原书第七章\",{\"0\":{\"56\":1}}],[\"参考csapp\",{\"0\":{\"56\":1},\"1\":{\"80\":1}}],[\"参数类型\",{\"1\":{\"41\":1}}],[\"参数可以打印更多信息\",{\"1\":{\"19\":1}}],[\"都提供对soundex的支持\",{\"1\":{\"149\":1}}],[\"都是生成地址无关代码\",{\"1\":{\"77\":1}}],[\"都是可读可执行\",{\"1\":{\"67\":1}}],[\"都是und\",{\"1\":{\"55\":1}}],[\"都会有一个相应的重定位表\",{\"1\":{\"33\":1}}],[\"依赖的共享对象文件\",{\"1\":{\"83\":1}}],[\"依赖\",{\"1\":{\"55\":3}}],[\"特别是出现相互依赖的库文件时更容易出现这种错误\",{\"1\":{\"55\":1}}],[\"特殊符号\",{\"0\":{\"40\":1}}],[\"最关键的还是所依赖的符号和相关文件的信息\",{\"1\":{\"84\":1}}],[\"最后开始执行\",{\"1\":{\"73\":1}}],[\"最后一列是可执行文件的路径\",{\"1\":{\"68\":1}}],[\"最前面四个字节表示命令行参数的数量\",{\"1\":{\"70\":1}}],[\"最主要的时段的权限\",{\"1\":{\"67\":1}}],[\"最终导致符号未定义行为\",{\"1\":{\"55\":1}}],[\"最好不要这样负责会出现一些意想不到的bug\",{\"1\":{\"43\":1}}],[\"存在问题\",{\"1\":{\"180\":1}}],[\"存\",{\"1\":{\"150\":1}}],[\"存档文件\",{\"1\":{\"55\":1}}],[\"存放只读数据\",{\"1\":{\"21\":1}}],[\"错误的\",{\"1\":{\"55\":2}}],[\"构建输出的可执行文件\",{\"1\":{\"55\":1}}],[\"修正值\",{\"1\":{\"56\":1}}],[\"修正后的地址\",{\"0\":{\"53\":1}}],[\"修改u和d来反映f中的符号定义和引用\",{\"1\":{\"55\":1}}],[\"以确定对特定的查询哪一种性能更好\",{\"1\":{\"186\":1}}],[\"以确定哪一种的性能更好\",{\"1\":{\"180\":1}}],[\"以确保每个指针所指向的地址正确\",{\"1\":{\"77\":1}}],[\"以inner\",{\"1\":{\"175\":1}}],[\"以便能对每个组进行聚集计算\",{\"1\":{\"162\":1}}],[\"以便于程序代码能够识别\",{\"1\":{\"44\":1}}],[\"以便于编译时编译器产生调试用的行号信息及用于编译时产生编译错误或警告时能够显示行号\",{\"1\":{\"7\":1}}],[\"以上5个聚集函数都可以如下使用\",{\"1\":{\"159\":1}}],[\"以上且由1002或1003制造的所有产品\",{\"1\":{\"125\":1}}],[\"以对libc库的malloc和free为例\",{\"1\":{\"91\":1}}],[\"以及数据段\",{\"1\":{\"85\":1}}],[\"以及一个在前面输入文件中已定义的符号集合d\",{\"1\":{\"55\":1}}],[\"以只读数据为代表的权限为只读段\",{\"1\":{\"67\":1}}],[\"以数据段和bss段位代表的权限为可读可写段\",{\"1\":{\"67\":1}}],[\"以代码段为代表的权限为可读可执行段\",{\"1\":{\"67\":1}}],[\"以最大的那块为准\",{\"1\":{\"57\":1}}],[\"静态对象的构造就需要通过\",{\"1\":{\"90\":1}}],[\"静态变量\",{\"1\":{\"77\":1}}],[\"静态共享库的升级也是问题\",{\"1\":{\"75\":1}}],[\"静态共享库的目标地址导致了很多问题\",{\"1\":{\"75\":1}}],[\"静态共享库的做法就是将程序的各个模块统一交给操作系统管理\",{\"1\":{\"75\":1}}],[\"静态库可以简单的看成一组目标文件的集合\",{\"1\":{\"58\":1}}],[\"静态库链接\",{\"0\":{\"58\":1}}],[\"静态库\",{\"1\":{\"55\":1}}],[\"静态链接时的重定位被称为链接时重定位\",{\"1\":{\"76\":1}}],[\"静态链接库\",{\"1\":{\"17\":1}}],[\"静态链接\",{\"0\":{\"11\":1,\"46\":1},\"1\":{\"32\":1}}],[\"需要知道一些重要的规定\",{\"1\":{\"163\":1}}],[\"需要知道一些必要信息才能完成这个函数地址绑定的工作\",{\"1\":{\"80\":1}}],[\"需要修改的重定位地址\",{\"1\":{\"56\":1}}],[\"需要补充的一点是linux链接器在符号解析阶段\",{\"1\":{\"55\":1}}],[\"需要注意的是mysql在只想匹配时默认是不区分大小写的\",{\"1\":{\"117\":1}}],[\"需要注意的是mymalloc\",{\"1\":{\"92\":1}}],[\"需要注意的是\",{\"1\":{\"43\":1,\"72\":1,\"106\":1}}],[\"`global\",{\"1\":{\"57\":1}}],[\"`swap\",{\"1\":{\"55\":1}}],[\"`shared\",{\"1\":{\"55\":2}}],[\"`main\",{\"1\":{\"55\":1}}],[\"`\",{\"1\":{\"55\":1}}],[\"^匹配串的开始\",{\"1\":{\"142\":1}}],[\"^\",{\"1\":{\"142\":3}}],[\"^123\",{\"1\":{\"137\":2}}],[\"^~~~\",{\"1\":{\"55\":1}}],[\"^=\",{\"1\":{\"46\":3}}],[\"|\",{\"1\":{\"55\":2,\"58\":1,\"100\":166,\"102\":30,\"103\":60,\"104\":90,\"105\":40,\"106\":44,\"107\":60,\"108\":1,\"110\":30,\"111\":60,\"112\":120,\"113\":16,\"115\":9,\"117\":60,\"118\":24,\"119\":36,\"120\":6,\"123\":24,\"124\":50,\"125\":65,\"126\":30,\"127\":48,\"130\":21,\"131\":21,\"135\":10,\"136\":8,\"137\":10,\"138\":8,\"139\":18,\"141\":12,\"142\":8,\"144\":28,\"145\":14,\"146\":45,\"149\":27,\"150\":40,\"154\":8,\"155\":8,\"156\":4,\"157\":4,\"158\":8,\"159\":4,\"160\":10,\"162\":4,\"163\":33,\"164\":120,\"165\":30,\"168\":36,\"169\":28,\"173\":60,\"174\":340,\"175\":120,\"176\":25,\"178\":9,\"180\":48,\"181\":45,\"182\":39,\"183\":20,\"188\":80,\"190\":40,\"191\":36}}],[\"未定义的类型\",{\"1\":{\"55\":1}}],[\"未正确链接目标文件或者库文件导致\",{\"1\":{\"55\":1}}],[\"未初始化\",{\"1\":{\"43\":2}}],[\"未初始化的全局变量为弱符号\",{\"1\":{\"43\":1}}],[\"未初始化的全局变量和局部静态变量\",{\"1\":{\"18\":1,\"22\":1}}],[\"既不在\",{\"1\":{\"140\":1}}],[\"既不同的目标文件中不能有同名的强符号\",{\"1\":{\"43\":1}}],[\"既动态链接器本身的函数也不能调用\",{\"1\":{\"88\":1}}],[\"既实现了动态链接最关键的一步\",{\"1\":{\"85\":1}}],[\"既还没有和相应的共享对象中的实际位置链接起来\",{\"1\":{\"81\":1}}],[\"既无法判断是否为跨模块间的调用\",{\"1\":{\"78\":1}}],[\"既目标地址确定\",{\"1\":{\"76\":1}}],[\"既共享对象在编译时不能假设自己在进程虚拟地址空间中的位置\",{\"1\":{\"75\":1}}],[\"既很多目标文件经过压缩打包后形成的一个文件\",{\"1\":{\"58\":1}}],[\"既\",{\"1\":{\"54\":1,\"82\":1}}],[\"同\",{\"1\":{\"140\":1}}],[\"同样因为全局符号介入的问题\",{\"1\":{\"89\":1}}],[\"同样可以采用类型三的方法来解决\",{\"1\":{\"77\":1}}],[\"同理\",{\"1\":{\"54\":1}}],[\"同时分配虚拟空间\",{\"1\":{\"49\":1}}],[\"因而它为数字的一个集合\",{\"1\":{\"141\":1}}],[\"因此想知道生产该物品的供应商生产的其他物品是否也存在这些问题\",{\"1\":{\"180\":1}}],[\"因此应该仔细\",{\"1\":{\"176\":1}}],[\"因此你不仅知道订单日期\",{\"1\":{\"150\":1}}],[\"因此where子句正确地过滤出了所需的数据\",{\"1\":{\"149\":1}}],[\"因此\",{\"1\":{\"120\":1,\"142\":1,\"150\":1,\"186\":1,\"189\":1}}],[\"因此a2\",{\"1\":{\"89\":1}}],[\"因此有如下方式\",{\"1\":{\"77\":1}}],[\"因此我们在构造elf可执行文件时不需要再额外设立bss的\",{\"1\":{\"67\":1}}],[\"因此会报重定义错误\",{\"1\":{\"57\":1}}],[\"因此在运行时可以用32位pc相对地址来访问\",{\"1\":{\"56\":1}}],[\"因此又被称为重定位段\",{\"1\":{\"54\":1}}],[\"因为all是默认行为\",{\"1\":{\"159\":1}}],[\"因为where匹配失败\",{\"1\":{\"150\":1}}],[\"因为它排除了多义性\",{\"1\":{\"150\":1}}],[\"因为它在文件中并没有内容\",{\"1\":{\"49\":1}}],[\"因为y\",{\"1\":{\"149\":1}}],[\"因为文本hello中没有数字\",{\"1\":{\"142\":1}}],[\"因为\",{\"1\":{\"141\":1}}],[\"因为在最后的l后有多余的字符\",{\"1\":{\"130\":1}}],[\"因为未知具有特殊的含义\",{\"1\":{\"120\":1}}],[\"因为一旦出现全局符号介入就需要修改其调用地址\",{\"1\":{\"89\":1}}],[\"因为可执行文件依赖于很多共享对象\",{\"1\":{\"81\":1}}],[\"因为可执行文件往往是第一个被加载的文件\",{\"1\":{\"75\":1}}],[\"因为本身是一些地址无关代码\",{\"1\":{\"80\":1}}],[\"因为每个got条目初始化时都指向它对应的plt条目的第二条指令\",{\"1\":{\"80\":1}}],[\"因为大量的全局变量会导致模块间耦合度变大\",{\"1\":{\"80\":1}}],[\"因为global可能被可执行文件引用\",{\"1\":{\"78\":1}}],[\"因为编译器无法确定对global的引用是跨模块的还是模块内部的\",{\"1\":{\"78\":1}}],[\"因为编译器需要使用它们\",{\"1\":{\"7\":1}}],[\"因为被调用的函数与调用者都在同一个模块\",{\"1\":{\"77\":1}}],[\"因为指令部分对于每个进程来说可能会被映射到每个进程的不同虚拟空间\",{\"1\":{\"76\":1}}],[\"因为静态共享库被分配到的虚拟地址空间是有限的\",{\"1\":{\"75\":1}}],[\"因为升级后的共享库必须保持共享库中全局函数和变量地址的不变\",{\"1\":{\"75\":1}}],[\"因为运行时进行动态链接还需要使用符号信息\",{\"1\":{\"73\":1}}],[\"因为elf目标文件不需要被装载\",{\"1\":{\"67\":1}}],[\"因为只有它是需要被映射的\",{\"1\":{\"67\":1}}],[\"因为链接器时从左到右开始扫描的\",{\"1\":{\"55\":1}}],[\"因为重定位表其实就是elf文件中的一个段\",{\"1\":{\"54\":1}}],[\"因为各个符号在段内的相对位置时固定的\",{\"1\":{\"50\":1}}],[\"因为字符串的长度往往是不定的\",{\"1\":{\"34\":1}}],[\"经过修正后\",{\"1\":{\"53\":1}}],[\"经过修饰后的名字为\",{\"1\":{\"41\":1}}],[\"截取了部分\",{\"1\":{\"53\":1}}],[\"真正的地址计算工作留给了连接器\",{\"1\":{\"52\":1}}],[\"即null\",{\"1\":{\"130\":1}}],[\"即p的值需要加上一个装载地址a\",{\"1\":{\"85\":1}}],[\"即p值为b\",{\"1\":{\"85\":1}}],[\"即程序开始执行时\",{\"1\":{\"80\":1}}],[\"即使给出具有该日期的一行\",{\"1\":{\"150\":1}}],[\"即使是where\",{\"1\":{\"130\":1}}],[\"即使是模块内部的\",{\"1\":{\"78\":1}}],[\"即使升级静态共享库后保持原有的函数和变量地址不变\",{\"1\":{\"75\":1}}],[\"即0x10000000\",{\"1\":{\"77\":1}}],[\"即\",{\"1\":{\"70\":1,\"135\":1}}],[\"即20480字节\",{\"1\":{\"69\":1}}],[\"即引用了但尚未定义的符号\",{\"1\":{\"55\":1}}],[\"即没有执行链接的第一步\",{\"1\":{\"52\":1}}],[\"即目标文件指令与源代码中代码行的对应关系\",{\"1\":{\"35\":1}}],[\"调用系统启动函数\",{\"1\":{\"80\":1}}],[\"调用函数并不直接通过got跳转\",{\"1\":{\"80\":1}}],[\"调用\",{\"1\":{\"77\":1}}],[\"调整代码中的地址等\",{\"1\":{\"49\":1}}],[\"调试信息\",{\"0\":{\"45\":1}}],[\"读取相应的elf文件头和\",{\"1\":{\"89\":1}}],[\"读取可执行文件头\",{\"1\":{\"64\":1}}],[\"读取输入文件中段的数据\",{\"1\":{\"49\":1}}],[\"读写权限及段的其它属性\",{\"1\":{\"24\":1}}],[\"并将结果作为单个查询结果集返回\",{\"1\":{\"186\":1}}],[\"并将它们映射到进程虚拟空间的相应位置\",{\"1\":{\"81\":1}}],[\"并试验它们\",{\"1\":{\"142\":1}}],[\"并对其进行排序\",{\"1\":{\"117\":1}}],[\"并继续下一个输入文件\",{\"1\":{\"55\":1}}],[\"并建立映射关系\",{\"1\":{\"49\":1}}],[\"并且提供给其它模块使用\",{\"1\":{\"84\":1}}],[\"并且每个进程都可以有独立的副本\",{\"1\":{\"77\":1}}],[\"并且从上面的进程虚拟空间分布看到\",{\"1\":{\"73\":1}}],[\"并且输出可执行文件program1\",{\"1\":{\"73\":1}}],[\"并且它们的权限相同\",{\"1\":{\"67\":1}}],[\"并且建立虚拟空间与可执行文件的映射关系\",{\"1\":{\"64\":1}}],[\"并且链接器修改u和d来反映m中的符号定义和引用\",{\"1\":{\"55\":1}}],[\"并且进行符号解析与重定位\",{\"1\":{\"49\":1}}],[\"并且将它们合并\",{\"1\":{\"49\":1}}],[\"并且将输入目标文件中的符号表中所有的符号定义和符号引用收集起来\",{\"1\":{\"49\":1}}],[\"并且获得它们的各个段的长度\",{\"1\":{\"49\":1}}],[\"扫描所有的输入目标文件\",{\"1\":{\"49\":1}}],[\"分组说明\",{\"1\":{\"166\":1}}],[\"分组行\",{\"1\":{\"165\":1}}],[\"分组和排序\",{\"0\":{\"165\":1}}],[\"分组是在select语句的group\",{\"1\":{\"163\":1}}],[\"分组允许把数据分为多个逻辑组\",{\"1\":{\"162\":1}}],[\"分组数据\",{\"0\":{\"161\":1}}],[\"分等\",{\"1\":{\"150\":1}}],[\"分页\",{\"0\":{\"106\":1}}],[\"分别测试每个联结\",{\"1\":{\"184\":1}}],[\"分别用来显示创建特定数据库或表的mysql语句\",{\"1\":{\"100\":1}}],[\"分别编译链接program1和program2\",{\"1\":{\"73\":1}}],[\"分配空间只局限与虚拟地址空间\",{\"1\":{\"49\":1}}],[\"分段的好处\",{\"1\":{\"18\":1}}],[\"装载共享对象\",{\"0\":{\"89\":1}}],[\"装载所有需要的共享对象\",{\"1\":{\"87\":1}}],[\"装载时重定位是解决动态模块中没有绝对地址应用的办法之一\",{\"1\":{\"77\":1}}],[\"装载时重定位的问题\",{\"1\":{\"76\":1}}],[\"装载时重定位\",{\"0\":{\"76\":1}}],[\"装载器根据当前地址空间的空闲情况\",{\"1\":{\"73\":1}}],[\"装载\",{\"1\":{\"64\":1}}],[\"装载的方式\",{\"0\":{\"60\":1}}],[\"装载后的虚拟地址中的虚拟地址空间\",{\"1\":{\"49\":1}}],[\"装载和库\",{\"0\":{\"4\":1}}],[\"重要\",{\"1\":{\"49\":2,\"53\":1,\"55\":1,\"56\":1,\"67\":1,\"68\":1,\"72\":1,\"73\":1,\"76\":1,\"77\":1,\"83\":1,\"89\":1,\"93\":1,\"105\":1,\"106\":1,\"108\":1,\"110\":1,\"112\":1,\"120\":1,\"126\":1,\"130\":1,\"131\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"163\":1,\"164\":1,\"172\":1,\"182\":1}}],[\"重定位完成后\",{\"1\":{\"90\":1}}],[\"重定位和初始化\",{\"0\":{\"90\":1},\"1\":{\"87\":1}}],[\"重定位等\",{\"1\":{\"80\":1}}],[\"重定位一个使用32位绝对地址的引用\",{\"1\":{\"56\":1}}],[\"重定位一个使用32位pc相对地址的引用\",{\"1\":{\"56\":1}}],[\"重定位过程中\",{\"1\":{\"55\":1}}],[\"重定位的过程也伴随着符号解析的过程\",{\"1\":{\"55\":1}}],[\"重定位信息\",{\"1\":{\"49\":1}}],[\"重定位表分别叫做\",{\"1\":{\"85\":1}}],[\"重定位表结构\",{\"1\":{\"54\":1}}],[\"重定位表的结构\",{\"1\":{\"54\":1}}],[\"重定位表\",{\"0\":{\"33\":1,\"54\":1},\"1\":{\"32\":1,\"33\":1}}],[\"重定位所做的就是给程序中每个这样的绝对地址引用的地址进行修正\",{\"1\":{\"14\":1}}],[\"重定位入口的偏移\",{\"1\":{\"54\":1}}],[\"重定位入口\",{\"1\":{\"14\":1}}],[\"重定位\",{\"0\":{\"14\":1,\"52\":1},\"1\":{\"14\":1}}],[\"接着是两个指向环境变量的字符串的指针\",{\"1\":{\"70\":1}}],[\"接着是\",{\"1\":{\"49\":1}}],[\"什么是空值\",{\"1\":{\"120\":1}}],[\"什么是动态链接\",{\"0\":{\"72\":1}}],[\"什么是相似段合并\",{\"1\":{\"49\":1}}],[\"什么是按序叠加\",{\"1\":{\"48\":1}}],[\"就像多数dbms一样\",{\"1\":{\"149\":1}}],[\"就会把对global的调用按照跨模块模式产生代码\",{\"1\":{\"78\":1}}],[\"就会使用装载过程的中建立的可执行文件与虚拟内存的映射关系从而找到空页所在的vma\",{\"1\":{\"65\":1}}],[\"就可以得到got的位置\",{\"1\":{\"77\":1}}],[\"就可以了\",{\"1\":{\"64\":1}}],[\"就必须重新链接应用程序\",{\"1\":{\"75\":1}}],[\"就表示该\",{\"1\":{\"67\":1}}],[\"就要确定这个符号的目的地址\",{\"1\":{\"55\":1}}],[\"就算一个段只有1字节的大小\",{\"1\":{\"48\":1}}],[\"就是将相同性质的段进行合并\",{\"1\":{\"49\":1}}],[\"就是将各个目标文件依次合并\",{\"1\":{\"48\":1}}],[\"就是\",{\"1\":{\"33\":1}}],[\"那a1\",{\"1\":{\"89\":1}}],[\"那就是所有的使用这个变量的指令都指向位于可执行文件中的那个副本\",{\"1\":{\"78\":1}}],[\"那变量a所在的虚拟内存地址为\",{\"1\":{\"77\":1}}],[\"那些额外的部分就是bss\",{\"1\":{\"67\":1}}],[\"那将m加到么就e中\",{\"1\":{\"55\":1}}],[\"那这个段也要占据4096字节的内存大小\",{\"1\":{\"48\":1}}],[\"那最后输出文件将会有成百上千零散的段\",{\"1\":{\"48\":1}}],[\"那么将所依赖的共享对象的名字放到装载集合中\",{\"1\":{\"89\":1}}],[\"那么至少它需要知道关于可执行文件和本进程的些信息\",{\"1\":{\"86\":1}}],[\"那么实际上该变量a的地址为a+b\",{\"1\":{\"85\":1}}],[\"那么对于program1来说\",{\"1\":{\"84\":1}}],[\"那么lookup\",{\"1\":{\"80\":1}}],[\"那么当liba\",{\"1\":{\"80\":1}}],[\"那么当连接器需要对某个符号的引用进行重定位时\",{\"1\":{\"55\":1}}],[\"那么编译器和链接器就会产生一个重定位表\",{\"1\":{\"79\":1}}],[\"那么p的地址就是一个绝对地址\",{\"1\":{\"79\":1}}],[\"那么gcc编译器在\",{\"1\":{\"78\":1}}],[\"那么got中相应地址就指向模块内部的该变量副本\",{\"1\":{\"78\":1}}],[\"那么动态链接器会执行\",{\"1\":{\"90\":1}}],[\"那么动态链接器就会对该共享对象进行重定位\",{\"1\":{\"79\":1}}],[\"那么动态链接器就会把got中的相应地址指向该副本\",{\"1\":{\"78\":1}}],[\"那么动态链接器还需要将该初始化值复制到程序主模块中的变量副本\",{\"1\":{\"78\":1}}],[\"那么现在global变量定义在原先的共享对象中\",{\"1\":{\"78\":1}}],[\"那么这种情况下\",{\"1\":{\"78\":1}}],[\"那么这个成员表示符号所在的段在段表中的下标\",{\"1\":{\"38\":1}}],[\"那么这个段的类型\",{\"1\":{\"33\":1}}],[\"那么只需要相对于当前指令\",{\"1\":{\"77\":1}}],[\"那么系统就对程序中所有的绝对地址引用进行重定位\",{\"1\":{\"76\":1}}],[\"那么装载的时候就可以将它们看作一个整体一起映射\",{\"1\":{\"67\":1}}],[\"那么我们也可以在编译时确定got相对于当前指令的偏移\",{\"1\":{\"77\":1}}],[\"那么我们可以对于相同的段\",{\"1\":{\"67\":1}}],[\"那么我们就称文件a定义\",{\"1\":{\"35\":1}}],[\"那么最终输出结果中的符号所占空间与强符号相同\",{\"1\":{\"57\":1}}],[\"那么链接器将会按照静态链接的规则\",{\"1\":{\"73\":1}}],[\"那么链接器将会把这个指令的目标地址部分修改为0x1000\",{\"1\":{\"14\":1}}],[\"那么链接器通常会给出警告\",{\"1\":{\"57\":1}}],[\"那么链接器就会将这个地址填入到\",{\"1\":{\"85\":1}}],[\"那么链接器就会将这个符号的引用标记为一个动态链接的符号\",{\"1\":{\"73\":1}}],[\"那么链接器就会输出一个错误并终止\",{\"1\":{\"55\":1}}],[\"那么链接器就尝试匹配u中未解析的符号和由存档文件成员定义的符号\",{\"1\":{\"55\":1}}],[\"那么链接器把f添加到e\",{\"1\":{\"55\":1}}],[\"那么会有一个相应的叫\",{\"1\":{\"54\":1}}],[\"那么\",{\"1\":{\"50\":1}}],[\"那么选其中占用空间最大的一个\",{\"1\":{\"43\":1}}],[\"那么选强符号\",{\"1\":{\"43\":1}}],[\"那么符号的值就是这个函数或变量的地址\",{\"1\":{\"39\":1}}],[\"判断是否链接到pthread库\",{\"1\":{\"44\":1}}],[\"声明对一个外部函数的引用为弱引用\",{\"1\":{\"44\":1}}],[\"强引用\",{\"1\":{\"44\":1}}],[\"强符号\",{\"1\":{\"43\":2}}],[\"强符号和弱符号都是针对定义的\",{\"1\":{\"43\":1}}],[\"强符合与弱符号\",{\"0\":{\"43\":1}}],[\"弱引用\",{\"1\":{\"44\":1}}],[\"弱引用和强引用\",{\"0\":{\"44\":1}}],[\"弱符号\",{\"1\":{\"43\":2}}],[\"而left指出的是outer\",{\"1\":{\"182\":1}}],[\"而lib\",{\"1\":{\"84\":1}}],[\"而having过滤分组\",{\"1\":{\"164\":1}}],[\"而供应商1005有2个产品\",{\"1\":{\"163\":1}}],[\"而got的第一个入口保存的是\",{\"1\":{\"88\":1}}],[\"而共享对象的重定位则是在装载时完成的\",{\"1\":{\"85\":1}}],[\"而变量a的地址会随着共享对象的装载地址改变而改变\",{\"1\":{\"79\":1}}],[\"而在可执行文件的\",{\"1\":{\"78\":1}}],[\"而模块module\",{\"1\":{\"78\":1}}],[\"而且还想包括供应商1001和1002生产的所有物品\",{\"1\":{\"188\":1}}],[\"而且必须使用每个选择列表达式\",{\"1\":{\"165\":1}}],[\"而且列名必须作为函数参数给出\",{\"1\":{\"154\":1}}],[\"而且较快\",{\"1\":{\"77\":1}}],[\"而且很难发现\",{\"1\":{\"43\":1}}],[\"而\",{\"1\":{\"77\":2,\"85\":1}}],[\"而该函数内部实现依旧是跳转到got表中通过间接跳转实现对函数的调用\",{\"1\":{\"77\":1}}],[\"而通过查看符号表信息可以得到变量a所在elf文件中的位置\",{\"1\":{\"77\":1}}],[\"而数据部分可以在每个进程中拥有一个副本\",{\"1\":{\"77\":1}}],[\"而对于可修改数据部分来说每个进程都有不同的副本\",{\"1\":{\"76\":1}}],[\"而对于单个程序来说\",{\"1\":{\"75\":1}}],[\"而现在这种情况通常被称为装载时重定位\",{\"1\":{\"76\":1}}],[\"而把这一步推迟到装载时完成\",{\"1\":{\"76\":1}}],[\"而是由elf可执行文件决定\",{\"1\":{\"82\":1}}],[\"而是通过一个叫做plt项的结构来进行跳转\",{\"1\":{\"80\":1}}],[\"而是需要用到时才由动态链接器来负责绑定\",{\"1\":{\"80\":1}}],[\"而是在装载时\",{\"1\":{\"73\":1}}],[\"而是0x7f066ed25000\",{\"1\":{\"73\":1}}],[\"而是使用的bss段\",{\"1\":{\"57\":1}}],[\"而不管它们逻辑上是否可以配在一起\",{\"1\":{\"174\":1}}],[\"而不是在where子句中指定\",{\"1\":{\"182\":1}}],[\"而不是使用相对地址调用的原因\",{\"1\":{\"89\":1}}],[\"而不是两个\",{\"1\":{\"67\":1}}],[\"而不静态链接器ld完成\",{\"1\":{\"72\":1}}],[\"而可执行文件和共享库文件都有\",{\"1\":{\"67\":1}}],[\"而静态库文件\",{\"1\":{\"55\":1}}],[\"而链接器将继续处理下一个输入文件\",{\"1\":{\"55\":1}}],[\"而0x408\",{\"1\":{\"29\":1}}],[\"当\",{\"1\":{\"150\":1}}],[\"当行数不够时\",{\"1\":{\"106\":1}}],[\"当完成了重定位和初始化后\",{\"1\":{\"90\":1}}],[\"当进程退出时会执行\",{\"1\":{\"90\":1}}],[\"当上面的步骤完成后\",{\"1\":{\"90\":1}}],[\"当一个符号需要被加入全局符号表时\",{\"1\":{\"89\":1}}],[\"当一个新的共享对象被装载完成时\",{\"1\":{\"89\":1}}],[\"当一个模块引用了一个定义在共享对象的全局变量的时比如一个共享对象定义了一个全局变量global\",{\"1\":{\"78\":1}}],[\"当操作系统将进程控制权交给动态链接器时\",{\"1\":{\"88\":1}}],[\"当操作系统将控制权交给它时\",{\"1\":{\"86\":1}}],[\"当所有动态链接工作完成后\",{\"1\":{\"81\":1}}],[\"当动态链接器需要进行重定位时\",{\"1\":{\"85\":1}}],[\"当动态链接器获得控制权后\",{\"1\":{\"81\":1}}],[\"当动态链接器装载共享对象时\",{\"1\":{\"79\":1}}],[\"当我们调用某个外部模块的函数时\",{\"1\":{\"80\":1}}],[\"当共享模块被装载时\",{\"1\":{\"78\":1}}],[\"当编译器编译moudule\",{\"1\":{\"78\":1}}],[\"当模块需要调用目标函数时\",{\"1\":{\"77\":1}}],[\"当然\",{\"1\":{\"188\":1}}],[\"当然got中每个地址对应于哪个变量是由编译器决定的\",{\"1\":{\"77\":1}}],[\"当然common块的链接规则仅仅是针对弱符号的\",{\"1\":{\"57\":1}}],[\"当指令需要访问变量b时\",{\"1\":{\"77\":1}}],[\"当代码需要引用该变量时\",{\"1\":{\"77\":1}}],[\"当前执行的下一条指令\",{\"1\":{\"77\":1}}],[\"当链接器将program1\",{\"1\":{\"73\":1}}],[\"当程序模块program1\",{\"1\":{\"73\":1}}],[\"当程序执行发生页错误时\",{\"1\":{\"64\":1}}],[\"当cpu开始执行指令时\",{\"1\":{\"65\":1}}],[\"当不同的目标文件需要的common块空间大小不一致时\",{\"1\":{\"57\":1}}],[\"当输入指令如下时就会出现符号未定义错误\",{\"1\":{\"55\":1}}],[\"当输入文件很多时\",{\"1\":{\"48\":1}}],[\"当a和b链接时\",{\"1\":{\"43\":1}}],[\"当它经过编译后的符号名就为\",{\"1\":{\"40\":1}}],[\"则必须使用union\",{\"1\":{\"190\":1}}],[\"则必须使用\",{\"1\":{\"165\":1}}],[\"则必须在group\",{\"1\":{\"163\":1}}],[\"则null将作为一个分组返回\",{\"1\":{\"163\":1}}],[\"则min\",{\"1\":{\"157\":1}}],[\"则max\",{\"1\":{\"156\":1}}],[\"则不忽略\",{\"1\":{\"155\":1}}],[\"则指定列的值为空的行被count\",{\"1\":{\"155\":1}}],[\"则where\",{\"1\":{\"150\":1}}],[\"则子句where\",{\"1\":{\"130\":1}}],[\"则后加入的符号忽略\",{\"1\":{\"89\":1}}],[\"则没有这样的限制\",{\"1\":{\"77\":1}}],[\"则表示它们没有映射到文件中\",{\"1\":{\"68\":1}}],[\"则连接器对于该引用不报错\",{\"1\":{\"44\":1}}],[\"则连接器将该符号的引用决议\",{\"1\":{\"44\":1}}],[\"则链接器报符号重定义错误\",{\"1\":{\"43\":1}}],[\"则st\",{\"1\":{\"39\":1}}],[\"不过各个列不需要以相同的次序列出\",{\"1\":{\"189\":1}}],[\"不过这次我们将使用union\",{\"1\":{\"188\":1}}],[\"不过可以想象\",{\"1\":{\"80\":1}}],[\"不考虑价格\",{\"1\":{\"188\":1}}],[\"不要联结不必要的表\",{\"1\":{\"176\":1}}],[\"不要忘记order\",{\"1\":{\"165\":1}}],[\"不要过度使用通配符\",{\"1\":{\"132\":1}}],[\"不一定需要\",{\"1\":{\"165\":1}}],[\"不管表列中包含的是空值\",{\"1\":{\"155\":1}}],[\"不管是插入或更新表值还是用where子句进行过滤\",{\"1\":{\"150\":1}}],[\"不少于指定数目的匹配\",{\"1\":{\"141\":1}}],[\"不区分大小写\",{\"1\":{\"135\":1}}],[\"不行\",{\"1\":{\"120\":1}}],[\"不能使用别名\",{\"1\":{\"163\":1}}],[\"不能使用=\",{\"1\":{\"120\":1}}],[\"不能增长太多\",{\"1\":{\"75\":1}}],[\"不匹配检查\",{\"0\":{\"118\":1}}],[\"不等于\",{\"1\":{\"116\":2}}],[\"不使用distinct\",{\"1\":{\"105\":1}}],[\"不同的数值类型或不同的日期类型\",{\"1\":{\"189\":1}}],[\"不同的是\",{\"1\":{\"84\":1}}],[\"不同的平台有着不同的实现\",{\"1\":{\"77\":1}}],[\"不直接调用addvec\",{\"1\":{\"80\":1}}],[\"不对其进行地址重定位\",{\"1\":{\"73\":1}}],[\"不可执行\",{\"1\":{\"68\":1}}],[\"不需要进一步修改\",{\"1\":{\"56\":1}}],[\"不允许被多次定义\",{\"1\":{\"43\":1}}],[\"不是针对符号的引用\",{\"1\":{\"43\":1}}],[\"有两种基本情况\",{\"1\":{\"186\":1}}],[\"有一种类型的入口是dt\",{\"1\":{\"89\":1}}],[\"有一个专门的段叫符号表\",{\"1\":{\"84\":1}}],[\"有一个专门的段叫做==\",{\"1\":{\"82\":1}}],[\"有映像文件\",{\"1\":{\"68\":2}}],[\"有相同映像文件的映射成一个vma\",{\"1\":{\"68\":1}}],[\"有符号常数\",{\"1\":{\"56\":1}}],[\"有些符号的定义也被称为弱符号\",{\"1\":{\"43\":1}}],[\"有目标文件a有全局变量var\",{\"1\":{\"14\":1}}],[\"深入理解计算机系统\",{\"1\":{\"43\":1}}],[\"和大多数编程语言一样sql也有计算次序问题\",{\"1\":{\"125\":1}}],[\"和大多数编程语言的数组索引一样\",{\"1\":{\"106\":1}}],[\"和limit\",{\"1\":{\"106\":1}}],[\"和使用\",{\"1\":{\"100\":1}}],[\"和r\",{\"1\":{\"85\":1}}],[\"和got\",{\"1\":{\"80\":1}}],[\"和plt联合使用时\",{\"1\":{\"80\":1}}],[\"和数据部分放在一起\",{\"1\":{\"77\":1}}],[\"和段表结构一样\",{\"1\":{\"67\":1}}],[\"和段的标志位\",{\"1\":{\"30\":1}}],[\"和\",{\"1\":{\"49\":1,\"50\":1,\"53\":1,\"56\":1,\"67\":2,\"70\":1,\"84\":2,\"85\":2,\"137\":1,\"138\":1}}],[\"和func\",{\"1\":{\"41\":1}}],[\"z0\",{\"1\":{\"140\":1}}],[\"za\",{\"1\":{\"140\":2}}],[\"zip\",{\"1\":{\"100\":2,\"181\":1}}],[\"zz4funce3foo\",{\"1\":{\"41\":1}}],[\"zz4maine3foo和\",{\"1\":{\"41\":1}}],[\"zn6myname3vare\",{\"1\":{\"42\":1}}],[\"zn3far3bare\",{\"1\":{\"41\":1}}],[\"zn1n1c4funcei\",{\"1\":{\"41\":2}}],[\"zn1n1c4funce\",{\"1\":{\"41\":1}}],[\"z\",{\"1\":{\"41\":1,\"80\":5,\"138\":1,\"140\":3}}],[\"zr\",{\"1\":{\"20\":1}}],[\"所需要的共享对象也都已经装载并且链接完成\",{\"1\":{\"90\":1}}],[\"所依赖的共享对象\",{\"1\":{\"89\":1}}],[\"所有quantity值之和\",{\"1\":{\"158\":1}}],[\"所有的准备工作就宣告完成了\",{\"1\":{\"90\":1}}],[\"所有这些未定义的符号都应该能在全局符号表中找到\",{\"1\":{\"55\":1}}],[\"所有引用到的外部符号\",{\"1\":{\"54\":1}}],[\"所有符号都以\",{\"1\":{\"41\":1}}],[\"所以不能从个别的列取回数据\",{\"1\":{\"163\":1}}],[\"所以不论这个变量是整形还是浮点型甚至是全局对象\",{\"1\":{\"41\":1}}],[\"所以解决办法如下\",{\"1\":{\"125\":1}}],[\"所以fuses匹配了fuses\",{\"1\":{\"117\":1}}],[\"所以当所有的共享对象被装载进来时\",{\"1\":{\"89\":1}}],[\"所以当操作系统捕获到也错误发生时\",{\"1\":{\"64\":1}}],[\"所以可以和代码段等一起合并成同一个可读可指向的\",{\"1\":{\"80\":1}}],[\"所以可以使用装载时重定位的方法来处理\",{\"1\":{\"76\":1}}],[\"所以程序开始执行时\",{\"1\":{\"80\":1}}],[\"所以elf采用了一种叫\",{\"1\":{\"80\":1}}],[\"所以并不担心被进程改变\",{\"1\":{\"79\":1}}],[\"所以变量的地址必须在链接过程中确定下来\",{\"1\":{\"78\":1}}],[\"所以为了方便\",{\"1\":{\"77\":1}}],[\"所以需要补0所以\",{\"1\":{\"77\":1}}],[\"所以对于这种指令是不需要重定位的\",{\"1\":{\"77\":1}}],[\"所以这种情况会比较简单\",{\"1\":{\"77\":1}}],[\"所以这时\",{\"1\":{\"50\":1}}],[\"所以我们只需要将指令中那些需要被修改的部分进行剥离\",{\"1\":{\"77\":1}}],[\"所以没有办法做到同一份指令被多个进程共享\",{\"1\":{\"76\":1}}],[\"所以他认为地址0x1000到0x2000的地址是空闲的\",{\"1\":{\"75\":1}}],[\"所以整个可执行文件只有12014字节却占用了5个页\",{\"1\":{\"69\":1}}],[\"所以整个n\",{\"1\":{\"41\":1}}],[\"所以它们的soundex值匹配\",{\"1\":{\"149\":1}}],[\"所以它们之间的相对位置是固定的\",{\"1\":{\"77\":1}}],[\"所以它可以在模块装载时被修改\",{\"1\":{\"77\":1}}],[\"所以它没有程序头表\",{\"1\":{\"67\":1}}],[\"所以它被放到了\",{\"1\":{\"21\":1}}],[\"所以32位elf的对齐粒度为0x1000\",{\"1\":{\"64\":1}}],[\"所以必须事先声明它所需的临时使用空间的大小\",{\"1\":{\"57\":1}}],[\"所以在匹配过滤或不匹配过滤时不返回它们\",{\"1\":{\"120\":1}}],[\"所以在映射完可执行文件后\",{\"1\":{\"81\":1}}],[\"所以在程序开始执行前\",{\"1\":{\"80\":1}}],[\"所以在链接器扫描完所有的输入目标文件后\",{\"1\":{\"55\":1}}],[\"所以在文件中也不占据空间\",{\"1\":{\"18\":1}}],[\"所以main的起始地址为0\",{\"1\":{\"52\":1}}],[\"所以链接器在合并各个段的同时\",{\"1\":{\"49\":1}}],[\"所以即不是强符号也不是弱符号\",{\"1\":{\"43\":1}}],[\"所以c++名称修饰会对其不起作用\",{\"1\":{\"42\":1}}],[\"所以用固定的结构来表示它比较困难\",{\"1\":{\"34\":1}}],[\"所以simplesection\",{\"1\":{\"28\":1}}],[\"所以每个elf64\",{\"1\":{\"28\":1}}],[\"所以\",{\"1\":{\"21\":2,\"22\":1,\"64\":1,\"93\":1,\"141\":1}}],[\"所以编译器在无法确认var地址的情况下\",{\"1\":{\"14\":1}}],[\"使每个列只返回一次\",{\"1\":{\"181\":1}}],[\"使得能对串进行发音比较而不是字母比较\",{\"1\":{\"149\":1}}],[\"使得每个函数签名对应一个修饰后名称\",{\"1\":{\"41\":1}}],[\"使s可选\",{\"1\":{\"141\":1}}],[\"使它成为一个对动态符号的引用\",{\"1\":{\"73\":1}}],[\"使它们能够调整到正确的虚拟地址\",{\"1\":{\"50\":1}}],[\"使用union\",{\"0\":{\"188\":1}}],[\"使用联结和联结条件\",{\"0\":{\"184\":1}}],[\"使用联结查询\",{\"1\":{\"180\":1}}],[\"使用带聚集函数的联结\",{\"0\":{\"183\":1}}],[\"使用不同类型的联结\",{\"0\":{\"179\":1}}],[\"使用表别名\",{\"0\":{\"178\":1}}],[\"使用子查询\",{\"0\":{\"167\":1},\"1\":{\"180\":1}}],[\"使用with\",{\"1\":{\"163\":1}}],[\"使用where\",{\"1\":{\"150\":1}}],[\"使用where子句\",{\"0\":{\"115\":1}}],[\"使用count\",{\"1\":{\"155\":2}}],[\"使用concat拼接\",{\"1\":{\"144\":1}}],[\"使用year和month\",{\"1\":{\"150\":1}}],[\"使用函数\",{\"0\":{\"148\":1}}],[\"使用数据处理函数\",{\"0\":{\"147\":1}}],[\"使用别名\",{\"0\":{\"145\":1}}],[\"使用rollup\",{\"1\":{\"163\":1}}],[\"使用rtrim移除右边的空格\",{\"1\":{\"144\":1}}],[\"使用readelf查看文件的重定位表\",{\"1\":{\"85\":1}}],[\"使用readelf查看elf文件的动态符号表以及哈希表\",{\"1\":{\"84\":1}}],[\"使用readelf工具查看\",{\"1\":{\"83\":1}}],[\"使用readelf\",{\"1\":{\"39\":1,\"55\":1,\"67\":1}}],[\"使用正则表达式\",{\"1\":{\"138\":1}}],[\"使用|\",{\"1\":{\"136\":1}}],[\"使用limit和desc获取最贵的物品的价格\",{\"0\":{\"113\":1}}],[\"使用ldd查看一个程序主模块或一个共享库依赖于哪些共享库\",{\"1\":{\"83\":1}}],[\"使用完全限定的表名\",{\"0\":{\"107\":1}}],[\"使用distinct\",{\"1\":{\"105\":1}}],[\"使用通配符的技巧\",{\"0\":{\"132\":1}}],[\"使用通配符\",{\"1\":{\"104\":1}}],[\"使用help\",{\"1\":{\"100\":1}}],[\"使用mysql正则表达式\",{\"0\":{\"134\":1}}],[\"使用mysql\",{\"0\":{\"96\":1}}],[\"使用了我们自定义的malloc和free函数\",{\"1\":{\"92\":1}}],[\"使用gcc将lib\",{\"1\":{\"73\":1}}],[\"使用gcc生成可执行文件\",{\"1\":{\"6\":1}}],[\"使用最简单的映射将每个段分开映射\",{\"1\":{\"69\":1}}],[\"使用\",{\"1\":{\"58\":1,\"131\":2,\"137\":1,\"139\":1}}],[\"使用上一步中收集到的所有信息\",{\"1\":{\"49\":1}}],[\"使用某种名称修饰的方法\",{\"1\":{\"41\":1}}],[\"使用nm指令查看符号结果\",{\"1\":{\"35\":1}}],[\"使用size指令查看elf文件的代码段\",{\"1\":{\"19\":1}}],[\"使用objdump工具查看\",{\"1\":{\"82\":1}}],[\"使用objdump指令查看某个符号在那个文件中\",{\"1\":{\"58\":1}}],[\"使用objdump指令查看链接前后的地址分配情况\",{\"1\":{\"49\":1}}],[\"使用objdump\",{\"1\":{\"19\":1,\"28\":1,\"52\":1,\"54\":1}}],[\"名称修饰机制也被用来防止静态变量的名字冲突\",{\"1\":{\"41\":1}}],[\"名称修饰\",{\"1\":{\"41\":1}}],[\"包括重复行\",{\"1\":{\"190\":1}}],[\"包括没有人订购的产品\",{\"1\":{\"182\":1}}],[\"包括那些至今尚未下订单的客户\",{\"1\":{\"182\":2}}],[\"包括返回文本列中的最小值\",{\"1\":{\"157\":1}}],[\"包括返回文本列中的最大值\",{\"1\":{\"156\":1}}],[\"包括空格在内的任意空白字符\",{\"1\":{\"140\":1}}],[\"包括\",{\"1\":{\"84\":1}}],[\"包括函数名\",{\"1\":{\"41\":1}}],[\"包含或取消重复的行\",{\"0\":{\"190\":1}}],[\"包含动态链接器在解析函数地址时会使用的信息\",{\"1\":{\"80\":1}}],[\"包含一个或多个属性类似的\",{\"1\":{\"67\":1}}],[\"包含了一个函数的信息\",{\"1\":{\"41\":1}}],[\"函数建立\",{\"1\":{\"163\":1}}],[\"函数类似\",{\"1\":{\"157\":1}}],[\"函数与max\",{\"1\":{\"157\":1}}],[\"函数中用的是星号\",{\"1\":{\"155\":1}}],[\"函数忽略\",{\"1\":{\"155\":1}}],[\"函数忽略列值为null的行\",{\"1\":{\"154\":1,\"156\":1,\"157\":1,\"158\":1}}],[\"函数进行计数\",{\"1\":{\"155\":1}}],[\"函数进行修改\",{\"1\":{\"73\":1}}],[\"函数来转换cust\",{\"1\":{\"149\":1}}],[\"函数来拼接两个列\",{\"1\":{\"144\":1}}],[\"函数时为什么也要使用地址无关代码\",{\"1\":{\"89\":1}}],[\"函数时跳转到了\",{\"1\":{\"77\":1}}],[\"函数在plt中的项我们称之为bar\",{\"1\":{\"80\":1}}],[\"函数正在的名字叫做\",{\"1\":{\"80\":1}}],[\"函数\",{\"0\":{\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1},\"1\":{\"80\":1,\"84\":4,\"149\":1,\"150\":1,\"151\":1,\"153\":1,\"154\":1}}],[\"函数调用都可以是相对地址调用\",{\"1\":{\"77\":1}}],[\"函数是一个定义在lib\",{\"1\":{\"73\":1}}],[\"函数是一个定义于静态目标模块中的函数\",{\"1\":{\"73\":1}}],[\"函数是定义在代码段之外\",{\"1\":{\"55\":1}}],[\"函数的引用进行特殊处理\",{\"1\":{\"73\":1}}],[\"函数的引用是一个静态符号还是动态符号\",{\"1\":{\"73\":1}}],[\"函数的性质\",{\"1\":{\"73\":1}}],[\"函数的地址\",{\"1\":{\"73\":1}}],[\"函数的虚拟地址应该是0x0000000000001060+x\",{\"1\":{\"50\":1}}],[\"函数的静态变量foo会被gcc编译器会将他们修饰为\",{\"1\":{\"41\":1}}],[\"函数相对于\",{\"1\":{\"50\":1}}],[\"函数里面的静态变量foo\",{\"1\":{\"41\":1}}],[\"函数签名经过修饰为\",{\"1\":{\"41\":1}}],[\"函数签名\",{\"1\":{\"41\":1}}],[\"函数名和变量名称为符号名\",{\"1\":{\"35\":1}}],[\"默认排序\",{\"1\":{\"112\":1}}],[\"默认都把定义在模块内部的全局变量当作定义在其它模块的全局变量\",{\"1\":{\"78\":1}}],[\"默认情况下已经去掉了在c语言符号前加\",{\"1\":{\"40\":1}}],[\"默认值为0\",{\"1\":{\"18\":1,\"22\":1}}],[\"于是像c++增加了==命名空间\",{\"1\":{\"40\":1}}],[\"相关子查询\",{\"1\":{\"169\":1}}],[\"相关时这两个成员才会有意义\",{\"1\":{\"32\":1}}],[\"相同\",{\"1\":{\"140\":1}}],[\"相应的语法如下\",{\"1\":{\"142\":1}}],[\"相应的\",{\"1\":{\"90\":1}}],[\"相应的符号名前加上下划线\",{\"1\":{\"40\":1}}],[\"相当于是got中的第一项\",{\"1\":{\"77\":1}}],[\"相互不受影响\",{\"1\":{\"77\":1}}],[\"相比于静态链接\",{\"1\":{\"75\":1}}],[\"相似段合并\",{\"0\":{\"49\":1},\"1\":{\"49\":1}}],[\"地址绑定发生在哪个模块\",{\"1\":{\"80\":1}}],[\"地址无关代码\",{\"0\":{\"74\":1,\"77\":1}}],[\"地址引用重定位\",{\"1\":{\"73\":1}}],[\"地址分别为0x4010和0x11a0\",{\"1\":{\"53\":1}}],[\"地址都为虚拟地址\",{\"1\":{\"40\":1}}],[\"地址和空间分配\",{\"1\":{\"13\":1}}],[\"如这里所示\",{\"1\":{\"168\":1}}],[\"如\",{\"1\":{\"150\":2}}],[\"如下汇总物品的价格\",{\"1\":{\"146\":1}}],[\"如where\",{\"1\":{\"135\":1}}],[\"如此循环直到所有依赖的共享对象都被装载完成\",{\"1\":{\"89\":1}}],[\"如何使用got和plt协同工作\",{\"1\":{\"80\":1}}],[\"如何解决\",{\"1\":{\"78\":1}}],[\"如图\",{\"1\":{\"77\":1}}],[\"如果确实需要每个条件的匹配行全部出现\",{\"1\":{\"190\":1}}],[\"如果想返回所有匹配行\",{\"1\":{\"190\":1}}],[\"如果组合4条select语句\",{\"1\":{\"189\":1}}],[\"如果引用一个没有用表名限制的具有二义性的列名\",{\"1\":{\"173\":1}}],[\"如果与聚集函数一起使用列\",{\"1\":{\"165\":1}}],[\"如果列中有多行null值\",{\"1\":{\"163\":1}}],[\"如果分组列中具有null值\",{\"1\":{\"163\":1}}],[\"如果在select中使用表达式\",{\"1\":{\"163\":1}}],[\"如果在group\",{\"1\":{\"163\":1}}],[\"如果数据按相应的列排序\",{\"1\":{\"156\":1,\"157\":1}}],[\"如果数据段中有绝对地址引用\",{\"1\":{\"79\":1}}],[\"如果指定列名\",{\"1\":{\"155\":1}}],[\"如果用当前日期和时间存储订单日期\",{\"1\":{\"150\":1}}],[\"如果放错地方\",{\"1\":{\"132\":1}}],[\"如果其他操作符能达到相同的目的\",{\"1\":{\"132\":1}}],[\"如果其中有一个符号为强符号时\",{\"1\":{\"57\":1}}],[\"如果它后面有一个或多个空格\",{\"1\":{\"130\":1}}],[\"如果区分大小写\",{\"1\":{\"130\":1}}],[\"如果使用limit\",{\"1\":{\"113\":1}}],[\"如果相同的符号名已经存在\",{\"1\":{\"89\":1}}],[\"如果这个elf共享对象还依赖于其它共享对象\",{\"1\":{\"89\":1}}],[\"如果这个符号是一个函数或变量的定义\",{\"1\":{\"39\":1}}],[\"如果按照通常的做法应该时通过got中相应的项进行间接跳转\",{\"1\":{\"80\":1}}],[\"如果没有where子句\",{\"1\":{\"164\":1}}],[\"如果没有用到则不进行绑定\",{\"1\":{\"80\":1}}],[\"如果没有找到该符号的定义\",{\"1\":{\"44\":1}}],[\"如果一开始就把所有函数都链接好实际上是一种浪费\",{\"1\":{\"80\":1}}],[\"如果一个符号在所有目标文件中都是弱符号\",{\"1\":{\"43\":1}}],[\"如果一个符号在某个文件中是强符号\",{\"1\":{\"43\":1}}],[\"如果发现该共享对象有这样的重定位入口\",{\"1\":{\"79\":1}}],[\"如果module\",{\"1\":{\"78\":1}}],[\"如果该全局变量在程序主模块中没有副本\",{\"1\":{\"78\":1}}],[\"如果该符号未被定义\",{\"1\":{\"44\":1}}],[\"如果该符号有定义\",{\"1\":{\"44\":1}}],[\"如果变量在共享模块中被初始化\",{\"1\":{\"78\":1}}],[\"如果同一个变量同时存在于多个位置中\",{\"1\":{\"78\":1}}],[\"如果应用程序在链接时已经绑定了这些地址\",{\"1\":{\"75\":1}}],[\"如果某个共享对象有\",{\"1\":{\"90\":1}}],[\"如果某个共享对象里有这样一段代码\",{\"1\":{\"79\":1}}],[\"如果某个全局变量在可执行文件中拥有副本\",{\"1\":{\"78\":1}}],[\"如果某个模块被多个程序使用\",{\"1\":{\"75\":1}}],[\"如果某个存档文件成员m\",{\"1\":{\"55\":1}}],[\"如果不同的模块目标装载地址都一样是不行的\",{\"1\":{\"75\":1}}],[\"如果foobar\",{\"1\":{\"73\":2}}],[\"如果f是一个存档文件\",{\"1\":{\"55\":1}}],[\"如果f是一个目标文件\",{\"1\":{\"55\":1}}],[\"如果p\",{\"1\":{\"67\":1}}],[\"如果将它们合并成一起映射的话只需要两个页面\",{\"1\":{\"67\":1}}],[\"如果链接过程中有弱符号大于强符号所使用的内存大小\",{\"1\":{\"57\":1}}],[\"如果当链接器完成对命令行上输入文件的扫描后\",{\"1\":{\"55\":1}}],[\"如果有要重定位的地方\",{\"1\":{\"54\":1}}],[\"如果每个段都分别有\",{\"1\":{\"48\":1}}],[\"如果出现多个强符号定义\",{\"1\":{\"43\":1}}],[\"如果是符号的定义并且该符号不是\",{\"1\":{\"39\":1}}],[\"如果符号是\",{\"1\":{\"39\":1}}],[\"如果符号不是定义在本目标文件中\",{\"1\":{\"38\":1}}],[\"如果符号定义在本目标文件中\",{\"1\":{\"38\":1}}],[\"如hello文件\",{\"1\":{\"10\":1}}],[\"低4位表示符号类型\",{\"1\":{\"37\":1}}],[\"局部符号\",{\"1\":{\"35\":1}}],[\"由没有联结条件的表关系返回的结果为笛卡儿积\",{\"1\":{\"174\":1}}],[\"由字面值\",{\"1\":{\"129\":1}}],[\"由此\",{\"1\":{\"89\":1}}],[\"由此找到了动态链接器本身的\",{\"1\":{\"88\":1}}],[\"由它完成所有的动态链接工作后再把控制权交给program1\",{\"1\":{\"73\":1}}],[\"由于动态链接下\",{\"1\":{\"84\":1}}],[\"由于可执行文件在运行时并不进行代码重定位\",{\"1\":{\"78\":1}}],[\"由于程序主模块的代码并不是地址无关代码\",{\"1\":{\"78\":1}}],[\"由于got本身是放在数据段的\",{\"1\":{\"77\":1}}],[\"由于global重复定义链接时将会出现重定义错误\",{\"1\":{\"43\":1}}],[\"由于装载时重定位的方法需要修改指令\",{\"1\":{\"76\":1}}],[\"由于虚拟存储的也映射都是以页为单位\",{\"1\":{\"64\":1}}],[\"由于此时还并没有进行链接\",{\"1\":{\"52\":1}}],[\"由于编译目标文件b时无法确认var的目标地址\",{\"1\":{\"14\":1}}],[\"由编译器生成\",{\"1\":{\"35\":1}}],[\"也是合法的范围\",{\"1\":{\"138\":1}}],[\"也不会把它检索出来\",{\"1\":{\"150\":1}}],[\"也不能匹配用值null作为产品名的行\",{\"1\":{\"130\":1}}],[\"也不是由环境参数决定\",{\"1\":{\"82\":1}}],[\"也可以用来确定特定列或行的平均值\",{\"1\":{\"154\":1}}],[\"也可以用来返回特定列或行的平均值\",{\"1\":{\"154\":1}}],[\"也可以使用后者\",{\"1\":{\"137\":1}}],[\"也可以使用readelf查看\",{\"1\":{\"82\":1}}],[\"也可能引用其它目标文件的符号\",{\"1\":{\"55\":1}}],[\"也被称为全局偏移表\",{\"1\":{\"77\":1}}],[\"也被称为符号引用\",{\"1\":{\"35\":1}}],[\"也会受到限制\",{\"1\":{\"75\":1}}],[\"也会有一个叫\",{\"1\":{\"54\":1}}],[\"也将\",{\"1\":{\"49\":1}}],[\"也就是类型四\",{\"1\":{\"78\":1}}],[\"也就是说a2\",{\"1\":{\"89\":1}}],[\"也就是说代码不会使用这种pic机制\",{\"1\":{\"78\":1}}],[\"也就是说它是一个重定位表\",{\"1\":{\"33\":1}}],[\"也就是got中偏移0\",{\"1\":{\"77\":1}}],[\"也就是所映射之后在进程虚拟内存中只有一个相对应的vma\",{\"1\":{\"67\":1}}],[\"也就是4096字节\",{\"1\":{\"48\":1}}],[\"却没有在本文件中定义\",{\"1\":{\"35\":1}}],[\"除聚集计算语句外\",{\"1\":{\"163\":1}}],[\"除\",{\"1\":{\"146\":1}}],[\"除非绝对有必要\",{\"1\":{\"132\":1}}],[\"除了不可以使用全局变量和静态变量之外\",{\"1\":{\"88\":1}}],[\"除了地址冲突外\",{\"1\":{\"75\":1}}],[\"除了文件类型与普通程序不同之外\",{\"1\":{\"73\":1}}],[\"除了可执行文件之外\",{\"1\":{\"73\":1}}],[\"除了\",{\"1\":{\"55\":1}}],[\"除了函数和变量外\",{\"1\":{\"35\":1}}],[\"除此之外每个描述符对应一个段\",{\"1\":{\"28\":1}}],[\"叫做符号值\",{\"1\":{\"35\":1}}],[\"每8字节一项\",{\"1\":{\"77\":1}}],[\"每一个被重定位的地方叫一个重定位入口\",{\"1\":{\"54\":1}}],[\"每一个目标文件都有一个相应的符号表\",{\"1\":{\"35\":1}}],[\"每个段的属性\",{\"1\":{\"86\":1}}],[\"每个条目都有一个相匹配的plt条目\",{\"1\":{\"80\":1}}],[\"每个条目都负责调用一个具体的函数\",{\"1\":{\"80\":1}}],[\"每个被可执行程序调用的库函数都有它自己的plt条目\",{\"1\":{\"80\":1}}],[\"每个外部函数在plt中都有一个相应的项\",{\"1\":{\"80\":1}}],[\"每个重定位入口都是对一个符号的引用\",{\"1\":{\"55\":1}}],[\"每个目标文件都可能定义一些符号\",{\"1\":{\"55\":1}}],[\"每个名字前是名字字符串长度\",{\"1\":{\"41\":1}}],[\"每个符号都有一个对应的值\",{\"1\":{\"39\":1}}],[\"每个定义的符号都有一个对应的值\",{\"1\":{\"35\":1}}],[\"每个elf64\",{\"1\":{\"28\":1}}],[\"每个要修正的地方叫一个\",{\"1\":{\"14\":1}}],[\"这将使故障排除更为简单\",{\"1\":{\"184\":1}}],[\"这将会使得管理这些模块的地址将是一件无比繁琐的事情\",{\"1\":{\"75\":1}}],[\"这条select语句使用了关键字outer\",{\"1\":{\"182\":1}}],[\"这可能会改变计算值\",{\"1\":{\"164\":1}}],[\"这使得能对分组进行嵌套\",{\"1\":{\"163\":1}}],[\"这导致对每个vend\",{\"1\":{\"163\":1}}],[\"这里\",{\"1\":{\"175\":1}}],[\"这里有另一种理解方法\",{\"1\":{\"164\":1}}],[\"这里已经出问题了因为只限制了1002商家的产品要大于等于10$\",{\"1\":{\"125\":1}}],[\"这里是链接成可执行文件ab后在可执行文件ab中的偏移量\",{\"1\":{\"50\":1}}],[\"这一点已经说明了为什么\",{\"1\":{\"89\":1}}],[\"这一步所做的是虚拟空间与可执行文件的映射关系\",{\"1\":{\"64\":1}}],[\"这一步中映射的是虚拟空间到实际物理内存的映射关系\",{\"1\":{\"64\":1}}],[\"这一步连接器将能够获得所有输入目标文件的段长度\",{\"1\":{\"49\":1}}],[\"这取决于链接器\",{\"1\":{\"89\":1}}],[\"这时动态链接器将进程的控制权交给程序的入口并且开始执行\",{\"1\":{\"90\":1}}],[\"这时\",{\"1\":{\"81\":1}}],[\"这时候就只能使用分组了\",{\"1\":{\"162\":1}}],[\"这时候就需要调用动态链接器中的某个函数来完成地址绑定工作\",{\"1\":{\"80\":1}}],[\"这时候链接器必须确定foobar\",{\"1\":{\"73\":1}}],[\"这时候连接器就会查找所有输入目标文件的符号表组成的全局符号表\",{\"1\":{\"55\":1}}],[\"这在程序实际运行过程中肯定是不可行的\",{\"1\":{\"78\":1}}],[\"这是union的默认行为\",{\"1\":{\"190\":1}}],[\"这是保证数据正确排序的唯一方法\",{\"1\":{\"165\":1}}],[\"这是一个重要的区别\",{\"1\":{\"164\":1}}],[\"这是一个引用\",{\"1\":{\"43\":1}}],[\"这是addvec的plt条目\",{\"1\":{\"80\":1}}],[\"这是对模块间调用\",{\"1\":{\"77\":1}}],[\"这是原书可出的可能会和实际不同\",{\"1\":{\"77\":1}}],[\"这些组合查询通常称为并\",{\"1\":{\"186\":1}}],[\"这些信息往往由操作系统传递给动态链接器\",{\"1\":{\"86\":1}}],[\"这些步骤和静态链接情况下的装载基本无异\",{\"1\":{\"81\":1}}],[\"这些其它模块的全局变量的地址是和模块装载地址相关的\",{\"1\":{\"77\":1}}],[\"这些映射关系可以等到页错误时再进行映射\",{\"1\":{\"64\":1}}],[\"这其实就是我们要用到lib\",{\"1\":{\"73\":1}}],[\"这就是动态链接\",{\"1\":{\"72\":1}}],[\"这就是传统意义的\",{\"1\":{\"64\":1}}],[\"这部分\",{\"1\":{\"67\":1}}],[\"这样该变量在运行时实际上最终只有一个实例\",{\"1\":{\"78\":1}}],[\"这样指令部分就可以保持不变\",{\"1\":{\"77\":1}}],[\"这样就失去了动态链接节省内存的一大优势\",{\"1\":{\"77\":1}}],[\"这样c和原先的模块a的目标地址就冲突了\",{\"1\":{\"75\":1}}],[\"这样链接器就可以堆foobar\",{\"1\":{\"73\":1}}],[\"这样做的好处是进程中的某一段区域就是整个elf文件的映射\",{\"1\":{\"69\":1}}],[\"这样做的好处是可以明显减少页面内部内存碎片\",{\"1\":{\"67\":1}}],[\"这样程序才得以正确运行\",{\"1\":{\"64\":1}}],[\"这样的解析通常会伴随一个顺序问题\",{\"1\":{\"55\":1}}],[\"这样的段\",{\"1\":{\"49\":1}}],[\"这两种技术在不同的查询中性能也不同\",{\"1\":{\"186\":1}}],[\"这两种重定位类型支持x86\",{\"1\":{\"56\":1}}],[\"这两个参数的值在我们的列子中分别为liba\",{\"1\":{\"80\":1}}],[\"这两个段分别映射的话要占用三个页面\",{\"1\":{\"67\":1}}],[\"这两个概念同样适用于变量\",{\"1\":{\"35\":1}}],[\"这会导致大量的内存碎片\",{\"1\":{\"48\":1}}],[\"这种处理可能是非常耗费资源的\",{\"1\":{\"176\":1}}],[\"这种联结也称为内部联结\",{\"1\":{\"175\":1}}],[\"这种类型的联结称为外部联结\",{\"1\":{\"182\":1}}],[\"这种类型的重定位实际上就是基址重置\",{\"1\":{\"85\":1}}],[\"这种类型存储日期及时间值\",{\"1\":{\"150\":1}}],[\"这种一个共享对象里面的全局符号被另一个共享对象的同名全局符号覆盖的现象又被称为共享对象全局符号介入\",{\"1\":{\"89\":1}}],[\"这种具有一定限制条件的启动代码往往被称为自举\",{\"1\":{\"88\":1}}],[\"这种方法使用了一些精巧的指令序列来完成\",{\"1\":{\"80\":1}}],[\"这种方案就是地址无关代码\",{\"1\":{\"77\":1}}],[\"这种情况是最简单的\",{\"1\":{\"77\":1}}],[\"这种做法就叫做静态共享库\",{\"1\":{\"75\":1}}],[\"这种做法是很浪费内存空间的\",{\"1\":{\"48\":1}}],[\"这种映射情况下对于一个物理页来说可能同时包含多个段\",{\"1\":{\"69\":1}}],[\"这种映射关系只是保存在操作系统内部的一个数据结构\",{\"1\":{\"64\":1}}],[\"这种vma叫做匿名虚拟内存区域\",{\"1\":{\"68\":1}}],[\"这种未定义的符号都是该目标文件的重定位项\",{\"1\":{\"55\":1}}],[\"这种被称为强引用\",{\"1\":{\"44\":1}}],[\"这个例子显然将返回0\",{\"1\":{\"142\":1}}],[\"这个例子中为1和5\",{\"1\":{\"141\":1}}],[\"这个标志告诉链接器\",{\"1\":{\"93\":1}}],[\"这个选项会告诉c的预处理器在搜索系统目录前\",{\"1\":{\"92\":1}}],[\"这个段保存了动态链接所需要的基本信息\",{\"1\":{\"83\":1}}],[\"这个字符串就是可执行文件所需要的动态链接器的路径\",{\"1\":{\"82\":1}}],[\"这个间接跳转只是简单的把控制传送回plt\",{\"1\":{\"80\":1}}],[\"这个重定位表里面里面包含了\",{\"1\":{\"79\":1}}],[\"这个在elf中被称为不同的视图\",{\"1\":{\"67\":1}}],[\"这个可执行文件共有10个segment\",{\"1\":{\"67\":1}}],[\"这个小的辅助代码就是所谓的覆盖管理器\",{\"1\":{\"61\":1}}],[\"这个集合中的文件会被合并起来形成可执行文件\",{\"1\":{\"55\":1}}],[\"这个相互衔接的过程实际上是目标文件之间对地址的引用\",{\"1\":{\"35\":1}}],[\"这个地址修正的过程也被叫做\",{\"1\":{\"14\":1}}],[\"了解数据库和表\",{\"0\":{\"100\":1}}],[\"了解本小节将有助于帮助理解链接过程中为什么会出现重复定义的问题\",{\"1\":{\"43\":1}}],[\"了foobar\",{\"1\":{\"84\":2}}],[\"了\",{\"1\":{\"67\":1}}],[\"了目标文件a中的函数\",{\"1\":{\"35\":1}}],[\"了函数\",{\"1\":{\"35\":1}}],[\"然后找出这个供应商生产的其他物品\",{\"1\":{\"180\":1}}],[\"然后按vend\",{\"1\":{\"164\":1}}],[\"然后将它相应的代码段和数据段映射到进程空间中\",{\"1\":{\"89\":1}}],[\"然后将该物理页分别映射两次\",{\"1\":{\"69\":1}}],[\"然后将该\",{\"1\":{\"64\":1}}],[\"然后链接器开始从集合中取一个所需的共享对象的名字\",{\"1\":{\"89\":1}}],[\"然后链接器开始寻址可执行文件所依赖的共享对象\",{\"1\":{\"89\":1}}],[\"然后根据当前的环境参数\",{\"1\":{\"81\":1}}],[\"然后根据got中变量所对应的项找到变量的目标地址\",{\"1\":{\"77\":1}}],[\"然后程序开始执行\",{\"1\":{\"81\":1}}],[\"然后从头部中的\",{\"1\":{\"81\":1}}],[\"然后通过got\",{\"1\":{\"80\":1}}],[\"然后进行符号查找地址重定位等工作\",{\"1\":{\"80\":1}}],[\"然后再进行间接跳转\",{\"1\":{\"80\":1}}],[\"然后间接寻址\",{\"1\":{\"80\":1}}],[\"然后我们根据变量地址在got中的偏移量就可以得到变量的地址\",{\"1\":{\"77\":1}}],[\"然后填充got中的各个项\",{\"1\":{\"77\":1}}],[\"然后把控制权返还给进程\",{\"1\":{\"65\":1}}],[\"然后在物理内存中分配一个物理页面\",{\"1\":{\"65\":1}}],[\"然后编写一个小的辅助代码工具来管理这些模块何时应该驻留内存何时应该被替换掉\",{\"1\":{\"61\":1}}],[\"然后是各个名称空间和类的名字\",{\"1\":{\"41\":1}}],[\"然后使用字符串在表中的偏移来引用字符串\",{\"1\":{\"34\":1}}],[\"然后安装需要将他们\",{\"1\":{\"12\":1}}],[\"一样\",{\"1\":{\"131\":1,\"157\":1}}],[\"一定要验证返回数据中确实给出了被过滤列具有null的行\",{\"1\":{\"120\":1}}],[\"一般也很有用\",{\"1\":{\"184\":1}}],[\"一般我们使用内部联结\",{\"1\":{\"184\":1}}],[\"一般在使用group\",{\"1\":{\"165\":1}}],[\"一般用来找出最大的数值或日期值\",{\"1\":{\"156\":1}}],[\"一般为3306\",{\"1\":{\"98\":1}}],[\"一般叫做外部符号\",{\"1\":{\"35\":1}}],[\"一旦共享对象被装载到地址a\",{\"1\":{\"85\":1}}],[\"一旦模块装载地址确定\",{\"1\":{\"76\":1}}],[\"一旦变更\",{\"1\":{\"75\":1}}],[\"一旦该可执行文件被装载\",{\"1\":{\"64\":1}}],[\"一份seg0\",{\"1\":{\"69\":1}}],[\"一些类型的重定位要使用它对被修改引用的值做偏移调整\",{\"1\":{\"56\":1}}],[\"一个表的唯一标识\",{\"1\":{\"172\":1}}],[\"一个更好的办法是使用函数去掉首尾空格\",{\"1\":{\"130\":1}}],[\"一个以地址无关方式编译的可执行文件被称为地址无关可执行文件\",{\"1\":{\"77\":1}}],[\"一个\",{\"1\":{\"67\":1}}],[\"一个pc相对地址就是距程序计数器\",{\"1\":{\"56\":1}}],[\"一个未解析的符号集合u\",{\"1\":{\"55\":1}}],[\"一个重定位表同时也是elf的一个段\",{\"1\":{\"33\":1}}],[\"一书中也有讲解\",{\"1\":{\"43\":1}}],[\"一种常见的做法是把字符串集中起来存放到一个表\",{\"1\":{\"34\":1}}],[\"一组目标文件\",{\"1\":{\"15\":1}}],[\"是正则表达式语言中一个特殊的字符\",{\"1\":{\"135\":1}}],[\"是对函数引用的修正\",{\"1\":{\"85\":1}}],[\"是数据段的重定位表\",{\"1\":{\"85\":1}}],[\"是lib\",{\"1\":{\"84\":1}}],[\"是program1的\",{\"1\":{\"84\":1}}],[\"是动态链接器在ld\",{\"1\":{\"80\":1}}],[\"是一个数组\",{\"1\":{\"80\":2}}],[\"是一个定义在动态共享对象中的函数\",{\"1\":{\"73\":1}}],[\"是从不同角度来划分同一个elf文件\",{\"1\":{\"67\":1}}],[\"是\",{\"1\":{\"33\":1,\"82\":1,\"166\":1}}],[\"是否必须使用\",{\"1\":{\"166\":1}}],[\"是否动态链接\",{\"1\":{\"18\":1}}],[\"是否静态链接\",{\"1\":{\"18\":1}}],[\"是否可执行等\",{\"1\":{\"31\":1}}],[\"是否可执行\",{\"1\":{\"18\":1}}],[\"为数据分组提供更细致的控制\",{\"1\":{\"163\":1}}],[\"为2005\",{\"1\":{\"150\":1}}],[\"为前导\",{\"1\":{\"139\":1}}],[\"为简化这种类型的集合\",{\"1\":{\"138\":1}}],[\"为搜索两个串之一\",{\"1\":{\"136\":1}}],[\"为区分大小写\",{\"1\":{\"135\":1}}],[\"为在搜索子句中使用通配符\",{\"1\":{\"129\":1}}],[\"为什么main的输出结果是两个a1\",{\"1\":{\"89\":1}}],[\"为访问变量b\",{\"1\":{\"77\":1}}],[\"为那些已知的模块预留足够的空间\",{\"1\":{\"75\":1}}],[\"为了从右边的表中选择所有行\",{\"1\":{\"182\":1}}],[\"为了获得多个列的平均值\",{\"1\":{\"154\":1}}],[\"为了匹配特殊字符\",{\"1\":{\"139\":1}}],[\"为了加快符号的查找过程\",{\"1\":{\"84\":1}}],[\"为了完成动态链接\",{\"1\":{\"84\":1}}],[\"为了能够使得链接过程正常进行\",{\"1\":{\"78\":1}}],[\"为了解决这个模块装载地址固定的问题\",{\"1\":{\"75\":1}}],[\"为了解决这个问题unix系统让那些各个段接壤部分共享一个物理页\",{\"1\":{\"69\":1}}],[\"为了实现动态链接\",{\"1\":{\"75\":1}}],[\"为\",{\"1\":{\"33\":1}}],[\"为1032\",{\"1\":{\"29\":1}}],[\"决定了该段在进程虚拟地址空间中的属性\",{\"1\":{\"31\":1}}],[\"之所以+0x04是因为内存对齐的原因\",{\"1\":{\"29\":1}}],[\"的那些分组\",{\"1\":{\"164\":1}}],[\"的值\",{\"1\":{\"163\":1}}],[\"的功能正好与max\",{\"1\":{\"157\":1}}],[\"的商品\",{\"1\":{\"117\":1}}],[\"的地址为0x000008801234\",{\"1\":{\"85\":1}}],[\"的地址\",{\"1\":{\"83\":3,\"85\":2}}],[\"的地址也已经确定了\",{\"1\":{\"50\":1}}],[\"的缩写\",{\"1\":{\"82\":1}}],[\"的虚拟地址\",{\"1\":{\"81\":1}}],[\"的间接跳转会将控制直接转移到addvec\",{\"1\":{\"80\":1}}],[\"的方法来实现\",{\"1\":{\"80\":1}}],[\"的做法\",{\"1\":{\"80\":1}}],[\"的反汇编代码\",{\"1\":{\"77\":1}}],[\"的基本思想\",{\"1\":{\"72\":1}}],[\"的p\",{\"1\":{\"67\":1}}],[\"的部分则全部填充为\",{\"1\":{\"67\":1}}],[\"的信息\",{\"1\":{\"67\":1}}],[\"的角度来看就是执行视图\",{\"1\":{\"67\":1}}],[\"的角度来看elf文件就是链接视图\",{\"1\":{\"67\":1}}],[\"的结构叫程序头\",{\"1\":{\"67\":1}}],[\"的当前运行时值的偏移量\",{\"1\":{\"56\":1}}],[\"的\",{\"1\":{\"50\":2,\"55\":1,\"150\":2}}],[\"的大括号内部的代码当作c语言代码处理\",{\"1\":{\"42\":1}}],[\"的工具来解析被修饰的名称\",{\"1\":{\"41\":1}}],[\"的这种方式\",{\"1\":{\"40\":1}}],[\"的重定位表\",{\"1\":{\"33\":1}}],[\"的段保存了代码段的重定位表\",{\"1\":{\"54\":1}}],[\"的段\",{\"1\":{\"33\":1,\"54\":1}}],[\"的偏移量为0x390文件大小为0x74\",{\"1\":{\"29\":1}}],[\"的包\",{\"1\":{\"15\":1}}],[\"字母就是\",{\"1\":{\"41\":1}}],[\"字节\",{\"1\":{\"29\":1}}],[\"字符串表\",{\"0\":{\"34\":1},\"1\":{\"34\":1}}],[\"字符串结尾包含字符串结束符\",{\"1\":{\"21\":1}}],[\"字符串字面量\",{\"1\":{\"21\":1}}],[\"数值处理函数\",{\"0\":{\"151\":1}}],[\"数组元素个数为段个数\",{\"1\":{\"28\":1}}],[\"数据将在最后规定的分组上进行汇总\",{\"1\":{\"163\":1}}],[\"数据分组\",{\"0\":{\"162\":1}}],[\"数据过滤\",{\"0\":{\"121\":1}}],[\"数据库不知道它们是否匹配\",{\"1\":{\"120\":1}}],[\"数据vam\",{\"1\":{\"68\":1}}],[\"数据段地址无关性\",{\"0\":{\"79\":1}}],[\"数据段结束地址\",{\"1\":{\"40\":1}}],[\"数据段和只读数据段\",{\"0\":{\"21\":1}}],[\"数据段和bss段\",{\"1\":{\"19\":1}}],[\"数据存储方式\",{\"1\":{\"25\":1}}],[\"with\",{\"1\":{\"98\":1,\"104\":4,\"163\":1,\"164\":4}}],[\"wimplicit\",{\"1\":{\"55\":1}}],[\"wl\",{\"1\":{\"93\":5}}],[\"wrap\",{\"1\":{\"93\":9}}],[\"write\",{\"1\":{\"28\":1,\"67\":1,\"68\":1,\"94\":2}}],[\"where语句和on语句一样\",{\"1\":{\"175\":1}}],[\"where排除的行不包括在分组中\",{\"1\":{\"164\":1}}],[\"where在数据分组前进行过滤\",{\"1\":{\"164\":1}}],[\"where子句的重要性\",{\"0\":{\"174\":1}}],[\"where子句过滤所有prod\",{\"1\":{\"164\":1}}],[\"where子句使用soundex\",{\"1\":{\"149\":1}}],[\"where子句中用来指定要匹配值的清单的关键字\",{\"1\":{\"126\":1}}],[\"where子句操作符\",{\"0\":{\"116\":1}}],[\"where\",{\"1\":{\"115\":1,\"117\":3,\"118\":1,\"119\":2,\"120\":2,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"127\":2,\"130\":2,\"131\":2,\"135\":2,\"136\":1,\"137\":2,\"138\":1,\"139\":2,\"141\":2,\"142\":1,\"146\":2,\"149\":2,\"150\":3,\"154\":1,\"158\":2,\"159\":1,\"162\":1,\"164\":1,\"166\":1,\"168\":8,\"169\":2,\"173\":1,\"175\":1,\"176\":1,\"178\":1,\"180\":3,\"181\":1,\"188\":4,\"190\":2,\"191\":2}}],[\"when\",{\"1\":{\"86\":2}}],[\"while\",{\"1\":{\"67\":1}}],[\"welcome\",{\"1\":{\"98\":1}}],[\"we\",{\"1\":{\"86\":6}}],[\"weakref\",{\"1\":{\"44\":3}}],[\"weak2\",{\"1\":{\"43\":1}}],[\"weak\",{\"1\":{\"43\":4,\"44\":2,\"84\":4}}],[\"w\",{\"1\":{\"28\":1,\"58\":1,\"67\":1,\"68\":1}}],[\"wascals\",{\"1\":{\"169\":1,\"183\":1}}],[\"wat\",{\"1\":{\"67\":2}}],[\"warnings\",{\"1\":{\"100\":1}}],[\"warning\",{\"1\":{\"55\":3,\"57\":1,\"98\":1}}],[\"wa\",{\"1\":{\"28\":2,\"67\":7,\"77\":1,\"85\":3}}],[\"work\",{\"1\":{\"86\":2}}],[\"worker\",{\"1\":{\"68\":5,\"73\":10,\"89\":25}}],[\"word\",{\"1\":{\"25\":2,\"29\":4,\"36\":1,\"67\":2,\"83\":1}}],[\"world\",{\"1\":{\"6\":2,\"82\":1}}],[\"机器类型\",{\"0\":{\"27\":1},\"1\":{\"27\":1}}],[\"程序的入口地址等\",{\"1\":{\"86\":1}}],[\"程序开始正式执行\",{\"1\":{\"81\":1}}],[\"程序调用进入plt\",{\"1\":{\"80\":1}}],[\"程序模块之间包含了大量的函数引用\",{\"1\":{\"80\":1}}],[\"程序首先计算出变量b的地址在got中的位置\",{\"1\":{\"77\":1}}],[\"程序会先找到got\",{\"1\":{\"77\":1}}],[\"程序与动态库之间真正的链接工作是由动态链接器完成的\",{\"1\":{\"72\":1}}],[\"程序头表也是一个结构体数组\",{\"1\":{\"67\":1}}],[\"程序员在编写程序时必须手工将程序分割成若干块\",{\"1\":{\"61\":1}}],[\"程序结束地址\",{\"1\":{\"40\":1}}],[\"程序起始地址\",{\"1\":{\"40\":1}}],[\"程序入口和长度\",{\"1\":{\"25\":1}}],[\"程序构建的核心\",{\"1\":{\"8\":1}}],[\"硬件平台版本\",{\"1\":{\"25\":1}}],[\"硬件平台\",{\"1\":{\"25\":1}}],[\"运行库\",{\"1\":{\"88\":1}}],[\"运行时打桩\",{\"0\":{\"94\":1}}],[\"运行时引用符号地址\",{\"1\":{\"56\":1}}],[\"运行时引用符号的地址\",{\"1\":{\"56\":1}}],[\"运行时库\",{\"1\":{\"15\":1}}],[\"运行平台\",{\"1\":{\"25\":1}}],[\"版本\",{\"1\":{\"25\":1}}],[\"在以下段落中可以看到这一点\",{\"1\":{\"186\":1}}],[\"在单个查询中从不同的表返回类似结构的数据\",{\"1\":{\"186\":1}}],[\"在使用outer\",{\"1\":{\"182\":1}}],[\"在使用这种语法时\",{\"1\":{\"175\":1}}],[\"在上述例子中\",{\"1\":{\"182\":1}}],[\"在引用的列可能出现二义性时\",{\"1\":{\"173\":1}}],[\"在where子句中使用子查询\",{\"1\":{\"168\":1}}],[\"在建立分组时\",{\"1\":{\"163\":1}}],[\"在具体使用group\",{\"1\":{\"163\":1}}],[\"在用于文本数据时\",{\"1\":{\"156\":1,\"157\":1}}],[\"在mysql的select语句中\",{\"1\":{\"144\":1}}],[\"在确实需要使用通配符时\",{\"1\":{\"132\":1}}],[\"在保存词anvil\",{\"1\":{\"130\":1}}],[\"在搜索串中\",{\"1\":{\"130\":1}}],[\"在过滤数据时\",{\"1\":{\"120\":1}}],[\"在通过过滤选择出不具有特定值的行时\",{\"1\":{\"120\":1}}],[\"在一个联结中可以包含多个表\",{\"1\":{\"184\":1}}],[\"在一个列不包含值时\",{\"1\":{\"120\":1}}],[\"在一个程序运行过程中\",{\"1\":{\"80\":1}}],[\"在创建表时\",{\"1\":{\"120\":1}}],[\"在指定的两个值之间\",{\"1\":{\"116\":1}}],[\"在同时使用order\",{\"1\":{\"115\":1}}],[\"在给出order\",{\"1\":{\"113\":1}}],[\"在多个行具有相同的prod\",{\"1\":{\"111\":1}}],[\"在\",{\"1\":{\"89\":1}}],[\"在编写动态链接器时保证不使用任何系统库\",{\"1\":{\"88\":1}}],[\"在编译时\",{\"1\":{\"85\":1}}],[\"在编译时可以只使用\",{\"1\":{\"76\":1}}],[\"在编译器及连接器处理符号时\",{\"1\":{\"41\":1}}],[\"在linux中\",{\"1\":{\"82\":1}}],[\"在linux下\",{\"1\":{\"81\":1}}],[\"在静态链接情况下\",{\"1\":{\"81\":1}}],[\"在静态链接中就相当于普通函数的定义和引用\",{\"1\":{\"84\":1}}],[\"在静态链接中\",{\"1\":{\"73\":1,\"85\":1}}],[\"在把addvec的id\",{\"1\":{\"80\":1}}],[\"在第一次调用addvec时\",{\"1\":{\"80\":1}}],[\"在第一步的扫描和空间分配阶段\",{\"1\":{\"50\":1}}],[\"在这个例子中\",{\"1\":{\"149\":1}}],[\"在这个过程中间又增加了一层间接跳转\",{\"1\":{\"80\":1}}],[\"在这里就是动态符号字符串表\",{\"1\":{\"84\":1}}],[\"在这种情况下\",{\"1\":{\"69\":1}}],[\"在glibc中\",{\"1\":{\"80\":1}}],[\"在动态链接下\",{\"1\":{\"80\":1}}],[\"在动态链接的elf可执行文件中\",{\"1\":{\"82\":1}}],[\"在动态链接的实现中会提到\",{\"1\":{\"77\":1}}],[\"在动态链接的情况下\",{\"1\":{\"75\":1}}],[\"在它的\",{\"1\":{\"78\":1}}],[\"在某些平台上会有一些限制\",{\"1\":{\"77\":1}}],[\"在系统开始运行program1之前\",{\"1\":{\"73\":1}}],[\"在内存中所分配的空间大小超过文件中实际的大小\",{\"1\":{\"67\":1}}],[\"在32为的intel\",{\"1\":{\"64\":1}}],[\"在处理弱引用时\",{\"1\":{\"44\":1}}],[\"在其它文件为弱符号\",{\"1\":{\"43\":1}}],[\"在名称空间或在类里面的\",{\"1\":{\"41\":1}}],[\"在可执行文件中\",{\"1\":{\"39\":1}}],[\"在目标文件中\",{\"1\":{\"39\":2}}],[\"在本文件中引用的全局符号\",{\"1\":{\"35\":1}}],[\"在链接时\",{\"1\":{\"76\":1}}],[\"在链接中将函数和变量称为符号\",{\"1\":{\"35\":1}}],[\"在链接过程中\",{\"1\":{\"14\":1}}],[\"在simplesection\",{\"1\":{\"33\":1}}],[\"在文件中的偏移\",{\"1\":{\"24\":1}}],[\"该模型假设可执行目标文件中的代码和数据的总体大小小于2gb\",{\"1\":{\"56\":1}}],[\"该重定位表作用的elf文件中的那个段relocation\",{\"1\":{\"54\":1}}],[\"该表记录了目标文件中所用的所有符号\",{\"1\":{\"35\":1}}],[\"该表描述了elf文件包含的所有段的信息\",{\"1\":{\"24\":1}}],[\"该段在文件中存在\",{\"1\":{\"19\":1}}],[\"其id为dtntr\",{\"1\":{\"180\":1}}],[\"其实\",{\"1\":{\"175\":1}}],[\"其实可执行文件的真正指令和数据都没有被装入到内存中\",{\"1\":{\"65\":1}}],[\"其主要原因是因为我们在编译可执行程序时使用了\",{\"1\":{\"92\":1}}],[\"其次动态链接器本身所需要的全局和静态变量的重定位工作由本身完成\",{\"1\":{\"88\":1}}],[\"其地址需要在运行是被解析\",{\"1\":{\"80\":1}}],[\"其余的每个条目对应于一个被调用的函数\",{\"1\":{\"80\":1}}],[\"其基本思想是当函数第一次被用到时才进行绑定\",{\"1\":{\"80\":1}}],[\"其中需要使用组合查询\",{\"1\":{\"186\":1}}],[\"其中min\",{\"1\":{\"157\":1}}],[\"其中的被依赖的共享对象有动态链接器负责链接和装载\",{\"1\":{\"88\":1}}],[\"其中每个条目时8字节地址\",{\"1\":{\"80\":1}}],[\"其中每个条目时16字节代码\",{\"1\":{\"80\":1}}],[\"其中每个重定位表包含了一下信息\",{\"1\":{\"54\":1}}],[\"其中elf文件中与段有关的重要结构就是段表\",{\"1\":{\"24\":1}}],[\"其它mysql的show语句\",{\"1\":{\"100\":1}}],[\"其它几乎与普通程序一样\",{\"1\":{\"73\":1}}],[\"其它几个\",{\"1\":{\"55\":1}}],[\"其它的页都按照正常的页进行映射\",{\"1\":{\"69\":1}}],[\"其它类型的都是装载时起辅助作用\",{\"1\":{\"67\":1}}],[\"其它段\",{\"0\":{\"23\":1},\"1\":{\"23\":1}}],[\"其它\",{\"0\":{\"15\":1}}],[\"它完成where子句完成不了的工作\",{\"1\":{\"190\":1}}],[\"它基于两个表之间的相等测试\",{\"1\":{\"175\":1}}],[\"它包含另一个表的主键值\",{\"1\":{\"172\":1}}],[\"它包含了描述整个文件的基本属性\",{\"1\":{\"24\":1}}],[\"它只存储客户的id\",{\"1\":{\"168\":1}}],[\"它只关心一些和装载相关的问题\",{\"1\":{\"67\":1}}],[\"它返回指定列的最小值\",{\"1\":{\"157\":1}}],[\"它表示匹配任意字符\",{\"1\":{\"135\":1}}],[\"它必须位于order\",{\"1\":{\"113\":1}}],[\"它允许你劫持对共享库函数的调用\",{\"1\":{\"91\":1}}],[\"它也可以依赖于其它共享对象\",{\"1\":{\"88\":1}}],[\"它将开始做链接工作\",{\"1\":{\"86\":1}}],[\"它可能会包含绝对地址引用\",{\"1\":{\"85\":1}}],[\"它实际上位于\",{\"1\":{\"85\":1}}],[\"它所指出的是可执行文件\",{\"1\":{\"89\":1}}],[\"它所修正的位置位于\",{\"1\":{\"85\":2}}],[\"它所在的类和名称空间及其它信息\",{\"1\":{\"41\":1}}],[\"它初始化执行环境\",{\"1\":{\"80\":1}}],[\"它跳转到动态链接库中\",{\"1\":{\"80\":1}}],[\"它指向变量a\",{\"1\":{\"79\":1}}],[\"它引用这个全局变量的方式和普通数据访问方式一样\",{\"1\":{\"78\":1}}],[\"它位于0x3fc0\",{\"1\":{\"77\":1}}],[\"它们将分为一组\",{\"1\":{\"163\":1}}],[\"它们都是被操作系统用同样的方法映射至进程的虚拟地址空间\",{\"1\":{\"73\":1}}],[\"它们包含的分别是程序的可执行代码和初始化代码\",{\"1\":{\"67\":1}}],[\"它们在文件中和虚拟地址都要分配空间\",{\"1\":{\"49\":1}}],[\"它对应elf文件中偏移为0的\",{\"1\":{\"64\":1}}],[\"它在每个进程都有一份独立的副本\",{\"1\":{\"79\":1}}],[\"它在虚拟空间中的地址为0x08040800~0x08049000\",{\"1\":{\"64\":1}}],[\"它在文件中的大小为0x000e1\",{\"1\":{\"64\":1}}],[\"它就将在指令中编码的32位值加上pc的当前运行时值\",{\"1\":{\"56\":1}}],[\"它会合并和重定位e中的目标文件\",{\"1\":{\"55\":1}}],[\"它的行为与单条select语句中使用多个where子句条件一样\",{\"1\":{\"190\":1}}],[\"它的符号表会被合并到全局符号表中\",{\"1\":{\"89\":1}}],[\"它的重定位工作由动态链接器来完成\",{\"1\":{\"88\":1}}],[\"它的偏移为0x000000004018\",{\"1\":{\"85\":1}}],[\"它的属性为只读\",{\"1\":{\"64\":1}}],[\"它的虚拟地址为0x08048000\",{\"1\":{\"64\":1}}],[\"它的名称都是一样的\",{\"1\":{\"41\":1}}],[\"它的参数列表紧跟在\",{\"1\":{\"41\":1}}],[\"它的值就是该段的起始地址\",{\"1\":{\"35\":1}}],[\"它的\",{\"1\":{\"33\":1}}],[\"它的类型\",{\"1\":{\"33\":1}}],[\"它的类型为r\",{\"1\":{\"85\":1}}],[\"它的类型为\",{\"1\":{\"28\":1}}],[\"它是一种只读数据\",{\"1\":{\"21\":1}}],[\"符号的优先级\",{\"1\":{\"89\":1}}],[\"符号的定义通常被称为强符号\",{\"1\":{\"43\":1}}],[\"符号查找\",{\"1\":{\"80\":1}}],[\"符号未定义错误\",{\"1\":{\"55\":1}}],[\"符号解析\",{\"0\":{\"55\":1}}],[\"符号解析与重定位\",{\"0\":{\"51\":1},\"1\":{\"49\":1}}],[\"符号地址的确定\",{\"0\":{\"50\":1}}],[\"符号global占8byte\",{\"1\":{\"43\":1}}],[\"符号修饰\",{\"0\":{\"41\":1}}],[\"符号修饰与函数签名\",{\"1\":{\"40\":1}}],[\"符号值\",{\"0\":{\"39\":1}}],[\"符号值就是它们的地址\",{\"1\":{\"35\":1}}],[\"符号所在段\",{\"0\":{\"38\":1},\"1\":{\"38\":1}}],[\"符号类型和绑定\",{\"1\":{\"37\":1}}],[\"符号类型和绑定类型\",{\"0\":{\"37\":1}}],[\"符号是链接中的粘合剂\",{\"1\":{\"35\":1}}],[\"符号表等\",{\"1\":{\"32\":1}}],[\"符号\",{\"0\":{\"35\":1},\"1\":{\"22\":1}}],[\"符号决议和重定位\",{\"1\":{\"13\":1}}],[\"97\",{\"1\":{\"146\":1}}],[\"998000\",{\"1\":{\"159\":1}}],[\"99\",{\"1\":{\"103\":4,\"104\":4,\"111\":4,\"112\":8,\"117\":6,\"119\":6,\"124\":1,\"126\":1,\"127\":6,\"146\":4,\"164\":4,\"173\":4,\"174\":24,\"175\":8,\"176\":2,\"188\":8,\"190\":4,\"191\":4}}],[\"96\",{\"1\":{\"77\":3}}],[\"9899\",{\"1\":{\"69\":1}}],[\"9\",{\"0\":{\"148\":1,\"149\":1,\"150\":1,\"151\":1},\"1\":{\"20\":1,\"22\":1,\"28\":2,\"39\":1,\"49\":1,\"67\":1,\"98\":1,\"100\":2,\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"117\":3,\"119\":2,\"124\":1,\"126\":1,\"127\":2,\"138\":2,\"140\":3,\"141\":2,\"142\":2,\"146\":2,\"150\":1,\"164\":1,\"173\":1,\"174\":6,\"175\":2,\"176\":1,\"188\":2,\"190\":2,\"191\":1}}],[\"9008018\",{\"1\":{\"40\":2}}],[\"9008010\",{\"1\":{\"40\":2}}],[\"9005205\",{\"1\":{\"40\":3}}],[\"9004000\",{\"1\":{\"40\":1}}],[\"90010000\",{\"1\":{\"20\":1}}],[\"90\",{\"1\":{\"20\":1,\"146\":1}}],[\"90c9c3f3\",{\"1\":{\"20\":1}}],[\"<=\",{\"1\":{\"116\":1,\"117\":1,\"119\":1,\"123\":1,\"188\":2,\"190\":1,\"191\":1}}],[\"<>和\",{\"1\":{\"118\":1}}],[\"<>\",{\"1\":{\"116\":1,\"118\":1}}],[\"<表名>一个效果\",{\"1\":{\"100\":1}}],[\"<malloc\",{\"1\":{\"91\":2}}],[\"<main+0x4d>\",{\"1\":{\"52\":1}}],[\"<main+0x48>\",{\"1\":{\"52\":1,\"53\":1}}],[\"<main+0x31>\",{\"1\":{\"52\":2}}],[\"<main+0x32>\",{\"1\":{\"20\":1}}],[\"<main+0xf>\",{\"1\":{\"52\":1}}],[\"<main+0x1f>\",{\"1\":{\"20\":1}}],[\"<main+0x19>\",{\"1\":{\"20\":1}}],[\"<main>\",{\"1\":{\"20\":1,\"52\":1,\"53\":1}}],[\"<elf\",{\"1\":{\"86\":1}}],[\"<ext>\",{\"1\":{\"77\":2}}],[\"<ext\",{\"1\":{\"77\":5}}],[\"<dlfcn\",{\"1\":{\"80\":1,\"94\":1}}],[\"<foo>\",{\"1\":{\"77\":3}}],[\"<func1+0x28>\",{\"1\":{\"20\":1}}],[\"<func1+0x1b>\",{\"1\":{\"20\":1}}],[\"<func1>\",{\"1\":{\"20\":1}}],[\"<b>\",{\"1\":{\"77\":3}}],[\"<bar>\",{\"1\":{\"77\":3}}],[\"<bar+0x2ecf>\",{\"1\":{\"77\":1,\"80\":1}}],[\"<bar\",{\"1\":{\"77\":3,\"80\":1}}],[\"<a>\",{\"1\":{\"77\":3}}],[\"<unistd\",{\"1\":{\"67\":1,\"73\":1,\"94\":1}}],[\"<stdlib\",{\"1\":{\"80\":1,\"91\":1,\"94\":1}}],[\"<stdio\",{\"1\":{\"6\":1,\"40\":1,\"42\":1,\"44\":1,\"73\":2,\"80\":1,\"82\":1,\"84\":1,\"89\":3,\"91\":2,\"93\":1,\"94\":1}}],[\"<swap>\",{\"1\":{\"53\":2}}],[\"<shared>\",{\"1\":{\"53\":1}}],[\"<pthread\",{\"1\":{\"44\":1}}],[\"<\",{\"1\":{\"20\":1,\"53\":1,\"80\":1,\"116\":1,\"117\":1,\"142\":1}}],[\"trim移除左右两边的空格\",{\"1\":{\"144\":1}}],[\"trademarks\",{\"1\":{\"98\":1}}],[\"trademark\",{\"1\":{\"98\":1}}],[\"tnt2\",{\"1\":{\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"123\":1,\"124\":1,\"125\":2,\"146\":2,\"164\":1,\"168\":3,\"178\":1,\"180\":2}}],[\"tnt1\",{\"1\":{\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"123\":1,\"124\":1,\"125\":1,\"164\":1,\"180\":2,\"188\":2,\"190\":1,\"191\":1}}],[\"tnt\",{\"1\":{\"102\":2,\"103\":2,\"104\":4,\"107\":4,\"110\":2,\"111\":2,\"112\":4,\"115\":1,\"117\":3,\"119\":2,\"123\":2,\"124\":2,\"125\":3,\"126\":2,\"141\":2,\"164\":4,\"173\":2,\"174\":12,\"175\":4,\"176\":1,\"180\":4}}],[\"title\",{\"1\":{\"145\":2}}],[\"time\",{\"1\":{\"76\":2,\"150\":1}}],[\"tip\",{\"1\":{\"40\":1}}],[\"test|grep\",{\"1\":{\"82\":1}}],[\"test\",{\"1\":{\"82\":5,\"83\":2}}],[\"terminated\",{\"1\":{\"73\":1}}],[\"text为4097字节\",{\"1\":{\"67\":1}}],[\"textrel\",{\"1\":{\"55\":1}}],[\"text+0x39\",{\"1\":{\"55\":1}}],[\"text+0x29\",{\"1\":{\"55\":1}}],[\"text段的vma\",{\"1\":{\"64\":1}}],[\"text段对齐后实际占用的虚拟内存大小为0x1000\",{\"1\":{\"64\":1}}],[\"text段\",{\"1\":{\"48\":1}}],[\"text\",{\"1\":{\"18\":1,\"19\":2,\"20\":2,\"22\":1,\"28\":2,\"29\":1,\"33\":3,\"35\":1,\"39\":1,\"40\":2,\"49\":6,\"50\":3,\"52\":1,\"53\":1,\"54\":7,\"55\":2,\"58\":8,\"64\":2,\"67\":4,\"73\":1,\"85\":2}}],[\"tbss\",{\"1\":{\"67\":2}}],[\"tbl\",{\"1\":{\"29\":1,\"36\":1}}],[\"tdata\",{\"1\":{\"67\":4}}],[\"tmp\",{\"1\":{\"55\":2,\"57\":2}}],[\"tan\",{\"1\":{\"151\":1}}],[\"tag类型\",{\"1\":{\"83\":1}}],[\"tag\",{\"1\":{\"49\":1,\"67\":3,\"83\":3}}],[\"tables\",{\"1\":{\"100\":2}}],[\"table\",{\"1\":{\"22\":1,\"24\":1,\"25\":8,\"29\":1,\"34\":2,\"35\":1,\"39\":1,\"55\":1,\"67\":3,\"77\":2,\"80\":1,\"84\":5,\"89\":1,\"100\":1,\"108\":1}}],[\"tls\",{\"1\":{\"28\":1,\"67\":2}}],[\"total\",{\"1\":{\"158\":2}}],[\"ton的缩写\",{\"1\":{\"137\":1}}],[\"ton为\",{\"1\":{\"137\":1}}],[\"ton\",{\"1\":{\"102\":3,\"103\":3,\"104\":6,\"106\":3,\"107\":6,\"110\":3,\"111\":3,\"112\":6,\"117\":4,\"118\":3,\"119\":4,\"127\":6,\"130\":3,\"131\":7,\"137\":5,\"138\":5,\"142\":3,\"164\":6,\"173\":3,\"174\":18,\"175\":6,\"176\":2}}],[\"to\",{\"1\":{\"28\":1,\"29\":1,\"55\":2,\"67\":2,\"73\":1,\"86\":3,\"98\":2}}],[\"though\",{\"1\":{\"86\":2}}],[\"that\",{\"1\":{\"86\":2}}],[\"than\",{\"1\":{\"57\":1}}],[\"their\",{\"1\":{\"98\":1}}],[\"them\",{\"1\":{\"86\":1}}],[\"these\",{\"1\":{\"86\":1}}],[\"the\",{\"1\":{\"86\":7,\"98\":3}}],[\"there\",{\"1\":{\"28\":1,\"67\":2,\"73\":1,\"77\":1}}],[\"thread\",{\"1\":{\"44\":4}}],[\"this\",{\"1\":{\"25\":1,\"44\":4,\"86\":1}}],[\"types\",{\"1\":{\"86\":1}}],[\"typedef\",{\"1\":{\"25\":1,\"29\":1,\"36\":1,\"54\":1,\"56\":1,\"67\":1,\"83\":2,\"86\":2}}],[\"type\",{\"0\":{\"30\":1},\"1\":{\"22\":1,\"25\":3,\"28\":1,\"29\":2,\"30\":1,\"33\":2,\"36\":1,\"37\":1,\"39\":1,\"54\":5,\"55\":1,\"56\":3,\"67\":5,\"73\":2,\"77\":3,\"83\":3,\"84\":1,\"85\":2,\"86\":4,\"98\":2,\"100\":2}}],[\"t\",{\"1\":{\"20\":1,\"28\":1,\"35\":2,\"44\":2,\"58\":2,\"67\":1,\"86\":9,\"91\":2,\"93\":2,\"94\":2,\"140\":2}}],[\"认为它在elf文件中也不存在\",{\"1\":{\"19\":1}}],[\"段是由程序初始化部分代码负责执行的\",{\"1\":{\"90\":1}}],[\"段中的代码\",{\"1\":{\"90\":2}}],[\"段中\",{\"1\":{\"89\":1}}],[\"段所指定的路径的共享对象\",{\"1\":{\"82\":1}}],[\"段所在的位置\",{\"1\":{\"19\":1}}],[\"段还有一个副本\",{\"1\":{\"78\":1}}],[\"段创建一个global变量的副本\",{\"1\":{\"78\":1}}],[\"段地址对齐\",{\"0\":{\"69\":1}}],[\"段和\",{\"1\":{\"67\":1,\"90\":1}}],[\"段位于虚拟地址空间0x0000000000001060\",{\"1\":{\"50\":1}}],[\"段合并在一起看做是一个\",{\"1\":{\"67\":1}}],[\"段合并\",{\"1\":{\"49\":1}}],[\"段等\",{\"1\":{\"49\":1}}],[\"段\",{\"0\":{\"82\":1,\"83\":1},\"1\":{\"49\":2,\"69\":1,\"82\":1,\"83\":1,\"88\":1,\"89\":1,\"90\":2}}],[\"段名叫\",{\"1\":{\"80\":1}}],[\"段名\",{\"1\":{\"35\":1}}],[\"段的偏移地址\",{\"1\":{\"88\":1}}],[\"段的偏移量为x\",{\"1\":{\"50\":1}}],[\"段的地址\",{\"1\":{\"85\":1}}],[\"段的内容\",{\"1\":{\"83\":1}}],[\"段的结构\",{\"1\":{\"83\":1}}],[\"段的起始地址为0x0000000000004000\",{\"1\":{\"50\":1}}],[\"段的起始地址为0x0000000000001060\",{\"1\":{\"50\":1}}],[\"段的装载地址和空间的对齐单位是页\",{\"1\":{\"48\":1}}],[\"段的链接信息\",{\"0\":{\"32\":1},\"1\":{\"32\":1}}],[\"段的标志位\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"段的类型\",{\"0\":{\"30\":1},\"1\":{\"30\":1}}],[\"段的长度\",{\"1\":{\"19\":1,\"24\":1}}],[\"段描述符的结构\",{\"0\":{\"29\":1}}],[\"段数量\",{\"1\":{\"25\":1}}],[\"段偏移\",{\"1\":{\"19\":1}}],[\"段表字符串表\",{\"1\":{\"34\":1}}],[\"段表的最后一个元素\",{\"1\":{\"29\":1}}],[\"段表的结构以elf64\",{\"1\":{\"28\":1}}],[\"段表结构解析\",{\"1\":{\"29\":1}}],[\"段表用于保存这些段的基本属性结构\",{\"1\":{\"28\":1}}],[\"段表用来描述一个文件中各个段的数组\",{\"1\":{\"18\":1}}],[\"段表\",{\"0\":{\"28\":1}}],[\"段表位置和长度\",{\"1\":{\"25\":1}}],[\"段表描述了文件中各个段在文件中的偏移位置及段的属性等\",{\"1\":{\"18\":1}}],[\"只可能使用选择列或表达式列\",{\"1\":{\"165\":1}}],[\"只包含不同的值\",{\"1\":{\"159\":1}}],[\"只用于单个列\",{\"1\":{\"154\":1}}],[\"只在\",{\"1\":{\"142\":1}}],[\"只在编译器内部可见\",{\"1\":{\"35\":1}}],[\"只能用来确定特定数值列的平均值\",{\"1\":{\"154\":1}}],[\"只能使用is\",{\"1\":{\"120\":1}}],[\"只能将movq指令的目标地址置0\",{\"1\":{\"14\":1}}],[\"只保存了与动态链接相关的符号\",{\"1\":{\"84\":1}}],[\"只显示了部分数据\",{\"1\":{\"77\":1}}],[\"只是增加了一些全局函数或变量\",{\"1\":{\"75\":1}}],[\"只读\",{\"1\":{\"69\":1}}],[\"只读数据段\",{\"1\":{\"19\":1}}],[\"只有段的类型是与链接\",{\"1\":{\"32\":1}}],[\"注意所使用的联结类型\",{\"1\":{\"184\":1}}],[\"注意\",{\"1\":{\"150\":2,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"163\":1,\"165\":1,\"168\":1,\"173\":1,\"176\":1,\"190\":2}}],[\"注意null\",{\"1\":{\"130\":1}}],[\"注意尾空格\",{\"1\":{\"130\":1}}],[\"注意事项\",{\"1\":{\"130\":1}}],[\"注意不是入口地址\",{\"1\":{\"40\":1}}],[\"注意编译时使用了\",{\"1\":{\"39\":1}}],[\"注意对于初始化为0的全局变量则不行\",{\"1\":{\"22\":1}}],[\"注释信息段\",{\"1\":{\"19\":1}}],[\"注\",{\"1\":{\"19\":1,\"24\":1,\"29\":1,\"41\":2,\"42\":1,\"43\":2,\"45\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"52\":1,\"54\":1,\"55\":2,\"57\":1,\"58\":1,\"61\":1,\"62\":1,\"65\":1,\"67\":1,\"68\":1,\"73\":2,\"75\":1,\"77\":3,\"80\":2,\"82\":1,\"84\":1,\"86\":1,\"88\":1,\"89\":3,\"130\":3,\"135\":1,\"137\":1,\"138\":1,\"142\":1,\"144\":1,\"154\":1,\"156\":1,\"157\":1,\"158\":1,\"162\":1,\"163\":1,\"164\":1,\"169\":1,\"181\":1,\"186\":1}}],[\"7838362d\",{\"1\":{\"82\":1}}],[\"72\",{\"1\":{\"77\":2}}],[\"711\",{\"1\":{\"67\":1}}],[\"7c\",{\"1\":{\"52\":1,\"53\":1}}],[\"7ffc40b15000\",{\"1\":{\"89\":1}}],[\"7ffc40b13000\",{\"1\":{\"89\":2}}],[\"7ffc40b0f000\",{\"1\":{\"89\":1}}],[\"7ffc40abd000\",{\"1\":{\"89\":1}}],[\"7ffc40a9c000\",{\"1\":{\"89\":1}}],[\"7ff5b6b38000\",{\"1\":{\"89\":1}}],[\"7ff5b6b36000\",{\"1\":{\"89\":2}}],[\"7ff5b6b34000\",{\"1\":{\"89\":1}}],[\"7ff5b6b33000\",{\"1\":{\"89\":1}}],[\"7ff5b6b28000\",{\"1\":{\"89\":2}}],[\"7ff5b6afe000\",{\"1\":{\"89\":2}}],[\"7ff5b6afc000\",{\"1\":{\"89\":2}}],[\"7ff5b6afa000\",{\"1\":{\"89\":2}}],[\"7ff5b6af9000\",{\"1\":{\"89\":2}}],[\"7ff5b6af8000\",{\"1\":{\"89\":2}}],[\"7ff5b6af7000\",{\"1\":{\"89\":2}}],[\"7ff5b6af6000\",{\"1\":{\"89\":2}}],[\"7ff5b6af5000\",{\"1\":{\"89\":2}}],[\"7ff5b6af4000\",{\"1\":{\"89\":2}}],[\"7ff5b6af3000\",{\"1\":{\"89\":2}}],[\"7ff5b6af2000\",{\"1\":{\"89\":2}}],[\"7ff5b6af1000\",{\"1\":{\"89\":2}}],[\"7ff5b6af0000\",{\"1\":{\"89\":1}}],[\"7ff5b6ae7000\",{\"1\":{\"89\":1}}],[\"7ff5b6ada000\",{\"1\":{\"89\":2}}],[\"7ff5b6ad8000\",{\"1\":{\"89\":2}}],[\"7ff5b6ad4000\",{\"1\":{\"89\":2}}],[\"7ff5b6ad3000\",{\"1\":{\"89\":2}}],[\"7ff5b6a7b000\",{\"1\":{\"89\":2}}],[\"7ff5b68e6000\",{\"1\":{\"89\":2}}],[\"7ff5b68be000\",{\"1\":{\"89\":2}}],[\"7ff5b68bd000\",{\"1\":{\"89\":2}}],[\"7ff5b68bc000\",{\"1\":{\"89\":2}}],[\"7ff5b68bb000\",{\"1\":{\"89\":2}}],[\"7ff5b68ba000\",{\"1\":{\"89\":2}}],[\"7ff5b68b9000\",{\"1\":{\"89\":2}}],[\"7ff5b68b8000\",{\"1\":{\"89\":2}}],[\"7ff5b68b7000\",{\"1\":{\"89\":2}}],[\"7ff5b68b6000\",{\"1\":{\"89\":2}}],[\"7ff5b68b5000\",{\"1\":{\"89\":2}}],[\"7ff5b68b4000\",{\"1\":{\"89\":2}}],[\"7ff5b68b2000\",{\"1\":{\"89\":1}}],[\"7ffe6cfeb000\",{\"1\":{\"73\":1}}],[\"7ffe6cfea000\",{\"1\":{\"73\":2}}],[\"7ffe6cfe6000\",{\"1\":{\"73\":1}}],[\"7ffe6cfc4000\",{\"1\":{\"73\":1}}],[\"7ffe6cfa3000\",{\"1\":{\"73\":1}}],[\"7ffdee9a4000\",{\"1\":{\"68\":1}}],[\"7ffdee9a3000\",{\"1\":{\"68\":2}}],[\"7ffdee99f000\",{\"1\":{\"68\":1}}],[\"7ffdee8c3000\",{\"1\":{\"68\":1}}],[\"7ffdee8a2000\",{\"1\":{\"68\":1}}],[\"7f066ed66000\",{\"1\":{\"73\":1}}],[\"7f066ed64000\",{\"1\":{\"73\":2}}],[\"7f066ed62000\",{\"1\":{\"73\":2}}],[\"7f066ed58000\",{\"1\":{\"73\":2}}],[\"7f066ed2d000\",{\"1\":{\"73\":2}}],[\"7f066ed2c000\",{\"1\":{\"73\":2}}],[\"7f066ed2a000\",{\"1\":{\"73\":2}}],[\"7f066ed29000\",{\"1\":{\"73\":2}}],[\"7f066ed28000\",{\"1\":{\"73\":2}}],[\"7f066ed27000\",{\"1\":{\"73\":2}}],[\"7f066ed26000\",{\"1\":{\"73\":2}}],[\"7f066ed25000\",{\"1\":{\"73\":1}}],[\"7f066ed1e000\",{\"1\":{\"73\":1}}],[\"7f066ed11000\",{\"1\":{\"73\":2}}],[\"7f066ed0f000\",{\"1\":{\"73\":2}}],[\"7f066ed0b000\",{\"1\":{\"73\":2}}],[\"7f066ecbc000\",{\"1\":{\"73\":2}}],[\"7f066eb34000\",{\"1\":{\"73\":2}}],[\"7f066eb0c000\",{\"1\":{\"73\":2}}],[\"7f066eb09000\",{\"1\":{\"73\":1}}],[\"7f\",{\"1\":{\"25\":1}}],[\"7d\",{\"1\":{\"20\":1}}],[\"75\",{\"1\":{\"52\":1,\"53\":1}}],[\"75342920\",{\"1\":{\"20\":1}}],[\"75203133\",{\"1\":{\"20\":1}}],[\"7\",{\"0\":{\"56\":2,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"108\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":2,\"142\":1},\"1\":{\"19\":1,\"22\":1,\"28\":1,\"39\":1,\"49\":1,\"55\":2,\"67\":1,\"80\":1,\"84\":1,\"85\":1,\"117\":1,\"118\":1,\"125\":1,\"162\":1,\"163\":2,\"164\":1,\"180\":2}}],[\"xdigit\",{\"1\":{\"140\":1}}],[\"xlinker\",{\"1\":{\"89\":2}}],[\"xxxxxxxxxxxxxxxx为global的地址\",{\"1\":{\"78\":1}}],[\"xxxxxxxxxxxxxxxx\",{\"1\":{\"78\":1}}],[\"xp\",{\"1\":{\"68\":2,\"73\":5,\"89\":9}}],[\"xor\",{\"1\":{\"52\":2,\"53\":2}}],[\"xword\",{\"1\":{\"29\":4,\"36\":1,\"54\":1,\"56\":1,\"67\":3,\"83\":1}}],[\"x\",{\"1\":{\"19\":1,\"20\":1,\"28\":2,\"40\":8,\"67\":2,\"68\":1,\"80\":2}}],[\"x86\",{\"1\":{\"8\":1,\"17\":3,\"19\":1,\"20\":1,\"25\":1,\"49\":3,\"52\":1,\"53\":1,\"54\":9,\"56\":4,\"58\":4,\"70\":1,\"73\":18,\"77\":1,\"79\":1,\"82\":3,\"83\":2,\"85\":14,\"89\":20}}],[\"+\",{\"1\":{\"19\":3,\"20\":1,\"29\":2,\"53\":2,\"54\":3,\"56\":5,\"73\":1,\"77\":7,\"85\":7,\"100\":54,\"102\":6,\"103\":12,\"104\":18,\"105\":12,\"106\":24,\"107\":12,\"110\":6,\"111\":12,\"112\":24,\"113\":24,\"115\":9,\"117\":27,\"118\":9,\"119\":18,\"120\":6,\"123\":12,\"124\":15,\"125\":30,\"126\":9,\"127\":24,\"130\":18,\"131\":18,\"135\":12,\"136\":6,\"137\":12,\"138\":6,\"139\":12,\"141\":13,\"142\":6,\"144\":12,\"145\":6,\"146\":28,\"149\":18,\"150\":36,\"154\":12,\"155\":12,\"156\":6,\"157\":6,\"158\":12,\"159\":6,\"160\":15,\"162\":6,\"163\":18,\"164\":45,\"165\":18,\"168\":36,\"169\":18,\"173\":12,\"174\":12,\"175\":24,\"176\":15,\"178\":9,\"180\":18,\"181\":45,\"182\":18,\"183\":12,\"188\":36,\"190\":12,\"191\":12}}],[\"az\",{\"1\":{\"169\":1}}],[\"avg\",{\"0\":{\"154\":1},\"1\":{\"153\":1,\"154\":11,\"159\":3,\"160\":3}}],[\"avoid\",{\"1\":{\"86\":1}}],[\"acme\",{\"1\":{\"139\":1,\"144\":2,\"145\":1,\"149\":2,\"173\":7,\"174\":14,\"175\":14,\"176\":2}}],[\"auto\",{\"1\":{\"100\":2}}],[\"auxv\",{\"1\":{\"86\":3}}],[\"auxiliary\",{\"1\":{\"86\":2}}],[\"affiliates\",{\"1\":{\"98\":2}}],[\"a2\",{\"1\":{\"89\":12}}],[\"a内存地址进行了一次内存对齐\",{\"1\":{\"77\":1}}],[\"am\",{\"1\":{\"67\":1}}],[\"ai\",{\"1\":{\"67\":1}}],[\"a先于foo\",{\"1\":{\"55\":1}}],[\"against\",{\"1\":{\"55\":1}}],[\"a3\",{\"1\":{\"53\":1}}],[\"a1\",{\"1\":{\"53\":2,\"89\":15}}],[\"anv03\",{\"1\":{\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"130\":1,\"131\":2,\"164\":1,\"188\":2,\"190\":1,\"191\":1}}],[\"anv02\",{\"1\":{\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"130\":1,\"131\":2,\"146\":2,\"164\":1,\"188\":2,\"190\":1,\"191\":1}}],[\"anv01\",{\"1\":{\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"130\":1,\"131\":1,\"146\":2,\"164\":1,\"188\":2,\"190\":1,\"191\":1}}],[\"anvils\",{\"1\":{\"139\":1,\"144\":2,\"145\":1,\"149\":2,\"173\":3,\"174\":14,\"175\":6,\"176\":2}}],[\"anvil\",{\"1\":{\"102\":3,\"103\":3,\"104\":6,\"106\":3,\"107\":6,\"110\":3,\"111\":3,\"112\":6,\"117\":4,\"118\":3,\"119\":4,\"127\":6,\"130\":5,\"131\":7,\"137\":3,\"138\":3,\"142\":3,\"164\":6,\"173\":3,\"174\":18,\"175\":6,\"176\":2}}],[\"an\",{\"1\":{\"86\":2}}],[\"anonymous\",{\"1\":{\"68\":1}}],[\"another\",{\"1\":{\"29\":1}}],[\"and操作符\",{\"0\":{\"123\":1}}],[\"and\",{\"1\":{\"25\":1,\"36\":1,\"54\":1,\"56\":1,\"86\":3,\"98\":2,\"104\":2,\"119\":2,\"123\":1,\"125\":2,\"127\":1,\"150\":2,\"164\":2,\"176\":2,\"178\":2,\"180\":1,\"181\":2}}],[\"ax\",{\"1\":{\"28\":1,\"67\":4}}],[\"attr\",{\"1\":{\"44\":1}}],[\"attribute\",{\"1\":{\"43\":2,\"44\":4}}],[\"at\",{\"1\":{\"28\":1,\"29\":1,\"54\":2,\"67\":2,\"73\":1,\"77\":2,\"83\":1,\"85\":2}}],[\"arrangement\",{\"1\":{\"86\":1}}],[\"arraysz\",{\"1\":{\"83\":2}}],[\"array\",{\"1\":{\"49\":2,\"67\":8,\"73\":4,\"83\":2}}],[\"ar\",{\"1\":{\"58\":2}}],[\"area\",{\"1\":{\"64\":1,\"68\":1}}],[\"are\",{\"1\":{\"28\":1,\"67\":2,\"73\":1,\"77\":1,\"86\":1}}],[\"architecture\",{\"1\":{\"25\":1}}],[\"advanced\",{\"1\":{\"25\":1}}],[\"addtime\",{\"1\":{\"150\":1}}],[\"adddate\",{\"1\":{\"150\":1}}],[\"added\",{\"1\":{\"86\":2}}],[\"addend\",{\"1\":{\"54\":2,\"56\":5,\"77\":1,\"85\":2}}],[\"addvec第一次被调用时\",{\"1\":{\"80\":1}}],[\"addvec\",{\"1\":{\"80\":4}}],[\"additional\",{\"1\":{\"29\":1}}],[\"addralign\",{\"1\":{\"29\":1}}],[\"addr\",{\"1\":{\"25\":1,\"29\":3,\"36\":1,\"54\":1,\"56\":4,\"67\":2,\"83\":2}}],[\"address\",{\"1\":{\"25\":2,\"28\":1,\"54\":1,\"56\":1,\"67\":3,\"77\":1,\"83\":2,\"100\":2,\"181\":1}}],[\"add\",{\"1\":{\"20\":3,\"52\":1,\"53\":1,\"77\":3,\"150\":1}}],[\"ab\",{\"1\":{\"49\":2,\"53\":2}}],[\"abi版本\",{\"1\":{\"25\":1}}],[\"abi\",{\"1\":{\"25\":2,\"49\":1,\"67\":3,\"86\":1}}],[\"abs\",{\"1\":{\"22\":1,\"39\":1,\"55\":1,\"151\":1}}],[\"alias\",{\"0\":{\"145\":1}}],[\"alignment\",{\"1\":{\"29\":1,\"57\":1,\"67\":1}}],[\"align\",{\"1\":{\"28\":1,\"67\":3,\"73\":1,\"77\":1}}],[\"alpha\",{\"1\":{\"140\":1}}],[\"alnum\",{\"1\":{\"140\":2}}],[\"all而不是where\",{\"1\":{\"190\":1}}],[\"all而不是union\",{\"1\":{\"190\":1}}],[\"all为union的一种形式\",{\"1\":{\"190\":1}}],[\"all\",{\"1\":{\"104\":1,\"164\":1,\"190\":1}}],[\"alloc\",{\"1\":{\"19\":6,\"28\":1,\"49\":36,\"67\":1}}],[\"algn\",{\"1\":{\"19\":1,\"49\":3}}],[\"a\",{\"1\":{\"19\":2,\"28\":4,\"43\":1,\"46\":7,\"49\":2,\"50\":3,\"52\":2,\"54\":5,\"55\":22,\"58\":2,\"67\":8,\"77\":5,\"79\":2,\"85\":2,\"86\":7,\"89\":6,\"98\":2,\"138\":1,\"140\":5}}],[\"ascii\",{\"1\":{\"140\":1}}],[\"ascii控制字符\",{\"1\":{\"140\":1}}],[\"asc\",{\"1\":{\"112\":1}}],[\"as\",{\"1\":{\"9\":1,\"145\":1,\"146\":1,\"149\":1,\"154\":2,\"155\":2,\"156\":1,\"157\":1,\"158\":2,\"159\":1,\"160\":4,\"162\":1,\"163\":2,\"164\":3,\"165\":2,\"169\":2,\"178\":3,\"180\":2,\"181\":3,\"183\":1}}],[\"upcase\",{\"1\":{\"149\":2}}],[\"upper\",{\"1\":{\"140\":1,\"149\":2}}],[\"uroot\",{\"1\":{\"98\":1}}],[\"uint64\",{\"1\":{\"86\":2}}],[\"uint32\",{\"1\":{\"86\":2}}],[\"usa\",{\"1\":{\"144\":8,\"145\":4,\"181\":2}}],[\"us\",{\"1\":{\"139\":1,\"144\":2,\"145\":1,\"149\":2,\"173\":3,\"174\":14,\"175\":6,\"176\":2}}],[\"using\",{\"1\":{\"86\":2,\"98\":1}}],[\"usually\",{\"1\":{\"86\":1}}],[\"usual\",{\"1\":{\"86\":1}}],[\"use\",{\"1\":{\"86\":2,\"99\":1,\"104\":2,\"164\":2}}],[\"uses\",{\"1\":{\"86\":1}}],[\"used\",{\"1\":{\"86\":1}}],[\"user\",{\"1\":{\"70\":1}}],[\"usr\",{\"1\":{\"8\":1,\"25\":1,\"29\":1,\"36\":1,\"55\":4,\"57\":1,\"58\":2,\"70\":1,\"73\":12,\"86\":1,\"89\":11}}],[\"u是非空的\",{\"1\":{\"55\":1}}],[\"un的含义\",{\"1\":{\"83\":1}}],[\"un\",{\"1\":{\"83\":2,\"86\":2}}],[\"unknown\",{\"1\":{\"28\":1,\"67\":1}}],[\"unsigned\",{\"1\":{\"25\":1,\"36\":2,\"56\":2}}],[\"union几乎总是完成与多个where条件相同的工作\",{\"1\":{\"190\":1}}],[\"union与where\",{\"1\":{\"190\":1}}],[\"union从查询结果集中自动去除了重复的行\",{\"1\":{\"190\":1}}],[\"union中的每个查询必须包含相同的列\",{\"1\":{\"189\":1}}],[\"union必须由两条或两条以上的select语句组成\",{\"1\":{\"189\":1}}],[\"union规则\",{\"0\":{\"189\":1}}],[\"union\",{\"1\":{\"83\":2,\"86\":2,\"186\":1,\"188\":1,\"190\":2,\"191\":1}}],[\"unix系统将elf的文件头也看做是系统的一个段\",{\"1\":{\"69\":1}}],[\"unix下c语言规定\",{\"1\":{\"40\":1}}],[\"unix\",{\"1\":{\"25\":1}}],[\"uninit\",{\"1\":{\"19\":1,\"22\":2,\"35\":1,\"39\":2}}],[\"undefined\",{\"1\":{\"55\":3}}],[\"underscore\",{\"1\":{\"40\":2}}],[\"und\",{\"1\":{\"22\":2,\"39\":2,\"55\":4,\"58\":2,\"84\":6}}],[\"ubuntu\",{\"1\":{\"20\":1,\"98\":1}}],[\"u\",{\"1\":{\"20\":2,\"35\":1,\"98\":1}}],[\"uh\",{\"1\":{\"20\":1}}],[\"87\",{\"1\":{\"158\":1,\"165\":2}}],[\"8e\",{\"1\":{\"77\":1,\"80\":1}}],[\"88\",{\"1\":{\"55\":1}}],[\"8d\",{\"1\":{\"20\":1,\"52\":3,\"53\":3}}],[\"83\",{\"1\":{\"20\":2,\"52\":2,\"53\":2,\"77\":6}}],[\"83ec10c7\",{\"1\":{\"20\":1}}],[\"8602430d\",{\"1\":{\"20\":2}}],[\"8byte\",{\"1\":{\"43\":1}}],[\"8b\",{\"1\":{\"20\":5,\"52\":2,\"53\":4,\"77\":3}}],[\"8b45f801\",{\"1\":{\"20\":1}}],[\"8b050000\",{\"1\":{\"20\":1}}],[\"89\",{\"1\":{\"20\":6,\"52\":1,\"53\":1}}],[\"89c7b800\",{\"1\":{\"20\":1}}],[\"897dfc8b\",{\"1\":{\"20\":1}}],[\"8\",{\"0\":{\"142\":1,\"144\":1,\"145\":1,\"146\":1},\"1\":{\"19\":2,\"20\":1,\"22\":1,\"28\":7,\"39\":1,\"49\":1,\"52\":2,\"57\":1,\"67\":11,\"77\":2,\"83\":2,\"85\":4,\"98\":1,\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"117\":2,\"119\":2,\"124\":1,\"126\":1,\"164\":1,\"173\":1,\"174\":6,\"175\":2,\"188\":3,\"190\":1,\"191\":2}}],[\"85\",{\"1\":{\"19\":1}}],[\"84\",{\"1\":{\"19\":1,\"174\":1}}],[\"80386\",{\"1\":{\"17\":1}}],[\"挖掘simplesection\",{\"0\":{\"19\":1}}],[\"节省内存空间\",{\"1\":{\"18\":1}}],[\"提高cpu的缓存命中\",{\"1\":{\"18\":1}}],[\"提示\",{\"1\":{\"18\":2,\"19\":1,\"20\":1,\"21\":2,\"22\":2,\"28\":2,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":2,\"43\":1,\"44\":1,\"113\":1,\"115\":1,\"117\":1,\"118\":1,\"120\":1,\"126\":1,\"129\":1,\"132\":1,\"135\":1,\"136\":1,\"137\":1,\"139\":1,\"144\":1,\"168\":1,\"174\":2,\"175\":1,\"180\":1,\"186\":1,\"187\":1}}],[\"记录所有为初始或者初始化为0的全局变量和静态变量的大小总和\",{\"1\":{\"18\":1}}],[\"已初始化的全局变量和局部静态变量\",{\"1\":{\"18\":1,\"21\":1}}],[\"等于\",{\"1\":{\"116\":1,\"141\":2}}],[\"等等\",{\"1\":{\"18\":1}}],[\"等待链接器再将目标文件a和b链接起来时再将其修正\",{\"1\":{\"14\":1}}],[\"入口地址\",{\"1\":{\"18\":1,\"25\":1}}],[\"源代码编译后的机器指令经常放于代码段\",{\"1\":{\"18\":1}}],[\"通常\",{\"1\":{\"168\":1}}],[\"通常称之为节\",{\"1\":{\"18\":1}}],[\"通配符可以匹配任何东西\",{\"1\":{\"130\":1}}],[\"通配符或两者组合构成的搜索条件\",{\"1\":{\"129\":1}}],[\"通配符\",{\"0\":{\"130\":1,\"131\":1},\"1\":{\"129\":1}}],[\"通过对表中行数计数并计算特定列值之和\",{\"1\":{\"154\":1}}],[\"通过指定一组用\",{\"1\":{\"137\":1}}],[\"通过\",{\"1\":{\"88\":1}}],[\"通过got\",{\"1\":{\"80\":2}}],[\"通过got来实现变量访问\",{\"1\":{\"78\":1}}],[\"通过实际的分析发现函数的got表并不在\",{\"1\":{\"77\":1}}],[\"通过得到pc值然后加上偏移量\",{\"1\":{\"77\":1}}],[\"通过readelf查看lib\",{\"1\":{\"73\":1}}],[\"通过使用\",{\"1\":{\"44\":2}}],[\"通过使用readelf\",{\"1\":{\"25\":1}}],[\"通过使用链接器\",{\"1\":{\"10\":1}}],[\"通过file指令可以查看文件的存储格式\",{\"1\":{\"17\":1}}],[\"核心转储文件\",{\"1\":{\"17\":1}}],[\"可给出多条select语句\",{\"1\":{\"187\":1}}],[\"可用union操作符来组合数条sql查询\",{\"1\":{\"187\":1}}],[\"可用来返回所有列的平均值\",{\"1\":{\"154\":1}}],[\"可利用count\",{\"1\":{\"155\":1}}],[\"可靠吗\",{\"1\":{\"150\":1}}],[\"可使用union\",{\"1\":{\"190\":1}}],[\"可使用concat\",{\"1\":{\"144\":1}}],[\"可使用\",{\"1\":{\"138\":1}}],[\"可使用binary关键字\",{\"1\":{\"135\":1}}],[\"可能需要使用联结来完成以下工作\",{\"1\":{\"182\":1}}],[\"可能不会返回想要的数据\",{\"1\":{\"132\":1}}],[\"可能会使用深度优先或者广度优先或者其它的顺序来遍历整个链接\",{\"1\":{\"89\":1}}],[\"可能很多函数在程序执行完时都不会被用到\",{\"1\":{\"80\":1}}],[\"可是在动态链接情况下\",{\"1\":{\"81\":1}}],[\"可向下扩展\",{\"1\":{\"68\":1}}],[\"可向上扩展\",{\"1\":{\"68\":1}}],[\"可写和可执行\",{\"1\":{\"67\":1}}],[\"可读可写\",{\"1\":{\"68\":1,\"69\":1}}],[\"可读可写可执行\",{\"1\":{\"68\":2}}],[\"可读可执行\",{\"1\":{\"68\":1,\"69\":1}}],[\"可读\",{\"1\":{\"67\":1}}],[\"可选\",{\"1\":{\"35\":1}}],[\"可以改变它\",{\"1\":{\"190\":1}}],[\"可以利用where子句来完成此工作\",{\"1\":{\"188\":1}}],[\"可以得到每个分组以及每个分组汇总级别\",{\"1\":{\"163\":1}}],[\"可以用带文字串的regexp来测试表达式\",{\"1\":{\"142\":1}}],[\"可以在不使用数据库表的情况下用select来测试正则表达式\",{\"1\":{\"142\":1}}],[\"可以给出两个以上的or条件\",{\"1\":{\"136\":1}}],[\"可以给gcc选项加入\",{\"1\":{\"22\":1}}],[\"可以直接通过读写内存地址空间进行\",{\"1\":{\"69\":1}}],[\"可以把数据\",{\"1\":{\"67\":1}}],[\"可以注意到变量的类型并没有加入到修饰后的名称中去\",{\"1\":{\"41\":1}}],[\"可以通过got中的项进行间接跳转基本原理如下图\",{\"1\":{\"77\":1}}],[\"可以通过got中相对应的项间接引用\",{\"1\":{\"77\":1}}],[\"可以通过gcc编译器提供的\",{\"1\":{\"43\":1}}],[\"可以通过\",{\"1\":{\"41\":1}}],[\"可以被其它目标文件引用\",{\"1\":{\"35\":1}}],[\"可以使用readelf查看debug相关的段\",{\"1\":{\"45\":1}}],[\"可以使用readelf\",{\"1\":{\"28\":1}}],[\"可以防止程序被恶意篡改\",{\"1\":{\"18\":1}}],[\"可执行文件对于很多\",{\"1\":{\"81\":1}}],[\"可执行文件与执行该可执行文件进程的虚拟空间映射关系如下\",{\"1\":{\"64\":1}}],[\"可执行文件的装载与静态链接情况基本一样\",{\"1\":{\"81\":1}}],[\"可执行文件的装载\",{\"0\":{\"59\":1}}],[\"可执行文件\",{\"1\":{\"17\":1}}],[\"可重定位文件\",{\"1\":{\"17\":1}}],[\"=效果一样\",{\"1\":{\"118\":1}}],[\"=0x560a72b382a0\",{\"1\":{\"92\":1}}],[\"=>\",{\"1\":{\"83\":1,\"89\":2}}],[\"==用来保存\",{\"1\":{\"67\":1}}],[\"==\",{\"1\":{\"56\":2,\"84\":1}}],[\"==来打开和关闭是否在c语言符号前加上\",{\"1\":{\"40\":1}}],[\"==的方法来解决多模块的符号冲突问题\",{\"1\":{\"40\":1}}],[\"=\",{\"1\":{\"19\":3,\"29\":1,\"42\":1,\"43\":4,\"46\":2,\"53\":2,\"56\":4,\"77\":7,\"78\":1,\"79\":1,\"80\":7,\"85\":2,\"91\":3,\"93\":3,\"94\":11,\"115\":1,\"116\":2,\"117\":1,\"123\":1,\"124\":2,\"125\":4,\"127\":2,\"146\":2,\"149\":2,\"150\":5,\"154\":1,\"158\":2,\"159\":1,\"162\":1,\"168\":3,\"169\":2,\"173\":1,\"175\":2,\"176\":3,\"178\":3,\"180\":4,\"181\":3,\"182\":2,\"183\":1}}],[\"=595f7870a8165b3eb04c9ebda08a8ccba6f742c2\",{\"1\":{\"17\":1}}],[\"=2f77b36371c214e11670c7d9d92727e9a49f626b\",{\"1\":{\"17\":1}}],[\"dd\",{\"1\":{\"150\":1}}],[\"dayofweek\",{\"1\":{\"150\":1}}],[\"day\",{\"1\":{\"150\":1}}],[\"date的数据类型为datetime\",{\"1\":{\"150\":1}}],[\"datediff\",{\"1\":{\"150\":1}}],[\"date\",{\"1\":{\"150\":18,\"181\":2}}],[\"dat\",{\"1\":{\"77\":1,\"79\":1,\"85\":5}}],[\"databases和show\",{\"1\":{\"100\":1}}],[\"databases\",{\"1\":{\"100\":1}}],[\"database\",{\"1\":{\"99\":1,\"100\":1}}],[\"data段和\",{\"1\":{\"48\":1}}],[\"data段的大小正好为8个字节\",{\"1\":{\"21\":1,\"22\":1}}],[\"data\",{\"1\":{\"18\":2,\"19\":6,\"20\":1,\"21\":1,\"22\":1,\"25\":1,\"28\":1,\"35\":1,\"39\":1,\"40\":2,\"49\":30,\"50\":1,\"54\":2,\"67\":5,\"73\":1,\"85\":3}}],[\"druntime\",{\"1\":{\"94\":1}}],[\"dcompiletime\",{\"1\":{\"92\":1}}],[\"dozen\",{\"1\":{\"104\":1,\"164\":1}}],[\"does\",{\"1\":{\"86\":2}}],[\"do\",{\"1\":{\"86\":2}}],[\"don\",{\"1\":{\"86\":1}}],[\"double\",{\"1\":{\"42\":1}}],[\"dlinktime\",{\"1\":{\"93\":1}}],[\"dlclose\",{\"1\":{\"80\":1}}],[\"dlsym\",{\"1\":{\"80\":1,\"94\":2}}],[\"dlerror\",{\"1\":{\"80\":3,\"94\":2}}],[\"dlopen\",{\"1\":{\"80\":1}}],[\"dl\",{\"1\":{\"80\":1,\"85\":1}}],[\"d6\",{\"1\":{\"77\":1}}],[\"d5\",{\"1\":{\"77\":2}}],[\"digit\",{\"1\":{\"140\":1,\"141\":3}}],[\"distinct\",{\"1\":{\"105\":2,\"159\":1}}],[\"disassembly\",{\"1\":{\"20\":1,\"52\":1,\"53\":1,\"77\":1}}],[\"directory\",{\"1\":{\"64\":1}}],[\"dtntr\",{\"1\":{\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"124\":1,\"125\":2,\"164\":1,\"180\":4}}],[\"dt\",{\"1\":{\"55\":1,\"83\":13}}],[\"d查看反汇编结果\",{\"1\":{\"52\":1}}],[\"dynamic\",{\"0\":{\"83\":1},\"1\":{\"49\":1,\"72\":1,\"73\":4,\"81\":1,\"83\":7,\"84\":3,\"85\":1,\"88\":3,\"89\":2}}],[\"dynamically\",{\"1\":{\"17\":1}}],[\"dyn\",{\"1\":{\"49\":1,\"73\":2,\"77\":1,\"83\":2,\"85\":3}}],[\"dynstr\",{\"1\":{\"49\":1,\"73\":1,\"83\":1,\"84\":1}}],[\"dynsym\",{\"1\":{\"49\":1,\"73\":1,\"83\":1,\"84\":4}}],[\"d0\",{\"1\":{\"20\":1}}],[\"detroit\",{\"1\":{\"181\":2}}],[\"detonator\",{\"1\":{\"102\":1,\"103\":1,\"104\":2,\"106\":3,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"124\":1,\"125\":2,\"126\":1,\"164\":2,\"173\":1,\"174\":6,\"175\":2,\"180\":2}}],[\"desc\",{\"1\":{\"104\":1,\"112\":3,\"113\":2,\"164\":1}}],[\"describe\",{\"1\":{\"100\":1}}],[\"deregistertm\",{\"1\":{\"85\":1}}],[\"deregistert\",{\"1\":{\"84\":1}}],[\"debug\",{\"1\":{\"83\":1}}],[\"devices\",{\"1\":{\"25\":1}}],[\"definitions\",{\"1\":{\"86\":2}}],[\"definition\",{\"1\":{\"86\":1}}],[\"defined\",{\"1\":{\"86\":1}}],[\"define\",{\"1\":{\"7\":1,\"35\":1,\"73\":1,\"91\":3,\"94\":1}}],[\"default\",{\"1\":{\"22\":13,\"39\":13,\"55\":7,\"77\":1,\"84\":7,\"100\":2}}],[\"declaration\",{\"1\":{\"55\":2}}],[\"decorated\",{\"1\":{\"41\":1}}],[\"decoration\",{\"1\":{\"41\":1}}],[\"dec\",{\"1\":{\"19\":1}}],[\"d\",{\"1\":{\"19\":1,\"20\":3,\"21\":1,\"28\":1,\"35\":2,\"42\":1,\"52\":1,\"53\":1,\"67\":1,\"73\":2,\"80\":2,\"83\":16,\"84\":1,\"91\":1,\"93\":1,\"94\":1,\"180\":1}}],[\"dump\",{\"1\":{\"17\":1}}],[\"p2\",{\"1\":{\"180\":3}}],[\"p1\",{\"1\":{\"180\":4}}],[\"punct\",{\"1\":{\"140\":1}}],[\"push\",{\"1\":{\"20\":2}}],[\"performance\",{\"1\":{\"100\":1}}],[\"p3306\",{\"1\":{\"98\":1}}],[\"place\",{\"1\":{\"168\":2,\"169\":1,\"178\":1,\"183\":1}}],[\"platforms\",{\"1\":{\"86\":2}}],[\"plunger\",{\"1\":{\"104\":1,\"164\":1}}],[\"plt中的每个需要重定位的位置进行修正\",{\"1\":{\"90\":1}}],[\"plt的重定位\",{\"1\":{\"85\":1}}],[\"pltrel\",{\"1\":{\"83\":1}}],[\"pltrelsz\",{\"1\":{\"83\":1}}],[\"pltgot\",{\"1\":{\"83\":1}}],[\"plt在elf文件中以独立的段存放\",{\"1\":{\"80\":1}}],[\"plt为了实现延迟绑定\",{\"1\":{\"80\":1}}],[\"plt段中\",{\"1\":{\"77\":1}}],[\"plt32\",{\"1\":{\"54\":4}}],[\"plt>\",{\"1\":{\"53\":1,\"77\":8,\"80\":1}}],[\"plt\",{\"0\":{\"80\":1},\"1\":{\"49\":4,\"67\":6,\"73\":5,\"77\":2,\"80\":8,\"85\":7}}],[\"powered\",{\"1\":{\"104\":1,\"164\":1}}],[\"position\",{\"1\":{\"77\":2}}],[\"pointer\",{\"1\":{\"86\":2}}],[\"point\",{\"1\":{\"25\":2,\"67\":1,\"73\":1}}],[\"pi\",{\"1\":{\"151\":1}}],[\"pic和pie\",{\"1\":{\"77\":1}}],[\"pic\",{\"1\":{\"77\":5}}],[\"pie\",{\"1\":{\"17\":2,\"55\":1,\"77\":1,\"83\":1}}],[\"pack\",{\"1\":{\"104\":1,\"164\":1}}],[\"password\",{\"1\":{\"98\":1}}],[\"path=\",{\"1\":{\"70\":1}}],[\"paddr\",{\"1\":{\"67\":1}}],[\"page\",{\"1\":{\"64\":1,\"65\":1}}],[\"pc值\",{\"1\":{\"77\":1}}],[\"pc值通常是下一条指令在内存中的值\",{\"1\":{\"56\":1}}],[\"pc\",{\"1\":{\"54\":1,\"56\":1}}],[\"pc32\",{\"1\":{\"54\":4,\"56\":2}}],[\"ptr表示所依赖的共享对象文件名\",{\"1\":{\"83\":1}}],[\"ptr表示\",{\"1\":{\"83\":3}}],[\"ptr\",{\"1\":{\"83\":2,\"91\":9,\"93\":7,\"94\":6}}],[\"pt\",{\"1\":{\"44\":4}}],[\"pthread\",{\"1\":{\"44\":7}}],[\"phdr\",{\"1\":{\"67\":1}}],[\"physical\",{\"1\":{\"67\":1}}],[\"physaddr\",{\"1\":{\"67\":1,\"73\":1}}],[\"phnum\",{\"1\":{\"25\":1}}],[\"phentsize\",{\"1\":{\"25\":1}}],[\"phoff\",{\"1\":{\"25\":1}}],[\"p\",{\"1\":{\"20\":1,\"28\":1,\"67\":10,\"68\":9,\"73\":22,\"79\":1,\"85\":1,\"89\":35,\"91\":4,\"93\":2,\"94\":2,\"98\":3}}],[\"primary\",{\"1\":{\"172\":1}}],[\"prica\",{\"1\":{\"157\":2}}],[\"price至少为10的行\",{\"1\":{\"164\":1}}],[\"price列包含订单中每项物品的单价\",{\"1\":{\"146\":1}}],[\"price进行降序排序\",{\"1\":{\"112\":2}}],[\"price值时\",{\"1\":{\"111\":1}}],[\"price\",{\"1\":{\"103\":2,\"104\":1,\"111\":3,\"112\":6,\"113\":6,\"115\":3,\"117\":9,\"119\":7,\"120\":1,\"123\":3,\"124\":2,\"125\":6,\"126\":2,\"127\":4,\"146\":7,\"154\":6,\"156\":3,\"157\":1,\"158\":4,\"159\":3,\"160\":9,\"164\":2,\"165\":4,\"173\":2,\"174\":2,\"175\":4,\"176\":2,\"181\":2,\"188\":9,\"190\":4,\"191\":5}}],[\"pri\",{\"1\":{\"100\":2}}],[\"print\",{\"1\":{\"140\":2}}],[\"printing\",{\"1\":{\"73\":3,\"84\":1}}],[\"printf\",{\"1\":{\"6\":1,\"19\":2,\"22\":1,\"35\":1,\"39\":1,\"40\":4,\"42\":1,\"44\":2,\"73\":2,\"80\":1,\"82\":1,\"84\":1,\"85\":4,\"89\":2,\"91\":2,\"93\":2}}],[\"pr\",{\"1\":{\"28\":1,\"67\":1,\"127\":1}}],[\"prods一次\",{\"1\":{\"163\":1}}],[\"prods为计算字段\",{\"1\":{\"163\":1}}],[\"prods\",{\"1\":{\"162\":2,\"163\":4,\"164\":4}}],[\"prod\",{\"1\":{\"102\":2,\"103\":6,\"104\":4,\"106\":8,\"107\":4,\"110\":3,\"111\":8,\"112\":15,\"113\":14,\"115\":5,\"117\":16,\"118\":2,\"119\":11,\"120\":2,\"123\":7,\"124\":6,\"125\":14,\"126\":5,\"127\":9,\"130\":12,\"131\":10,\"135\":9,\"136\":4,\"137\":8,\"138\":4,\"141\":8,\"142\":4,\"146\":4,\"154\":2,\"156\":1,\"157\":1,\"159\":1,\"160\":3,\"164\":5,\"168\":4,\"173\":5,\"174\":5,\"175\":8,\"176\":6,\"178\":1,\"180\":10,\"181\":3,\"188\":16,\"190\":7,\"191\":8}}],[\"product\",{\"1\":{\"174\":1}}],[\"products\",{\"1\":{\"100\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":2,\"106\":4,\"107\":4,\"110\":1,\"111\":1,\"112\":2,\"113\":2,\"115\":1,\"117\":3,\"118\":1,\"119\":2,\"120\":1,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"127\":2,\"130\":2,\"131\":2,\"135\":2,\"136\":1,\"137\":2,\"138\":1,\"141\":2,\"142\":1,\"154\":2,\"156\":1,\"157\":1,\"159\":1,\"160\":1,\"162\":1,\"163\":2,\"164\":3,\"173\":2,\"174\":1,\"175\":4,\"176\":3,\"180\":4,\"188\":4,\"190\":2,\"191\":2}}],[\"productnotes\",{\"1\":{\"100\":1}}],[\"procedure\",{\"1\":{\"80\":1}}],[\"processing\",{\"1\":{\"28\":1,\"67\":1}}],[\"processor\",{\"1\":{\"25\":1,\"28\":1,\"67\":1}}],[\"proc\",{\"1\":{\"68\":1,\"73\":1,\"89\":1}}],[\"prog\",{\"1\":{\"70\":2}}],[\"progbits\",{\"1\":{\"28\":6,\"67\":15,\"77\":1,\"85\":3}}],[\"program2\",{\"1\":{\"73\":3}}],[\"program1除了使用lib\",{\"1\":{\"73\":1}}],[\"program1\",{\"1\":{\"73\":12,\"84\":1}}],[\"program\",{\"1\":{\"25\":6,\"67\":4,\"73\":2,\"81\":1,\"82\":1,\"86\":2}}],[\"property\",{\"1\":{\"19\":1,\"20\":1,\"49\":3,\"67\":4,\"73\":4}}],[\"pragma编译指令\",{\"1\":{\"7\":1}}],[\"blank\",{\"1\":{\"140\":1}}],[\"black\",{\"1\":{\"104\":3,\"164\":3}}],[\"be\",{\"1\":{\"98\":2}}],[\"between\",{\"1\":{\"86\":1,\"116\":1,\"119\":1,\"150\":1}}],[\"b2\",{\"1\":{\"89\":16}}],[\"b1\",{\"1\":{\"89\":15}}],[\"bootstrap\",{\"1\":{\"88\":1}}],[\"by排序数据\",{\"1\":{\"165\":1}}],[\"by子句\",{\"1\":{\"165\":1}}],[\"by子句之前\",{\"1\":{\"163\":1}}],[\"by子句必须出现在where子句之后\",{\"1\":{\"163\":1}}],[\"by子句中给出\",{\"1\":{\"163\":1}}],[\"by子句中指定相同的表达式\",{\"1\":{\"163\":1}}],[\"by子句中列出的每个列都必须是检索列或有效的表达式\",{\"1\":{\"163\":1}}],[\"by子句中嵌套了分组\",{\"1\":{\"163\":1}}],[\"by子句中建立的\",{\"1\":{\"163\":1}}],[\"by子句可以包含任意数目的列\",{\"1\":{\"163\":1}}],[\"by子句前\",{\"1\":{\"163\":1}}],[\"by子句指示mysql按vend\",{\"1\":{\"163\":1}}],[\"by子句时\",{\"1\":{\"113\":1,\"165\":1}}],[\"by的使用请查看这里\",{\"1\":{\"115\":1}}],[\"by位于where之后\",{\"1\":{\"115\":1}}],[\"by和where子句时\",{\"1\":{\"115\":1}}],[\"by之后\",{\"1\":{\"113\":1}}],[\"by语句的默认是升序排列的\",{\"1\":{\"110\":1}}],[\"by\",{\"1\":{\"86\":1,\"110\":1,\"111\":1,\"112\":2,\"113\":2,\"117\":1,\"126\":1,\"127\":2,\"135\":2,\"136\":1,\"137\":2,\"138\":1,\"139\":2,\"141\":2,\"142\":1,\"144\":2,\"145\":1,\"149\":1,\"163\":2,\"164\":3,\"165\":6,\"166\":2,\"169\":1,\"173\":1,\"174\":1,\"183\":1,\"191\":1}}],[\"bytes\",{\"1\":{\"25\":6,\"29\":1,\"83\":7}}],[\"buffer\",{\"1\":{\"94\":10}}],[\"but\",{\"1\":{\"86\":1}}],[\"bu\",{\"1\":{\"67\":1}}],[\"build\",{\"1\":{\"49\":1,\"67\":2,\"73\":2}}],[\"buildid\",{\"1\":{\"17\":2}}],[\"bjdump\",{\"1\":{\"54\":1}}],[\"bag\",{\"1\":{\"104\":1,\"164\":1}}],[\"base\",{\"1\":{\"67\":2}}],[\"bash\",{\"1\":{\"17\":2}}],[\"bar静态函数时\",{\"1\":{\"77\":1}}],[\"bar为非静态函数时\",{\"1\":{\"77\":1}}],[\"bar\",{\"1\":{\"41\":1,\"77\":4}}],[\"b8\",{\"1\":{\"20\":2,\"77\":6}}],[\"b\",{\"1\":{\"19\":2,\"20\":1,\"35\":1,\"43\":1,\"46\":5,\"49\":2,\"77\":5}}],[\"bss段在目标文件和可执行文件中不占用文件的空间\",{\"1\":{\"49\":1}}],[\"bss段\",{\"0\":{\"22\":1},\"1\":{\"48\":1}}],[\"bss段没有表示bss段在elf文件中不存在内容\",{\"1\":{\"19\":1}}],[\"bss段只是为未初始化的全局变量和局部静态变量预留位置而已\",{\"1\":{\"18\":1}}],[\"bss\",{\"1\":{\"18\":1,\"19\":2,\"22\":2,\"28\":1,\"39\":1,\"49\":6,\"67\":2,\"73\":1,\"78\":2}}],[\"bird\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"106\":3,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"117\":1,\"119\":2,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"164\":1,\"173\":1,\"174\":6,\"175\":2,\"176\":1,\"180\":2}}],[\"binary\",{\"1\":{\"135\":1}}],[\"binding\",{\"1\":{\"36\":1,\"37\":1,\"80\":1}}],[\"bind\",{\"1\":{\"22\":1,\"39\":1,\"55\":1,\"77\":1,\"83\":1,\"84\":1}}],[\"bin\",{\"1\":{\"17\":2,\"55\":4,\"57\":1,\"70\":1}}],[\"bit\",{\"1\":{\"17\":3,\"86\":4}}],[\"vsyscall\",{\"1\":{\"89\":1}}],[\"vend\",{\"1\":{\"104\":1,\"105\":4,\"118\":3,\"123\":1,\"124\":4,\"125\":8,\"126\":1,\"127\":7,\"139\":8,\"144\":10,\"145\":5,\"149\":6,\"154\":1,\"159\":1,\"162\":1,\"163\":7,\"164\":7,\"173\":5,\"174\":3,\"175\":8,\"176\":4,\"180\":4,\"188\":9,\"190\":4,\"191\":5}}],[\"vendors\",{\"1\":{\"100\":1,\"139\":2,\"144\":2,\"145\":1,\"149\":1,\"173\":2,\"174\":1,\"175\":4,\"176\":2}}],[\"vector\",{\"1\":{\"86\":4}}],[\"versa\",{\"1\":{\"86\":2}}],[\"versym\",{\"1\":{\"83\":1}}],[\"version\",{\"1\":{\"17\":3,\"25\":5,\"44\":4,\"49\":2,\"73\":2,\"98\":1}}],[\"verneednum\",{\"1\":{\"83\":1}}],[\"verneed\",{\"1\":{\"83\":1}}],[\"vdso\",{\"1\":{\"68\":1,\"73\":1,\"83\":1,\"89\":3}}],[\"vvar\",{\"1\":{\"68\":1,\"73\":1,\"89\":1}}],[\"vprintf\",{\"1\":{\"58\":13}}],[\"vice\",{\"1\":{\"86\":2}}],[\"view\",{\"1\":{\"67\":3}}],[\"virtaddr\",{\"1\":{\"67\":1,\"73\":1}}],[\"virtual\",{\"1\":{\"25\":1,\"29\":1,\"64\":1,\"67\":1,\"68\":1}}],[\"visibility\",{\"1\":{\"36\":1}}],[\"vis\",{\"1\":{\"22\":1,\"39\":1,\"55\":1,\"77\":1,\"84\":1}}],[\"v\",{\"1\":{\"25\":1,\"140\":1}}],[\"val表示大小\",{\"1\":{\"83\":1}}],[\"val\",{\"1\":{\"83\":2,\"86\":2}}],[\"value表示符号的虚拟地址\",{\"1\":{\"39\":1}}],[\"value表示该符号的对齐属性\",{\"1\":{\"39\":1}}],[\"value表示该符号在段中的偏移\",{\"1\":{\"39\":1}}],[\"value\",{\"0\":{\"39\":1},\"1\":{\"22\":1,\"35\":1,\"36\":2,\"39\":1,\"54\":4,\"55\":1,\"77\":2,\"83\":5,\"84\":1,\"85\":2,\"86\":2}}],[\"vaddr\",{\"1\":{\"67\":1}}],[\"vam\",{\"1\":{\"64\":1}}],[\"var和static\",{\"1\":{\"35\":1}}],[\"var2\",{\"1\":{\"19\":2,\"22\":2,\"35\":2,\"39\":1}}],[\"var\",{\"1\":{\"14\":1,\"19\":4,\"21\":2,\"22\":4,\"35\":3,\"39\":5,\"42\":4}}],[\"vma\",{\"1\":{\"19\":1,\"49\":4}}],[\"void\",{\"1\":{\"19\":1,\"44\":4,\"46\":1,\"73\":3,\"77\":6,\"80\":2,\"84\":1,\"89\":8,\"91\":7,\"93\":7,\"94\":7}}],[\"fb\",{\"1\":{\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"123\":1,\"124\":1,\"125\":2,\"146\":2,\"164\":1,\"180\":2,\"181\":3}}],[\"f的引用解析位f\",{\"1\":{\"93\":1}}],[\"f标志进行链时打桩\",{\"1\":{\"93\":1}}],[\"fudd\",{\"1\":{\"169\":1,\"183\":1}}],[\"furball\",{\"1\":{\"139\":2,\"144\":2,\"145\":1,\"149\":2,\"174\":14}}],[\"fu1\",{\"1\":{\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"124\":1,\"164\":1,\"188\":3,\"190\":2,\"191\":1}}],[\"fuses\",{\"1\":{\"102\":1,\"103\":1,\"104\":2,\"106\":3,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"117\":5,\"118\":1,\"124\":1,\"126\":1,\"164\":2,\"173\":1,\"174\":6,\"175\":2}}],[\"fully\",{\"1\":{\"86\":1}}],[\"func和var不会被c++的名称修饰规则修饰\",{\"1\":{\"42\":1}}],[\"func经过名称修饰后就是\",{\"1\":{\"41\":1}}],[\"function\",{\"1\":{\"41\":1,\"55\":4,\"80\":1,\"84\":2}}],[\"func\",{\"1\":{\"22\":2,\"39\":2,\"41\":8,\"42\":2,\"55\":1,\"84\":3}}],[\"func1\",{\"1\":{\"19\":2,\"22\":1,\"35\":1,\"39\":2}}],[\"fputs\",{\"1\":{\"94\":2}}],[\"fprintf\",{\"1\":{\"80\":3}}],[\"fpie\",{\"1\":{\"77\":2}}],[\"fpic的情况下\",{\"1\":{\"78\":1}}],[\"fpic和\",{\"1\":{\"77\":1}}],[\"fpic选项\",{\"1\":{\"76\":1}}],[\"fpic\",{\"1\":{\"73\":2,\"77\":7,\"84\":1,\"89\":4,\"94\":1}}],[\"f1\",{\"1\":{\"77\":1}}],[\"fe\",{\"1\":{\"77\":2}}],[\"france\",{\"1\":{\"144\":2,\"145\":1}}],[\"frame\",{\"1\":{\"19\":1,\"20\":1,\"28\":2,\"49\":4,\"54\":2,\"67\":2,\"73\":4}}],[\"freep\",{\"1\":{\"94\":3}}],[\"free也类似\",{\"1\":{\"93\":1}}],[\"free\",{\"1\":{\"91\":5,\"92\":1,\"93\":6,\"94\":4}}],[\"from\",{\"1\":{\"73\":3,\"100\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":2,\"106\":4,\"107\":2,\"108\":1,\"110\":1,\"111\":1,\"112\":2,\"113\":2,\"115\":1,\"117\":3,\"118\":1,\"119\":2,\"120\":2,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"127\":2,\"130\":2,\"131\":2,\"135\":2,\"136\":1,\"137\":2,\"138\":1,\"139\":2,\"141\":2,\"142\":1,\"144\":2,\"145\":1,\"146\":2,\"149\":3,\"150\":3,\"154\":2,\"155\":2,\"156\":1,\"157\":1,\"158\":2,\"159\":1,\"160\":1,\"162\":1,\"163\":2,\"164\":4,\"165\":2,\"166\":1,\"168\":8,\"169\":3,\"173\":1,\"174\":1,\"175\":2,\"176\":1,\"178\":1,\"180\":3,\"181\":1,\"182\":2,\"183\":1,\"188\":4,\"190\":2,\"191\":2}}],[\"ffffffffff601000\",{\"1\":{\"89\":1}}],[\"ffffffffff600000\",{\"1\":{\"89\":1}}],[\"ff\",{\"1\":{\"53\":3,\"77\":19,\"80\":1}}],[\"fs\",{\"1\":{\"52\":2,\"53\":3}}],[\"fits\",{\"1\":{\"104\":1,\"164\":1}}],[\"field\",{\"1\":{\"100\":2}}],[\"finalize\",{\"1\":{\"85\":1}}],[\"finit\",{\"1\":{\"83\":1,\"90\":3}}],[\"fini\",{\"1\":{\"49\":2,\"67\":6,\"73\":3,\"83\":3}}],[\"fileno\",{\"1\":{\"94\":2}}],[\"filename\",{\"1\":{\"19\":1}}],[\"filesz\",{\"1\":{\"67\":3}}],[\"filesiz\",{\"1\":{\"67\":1,\"73\":1}}],[\"file\",{\"1\":{\"17\":3,\"19\":3,\"20\":1,\"22\":1,\"25\":7,\"29\":1,\"39\":1,\"49\":6,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"58\":2,\"67\":4,\"73\":2,\"82\":1,\"86\":1}}],[\"fno\",{\"1\":{\"40\":1}}],[\"float\",{\"1\":{\"41\":2}}],[\"fleading\",{\"1\":{\"40\":1}}],[\"flags\",{\"0\":{\"31\":1},\"1\":{\"25\":3,\"28\":2,\"29\":2,\"30\":1,\"67\":5,\"73\":1,\"77\":1,\"83\":3}}],[\"f8\",{\"1\":{\"20\":2}}],[\"f\",{\"1\":{\"20\":1,\"52\":2,\"55\":1,\"58\":8,\"77\":1,\"93\":1,\"140\":1}}],[\"fcommon编译选项\",{\"1\":{\"39\":1}}],[\"fcommon\",{\"1\":{\"22\":1}}],[\"fcommon使未初始化的全局变量被定义为一个\",{\"1\":{\"22\":1}}],[\"fc\",{\"1\":{\"20\":3,\"89\":36,\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"123\":1,\"124\":1,\"125\":1,\"164\":1,\"180\":2,\"188\":2,\"190\":1,\"191\":1}}],[\"far\",{\"1\":{\"68\":5,\"73\":10,\"89\":25}}],[\"fault\",{\"1\":{\"65\":1}}],[\"fail\",{\"1\":{\"53\":1,\"54\":2,\"55\":2}}],[\"fa\",{\"1\":{\"20\":2,\"52\":1,\"53\":1,\"77\":7,\"80\":1,\"140\":1}}],[\"f3\",{\"1\":{\"20\":2,\"52\":1,\"53\":1,\"77\":7,\"80\":1}}],[\"f30f1efa\",{\"1\":{\"20\":1}}],[\"f0\",{\"1\":{\"19\":1,\"140\":1}}],[\"found\",{\"1\":{\"192\":1}}],[\"foo\",{\"1\":{\"35\":3,\"40\":2,\"41\":1,\"44\":3,\"55\":5,\"77\":2,\"78\":1}}],[\"foobar\",{\"1\":{\"17\":2,\"73\":6,\"84\":5}}],[\"foreign\",{\"1\":{\"172\":1}}],[\"foreach\",{\"1\":{\"56\":2}}],[\"form\",{\"1\":{\"84\":1,\"100\":1}}],[\"format\",{\"1\":{\"19\":2,\"20\":1,\"49\":3,\"52\":1,\"53\":1,\"54\":1,\"58\":2,\"82\":1,\"150\":1}}],[\"fortran把这种空间叫common块\",{\"1\":{\"57\":1}}],[\"for\",{\"1\":{\"17\":1,\"54\":3,\"84\":1,\"98\":1,\"104\":2,\"164\":2}}],[\"第十五章\",{\"0\":{\"185\":1}}],[\"第十四章\",{\"0\":{\"177\":1}}],[\"第十三章\",{\"0\":{\"170\":1}}],[\"第十二章\",{\"0\":{\"167\":1}}],[\"第十一章\",{\"0\":{\"161\":1}}],[\"第十章\",{\"0\":{\"152\":1}}],[\"第八章\",{\"0\":{\"143\":1}}],[\"第六章\",{\"0\":{\"128\":1}}],[\"第五章\",{\"0\":{\"71\":1,\"121\":1}}],[\"第五列表示可执行文件的节点号\",{\"1\":{\"68\":1}}],[\"第四列表示可执行文件所在设备的主设备号和次设备号\",{\"1\":{\"68\":1}}],[\"第四章\",{\"0\":{\"59\":1,\"114\":1}}],[\"第三项保存的是\",{\"1\":{\"85\":1}}],[\"第三列是偏移\",{\"1\":{\"68\":1}}],[\"第三章\",{\"0\":{\"46\":1,\"109\":1}}],[\"第二项保存的是本模块的id\",{\"1\":{\"85\":1}}],[\"第二个变量对应变量c等\",{\"1\":{\"77\":1}}],[\"第二列是vma的权限\",{\"1\":{\"68\":1}}],[\"第二章\",{\"0\":{\"16\":1,\"101\":1}}],[\"第九章\",{\"0\":{\"147\":1},\"1\":{\"62\":1}}],[\"第七章\",{\"0\":{\"133\":1},\"1\":{\"55\":1}}],[\"第一个表中的每个行将与第二个表中的每个行配对\",{\"1\":{\"174\":1}}],[\"第一个元素是无效段描述符\",{\"1\":{\"28\":1}}],[\"第一项保存的是\",{\"1\":{\"85\":1}}],[\"第一条plt指令通过got\",{\"1\":{\"80\":1}}],[\"第一列是vma的地址范围\",{\"1\":{\"68\":1}}],[\"第一章\",{\"0\":{\"5\":1,\"96\":1}}],[\"库打桩机制\",{\"0\":{\"91\":1}}],[\"库\",{\"1\":{\"15\":1}}],[\"支撑程序运行的基本函数集合\",{\"1\":{\"15\":1}}],[\"right指出的是outer\",{\"1\":{\"182\":1}}],[\"right\",{\"1\":{\"149\":1}}],[\"rip实际值为0x1147\",{\"1\":{\"77\":1}}],[\"rip既是对应的pc值\",{\"1\":{\"77\":1}}],[\"rip\",{\"1\":{\"14\":1,\"20\":3,\"52\":2,\"53\":2,\"77\":9,\"80\":1}}],[\"rtrim\",{\"1\":{\"144\":4,\"145\":2,\"149\":1}}],[\"rtld\",{\"1\":{\"80\":1,\"94\":2}}],[\"rand\",{\"1\":{\"151\":1}}],[\"rabbit\",{\"1\":{\"104\":1,\"164\":1}}],[\"rax\",{\"1\":{\"20\":2,\"52\":4,\"53\":7,\"77\":11,\"80\":2}}],[\"runners\",{\"1\":{\"104\":1,\"164\":1}}],[\"run\",{\"1\":{\"94\":4}}],[\"runtime\",{\"1\":{\"80\":1,\"85\":1,\"94\":1}}],[\"rpath\",{\"1\":{\"83\":1,\"89\":2}}],[\"rw\",{\"1\":{\"67\":2,\"68\":4,\"73\":12,\"89\":12}}],[\"rollup\",{\"1\":{\"163\":1}}],[\"rollup关键字\",{\"1\":{\"163\":1}}],[\"row\",{\"1\":{\"113\":2,\"117\":1,\"135\":1,\"137\":1,\"139\":1,\"149\":1,\"150\":1,\"154\":2,\"155\":2,\"156\":1,\"157\":1,\"158\":2,\"159\":1,\"160\":1,\"162\":1,\"164\":1,\"169\":1}}],[\"rows\",{\"1\":{\"100\":4,\"102\":1,\"103\":1,\"104\":1,\"105\":2,\"106\":4,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"115\":1,\"117\":2,\"118\":1,\"119\":2,\"120\":1,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"127\":2,\"130\":2,\"131\":2,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"141\":2,\"142\":1,\"144\":2,\"145\":1,\"146\":2,\"149\":1,\"150\":2,\"163\":2,\"164\":3,\"165\":2,\"168\":5,\"169\":1,\"173\":1,\"174\":1,\"175\":2,\"176\":1,\"178\":1,\"180\":2,\"181\":1,\"182\":2,\"183\":1,\"188\":3,\"190\":1,\"191\":1}}],[\"road\",{\"1\":{\"104\":1,\"164\":1}}],[\"ro\",{\"1\":{\"67\":3}}],[\"rodata段的大小正好为四字节\",{\"1\":{\"21\":1}}],[\"rodata段\",{\"1\":{\"21\":1}}],[\"rodata\",{\"1\":{\"19\":2,\"20\":1,\"21\":1,\"22\":1,\"28\":1,\"39\":1,\"49\":1,\"67\":4,\"73\":1}}],[\"rsi\",{\"1\":{\"52\":2,\"53\":2}}],[\"rsp\",{\"1\":{\"20\":4,\"52\":6,\"53\":7,\"77\":6}}],[\"r\",{\"1\":{\"49\":1,\"54\":12,\"56\":17,\"67\":9,\"68\":7,\"73\":27,\"77\":2,\"79\":1,\"85\":13,\"89\":30,\"139\":1,\"140\":1,\"144\":2,\"145\":1,\"149\":2,\"173\":3,\"174\":14,\"175\":6,\"176\":2}}],[\"rdi\",{\"1\":{\"20\":1,\"52\":1,\"53\":1}}],[\"rbp\",{\"1\":{\"20\":9}}],[\"regexp检查总是返回0\",{\"1\":{\"142\":1}}],[\"regexp\",{\"1\":{\"135\":3,\"136\":1,\"137\":2,\"138\":1,\"139\":2,\"141\":2,\"142\":1}}],[\"registered\",{\"1\":{\"98\":1}}],[\"registertmcl\",{\"1\":{\"85\":1}}],[\"registertmc\",{\"1\":{\"84\":1}}],[\"red\",{\"1\":{\"104\":3,\"164\":3}}],[\"respective\",{\"1\":{\"98\":1}}],[\"resolve\",{\"1\":{\"80\":1,\"85\":1}}],[\"real\",{\"1\":{\"93\":5}}],[\"read\",{\"1\":{\"55\":1}}],[\"readelf指令可以查看重定位文件\",{\"1\":{\"54\":1}}],[\"readelf\",{\"1\":{\"22\":1,\"25\":1,\"28\":1,\"39\":1,\"54\":1,\"55\":1,\"67\":2,\"73\":1,\"77\":3,\"82\":1,\"83\":1,\"84\":1,\"85\":2}}],[\"readonly\",{\"1\":{\"19\":6,\"49\":31}}],[\"rename\",{\"1\":{\"86\":1}}],[\"rebasing\",{\"1\":{\"85\":1}}],[\"requesting\",{\"1\":{\"82\":1}}],[\"required\",{\"1\":{\"28\":1,\"67\":1}}],[\"records\",{\"1\":{\"54\":3}}],[\"refaddr\",{\"1\":{\"56\":2}}],[\"refptr\",{\"1\":{\"56\":3}}],[\"reference\",{\"1\":{\"44\":3,\"55\":2}}],[\"refrence\",{\"1\":{\"35\":1}}],[\"relent\",{\"1\":{\"83\":1}}],[\"relro\",{\"1\":{\"67\":1,\"73\":1}}],[\"relative类型的重定位入口就是专门用来重定位指针变量p这种类型的\",{\"1\":{\"85\":1}}],[\"relative\",{\"1\":{\"85\":4}}],[\"relacount\",{\"1\":{\"83\":1}}],[\"relasz\",{\"1\":{\"83\":1}}],[\"relaent\",{\"1\":{\"83\":2}}],[\"rela\",{\"1\":{\"28\":4,\"33\":3,\"49\":2,\"54\":2,\"56\":1,\"67\":3,\"73\":2,\"77\":1,\"83\":3,\"85\":2}}],[\"rel\",{\"1\":{\"25\":1,\"33\":1,\"54\":3,\"67\":3,\"83\":1,\"85\":8}}],[\"reloc\",{\"1\":{\"19\":2,\"49\":3}}],[\"relocatable\",{\"1\":{\"17\":1,\"25\":1}}],[\"relocation\",{\"1\":{\"14\":2,\"54\":6,\"55\":1,\"56\":2,\"76\":2,\"77\":1,\"85\":2}}],[\"retain\",{\"1\":{\"67\":1}}],[\"ret\",{\"1\":{\"20\":2,\"52\":1,\"53\":1,\"77\":5}}],[\"returned\",{\"1\":{\"55\":1}}],[\"return\",{\"1\":{\"6\":1,\"19\":1,\"40\":1,\"42\":1,\"43\":1,\"46\":1,\"67\":1,\"73\":2,\"80\":1,\"82\":1,\"84\":1,\"89\":1,\"91\":2,\"93\":1,\"94\":1}}],[\"$\",{\"1\":{\"142\":1}}],[\"$0x8\",{\"1\":{\"77\":6}}],[\"$0x2\",{\"1\":{\"77\":2}}],[\"$0x2a\",{\"1\":{\"14\":1}}],[\"$0x64\",{\"1\":{\"52\":1,\"53\":1}}],[\"$0x18\",{\"1\":{\"52\":2,\"53\":2}}],[\"$0x1\",{\"1\":{\"20\":1,\"77\":3,\"78\":1}}],[\"$0x10\",{\"1\":{\"20\":2}}],[\"$0x0\",{\"1\":{\"20\":2,\"77\":6}}],[\"$>\",{\"1\":{\"6\":2,\"7\":2,\"8\":2,\"9\":2,\"17\":2,\"19\":2,\"20\":1,\"22\":2,\"25\":1,\"28\":1,\"35\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"44\":4,\"46\":1,\"49\":3,\"52\":1,\"53\":1,\"54\":2,\"55\":6,\"58\":2,\"67\":3,\"68\":2,\"70\":1,\"73\":7,\"77\":5,\"82\":2,\"83\":2,\"84\":1,\"85\":2,\"89\":9,\"92\":3,\"93\":4,\"94\":3}}],[\"mm\",{\"1\":{\"150\":1}}],[\"mi\",{\"1\":{\"169\":1,\"181\":2}}],[\"min\",{\"0\":{\"157\":1},\"1\":{\"153\":1,\"157\":5,\"160\":3}}],[\"minute\",{\"1\":{\"150\":1}}],[\"micro\",{\"1\":{\"25\":1}}],[\"m不超过255\",{\"1\":{\"141\":1}}],[\"mysql也允许执行多个查询\",{\"1\":{\"186\":1}}],[\"mysql在运行时关联指定的每个表以处理联结\",{\"1\":{\"176\":1}}],[\"mysql将返回错误\",{\"1\":{\"173\":1}}],[\"mysql将只返回它能够返回的那多行\",{\"1\":{\"106\":1}}],[\"mysql允许将它用来返回任意列中的最小值\",{\"1\":{\"157\":1}}],[\"mysql中的正则表达式匹配\",{\"1\":{\"135\":1}}],[\"mysql的行也是从0开始的所以limit\",{\"1\":{\"106\":1}}],[\"mysql的选项和参数\",{\"0\":{\"98\":1}}],[\"mysql>\",{\"1\":{\"98\":1}}],[\"mysql指令\",{\"1\":{\"98\":1}}],[\"mysql\",{\"0\":{\"95\":1},\"1\":{\"98\":4,\"100\":1,\"106\":1}}],[\"myfree\",{\"1\":{\"91\":2}}],[\"mymalloc\",{\"1\":{\"91\":4,\"92\":2}}],[\"myname\",{\"1\":{\"42\":2}}],[\"memsz扩大\",{\"1\":{\"67\":1}}],[\"memsz大于p\",{\"1\":{\"67\":1}}],[\"memsz的值不可以小于p\",{\"1\":{\"67\":1}}],[\"memsz\",{\"1\":{\"67\":1}}],[\"memsiz\",{\"1\":{\"67\":1,\"73\":1}}],[\"memory\",{\"1\":{\"64\":1,\"67\":1,\"68\":1}}],[\"merge\",{\"1\":{\"28\":1,\"67\":1}}],[\"mcmodel=large\",{\"1\":{\"56\":1}}],[\"mcmodel=medium\",{\"1\":{\"56\":1}}],[\"mouse\",{\"1\":{\"169\":1}}],[\"month\",{\"1\":{\"150\":2}}],[\"monitor\",{\"1\":{\"98\":1}}],[\"mod\",{\"1\":{\"151\":1}}],[\"module\",{\"1\":{\"80\":1}}],[\"model\",{\"1\":{\"56\":1}}],[\"movl\",{\"1\":{\"20\":1,\"52\":1,\"53\":1,\"77\":5}}],[\"mov\",{\"1\":{\"20\":13,\"52\":3,\"53\":5,\"77\":9}}],[\"movq\",{\"1\":{\"14\":2,\"78\":1}}],[\"multi\",{\"1\":{\"44\":2,\"104\":1,\"164\":1}}],[\"mbind\",{\"1\":{\"28\":1,\"67\":1}}],[\"m\",{\"1\":{\"28\":1,\"67\":1,\"141\":1}}],[\"ms\",{\"1\":{\"28\":1,\"67\":1}}],[\"max\",{\"0\":{\"156\":1},\"1\":{\"153\":1,\"156\":7,\"157\":2,\"160\":3}}],[\"may\",{\"1\":{\"98\":1}}],[\"mallocp\",{\"1\":{\"94\":3}}],[\"malloc传递给链接器\",{\"1\":{\"93\":1}}],[\"malloc就把\",{\"1\":{\"93\":1}}],[\"malloc\",{\"1\":{\"91\":7,\"92\":1,\"93\":9,\"94\":8}}],[\"maple\",{\"1\":{\"181\":2}}],[\"maps\",{\"1\":{\"68\":1,\"73\":1,\"89\":1}}],[\"mapping\",{\"1\":{\"67\":1,\"73\":1}}],[\"manager\",{\"1\":{\"61\":1}}],[\"manualnamemangling\",{\"1\":{\"42\":4}}],[\"machine\",{\"1\":{\"25\":2}}],[\"magic\",{\"1\":{\"25\":2}}],[\"main\",{\"1\":{\"6\":1,\"19\":1,\"22\":1,\"35\":1,\"39\":2,\"40\":1,\"42\":1,\"43\":1,\"44\":2,\"46\":1,\"50\":3,\"55\":3,\"67\":1,\"73\":2,\"80\":2,\"82\":1,\"84\":1,\"89\":10,\"91\":1}}],[\"对组合查询结果排序\",{\"0\":{\"191\":1}}],[\"对单个表执行多个查询\",{\"1\":{\"186\":1}}],[\"对每个客户下了多少订单进行计数\",{\"1\":{\"182\":1}}],[\"对所有的行执行计算\",{\"1\":{\"159\":1}}],[\"对所有绝对地址的引用不做重定位\",{\"1\":{\"76\":1}}],[\"对非数值数据使用min\",{\"1\":{\"157\":1}}],[\"对非数值数据使用max\",{\"1\":{\"156\":1}}],[\"对特定列中具有值的行进行计数\",{\"1\":{\"155\":1}}],[\"对表中行的数目进行计数\",{\"1\":{\"155\":1}}],[\"对表名也是可以进行限定的\",{\"1\":{\"107\":1}}],[\"对产品按prod\",{\"1\":{\"111\":1}}],[\"对prod\",{\"1\":{\"107\":1,\"112\":2}}],[\"对mymalloc\",{\"1\":{\"93\":1}}],[\"对\",{\"1\":{\"85\":2}}],[\"对应的段名就是\",{\"1\":{\"84\":1}}],[\"对应gcc选项\",{\"1\":{\"77\":1}}],[\"对比于这种导入导出函数\",{\"1\":{\"84\":1}}],[\"对lib\",{\"1\":{\"73\":1}}],[\"对齐为0x1000\",{\"1\":{\"64\":1}}],[\"对存档文件中所有的成员目标文件都依次进行这个过程\",{\"1\":{\"55\":1}}],[\"对外部目标文件的符号引用在目标文件被最终链接成可执行文件时\",{\"1\":{\"44\":1}}],[\"对符号进行管理\",{\"1\":{\"35\":1}}],[\"对于这种联结可以使用稍微不同的语法来明确指定联结的类型\",{\"1\":{\"175\":1}}],[\"对于这种绝对地址的引用\",{\"1\":{\"85\":1}}],[\"对于检索出的每个客户\",{\"1\":{\"169\":1}}],[\"对于包含订单号\",{\"1\":{\"168\":1}}],[\"对于可执行文件而言\",{\"1\":{\"90\":1}}],[\"对于可执行文件基本可以确定自己在进程虚拟空间中的起始位置\",{\"1\":{\"75\":1}}],[\"对于深度优先\",{\"1\":{\"89\":1}}],[\"对于广度优先b1\",{\"1\":{\"89\":1}}],[\"对于第二个条件\",{\"1\":{\"88\":1}}],[\"对于第一个条件我们可以人物的控制\",{\"1\":{\"88\":1}}],[\"对于动态链接器本身\",{\"1\":{\"88\":1}}],[\"对于普通共享对象文件来说\",{\"1\":{\"88\":1}}],[\"对于模块内部的符号\",{\"1\":{\"84\":1}}],[\"对于模块间的调用也要先定位got\",{\"1\":{\"80\":1}}],[\"对于模块间调用和跳转\",{\"1\":{\"77\":1}}],[\"对于共享对象来说\",{\"1\":{\"79\":1}}],[\"对于数据段来说\",{\"1\":{\"79\":1}}],[\"对于现代系统来说\",{\"1\":{\"77\":1}}],[\"对于静态链接的可执行文件\",{\"1\":{\"73\":1}}],[\"对于链接器是如何知道foobar\",{\"1\":{\"73\":1}}],[\"对于一个日期\",{\"1\":{\"150\":1}}],[\"对于一个函数来说\",{\"1\":{\"41\":1}}],[\"对于一些必须要访问elf文件头的操作\",{\"1\":{\"69\":1}}],[\"对于长度不足一页的按一页占用\",{\"1\":{\"69\":1}}],[\"对于命令行上的每个输入文件\",{\"1\":{\"55\":1}}],[\"对于\",{\"1\":{\"49\":2,\"67\":1}}],[\"对于x86的硬件来说\",{\"1\":{\"48\":1}}],[\"对于未定义的弱引用\",{\"1\":{\"44\":1}}],[\"对于int类型来说\",{\"1\":{\"41\":1}}],[\"对于嵌套的名字\",{\"1\":{\"41\":1}}],[\"对于变量和函数来说\",{\"1\":{\"35\":1}}],[\"对于每个需要重定位的段\",{\"1\":{\"33\":1}}],[\"对于编译器和链接器来说\",{\"1\":{\"30\":1}}],[\"对目标文件b有\",{\"1\":{\"14\":1}}],[\"对使用定义在其它目标文件中的变量也是如此\",{\"1\":{\"14\":1}}],[\"对定义在其它目标文件中的函数调用的指令需要被重新调整\",{\"1\":{\"14\":1}}],[\"起来的过程被称为链接\",{\"1\":{\"12\":1}}],[\"lee和y\",{\"1\":{\"149\":1}}],[\"lee\",{\"1\":{\"149\":1,\"168\":2,\"178\":1,\"181\":2}}],[\"length\",{\"1\":{\"149\":1}}],[\"left\",{\"1\":{\"149\":1,\"182\":1}}],[\"leading\",{\"1\":{\"40\":1}}],[\"leave\",{\"1\":{\"20\":2}}],[\"lea\",{\"1\":{\"20\":1,\"52\":3,\"53\":3}}],[\"ltrim\",{\"1\":{\"149\":1}}],[\"ltrim移除左边的空格\",{\"1\":{\"144\":1}}],[\"lt\",{\"1\":{\"139\":1,\"144\":2,\"145\":1,\"149\":2,\"173\":2,\"174\":14,\"175\":4}}],[\"lane\",{\"1\":{\"181\":2}}],[\"lazy\",{\"1\":{\"80\":2}}],[\"large\",{\"1\":{\"28\":1,\"67\":1,\"104\":1,\"164\":1}}],[\"l指令查看elf文件的\",{\"1\":{\"67\":1}}],[\"lpthread\",{\"1\":{\"44\":1}}],[\"l\",{\"1\":{\"28\":2,\"67\":3,\"73\":1,\"82\":1}}],[\"lower\",{\"1\":{\"140\":1,\"149\":1}}],[\"locate\",{\"1\":{\"149\":1}}],[\"local\",{\"1\":{\"22\":8,\"39\":8,\"55\":3,\"77\":1,\"84\":1}}],[\"lock\",{\"1\":{\"104\":1,\"164\":1}}],[\"long\",{\"1\":{\"104\":1,\"164\":1}}],[\"load\",{\"1\":{\"19\":5,\"49\":33,\"67\":6,\"73\":4,\"76\":1}}],[\"lma\",{\"1\":{\"19\":1,\"49\":4}}],[\"lsb\",{\"1\":{\"17\":3}}],[\"ldl\",{\"1\":{\"94\":1}}],[\"ldd\",{\"1\":{\"83\":1,\"89\":2}}],[\"ld\",{\"1\":{\"10\":1,\"17\":3,\"55\":5,\"57\":1,\"73\":6,\"82\":2,\"83\":1,\"89\":7}}],[\"lie发音相似\",{\"1\":{\"149\":1}}],[\"lie\",{\"1\":{\"149\":2}}],[\"like\",{\"1\":{\"130\":4,\"131\":2}}],[\"like指示mysql\",{\"1\":{\"129\":1}}],[\"like操作符\",{\"0\":{\"129\":1}}],[\"limit\",{\"1\":{\"106\":8,\"113\":2,\"166\":1}}],[\"little\",{\"1\":{\"25\":1}}],[\"line\",{\"1\":{\"98\":1}}],[\"linktime\",{\"1\":{\"93\":1}}],[\"linkage\",{\"1\":{\"80\":1}}],[\"linker\",{\"1\":{\"68\":5,\"73\":10,\"81\":1,\"89\":25}}],[\"linked\",{\"1\":{\"17\":2}}],[\"linking\",{\"1\":{\"67\":1,\"72\":1}}],[\"link\",{\"0\":{\"32\":1},\"1\":{\"28\":2,\"29\":2,\"33\":1,\"67\":2,\"76\":1,\"77\":1,\"93\":3}}],[\"linux静态链接器支持用\",{\"1\":{\"93\":1}}],[\"linux链接器支持一种强大的技术\",{\"1\":{\"91\":1}}],[\"linux中将进程虚拟空间中的一个段叫做虚拟内存区域\",{\"1\":{\"64\":1}}],[\"linux下的动态链接器时这样处理全局符号介入的\",{\"1\":{\"89\":1}}],[\"linux下的\",{\"1\":{\"17\":1}}],[\"linux下的主流文件存储格式为elf\",{\"1\":{\"17\":1}}],[\"linux的gcc编译器支持这种装载时重定位的方法\",{\"1\":{\"76\":1}}],[\"linux的\",{\"1\":{\"17\":2}}],[\"linux\",{\"1\":{\"8\":1,\"17\":5,\"58\":2,\"73\":18,\"80\":1,\"82\":2,\"83\":3,\"89\":22}}],[\"libvector\",{\"1\":{\"80\":1}}],[\"libpic\",{\"1\":{\"77\":5}}],[\"library\",{\"1\":{\"75\":1,\"83\":1}}],[\"libc\",{\"1\":{\"58\":2,\"73\":6,\"80\":1,\"83\":3,\"89\":10}}],[\"libb\",{\"1\":{\"55\":4}}],[\"liba\",{\"1\":{\"55\":9}}],[\"lib32\",{\"1\":{\"17\":2}}],[\"lib64\",{\"1\":{\"17\":1,\"82\":2,\"83\":1,\"89\":2}}],[\"lib\",{\"1\":{\"8\":1,\"58\":2,\"73\":37,\"83\":1,\"84\":6,\"85\":2,\"89\":13}}],[\"gmon\",{\"1\":{\"84\":1,\"85\":1}}],[\"glibc\",{\"1\":{\"84\":2,\"85\":2}}],[\"glob\",{\"1\":{\"77\":1,\"79\":1,\"85\":5}}],[\"global类型的符号\",{\"1\":{\"55\":1}}],[\"global为double\",{\"1\":{\"43\":1}}],[\"global为int\",{\"1\":{\"43\":1}}],[\"global\",{\"1\":{\"19\":2,\"21\":1,\"22\":8,\"35\":2,\"39\":9,\"43\":2,\"55\":4,\"77\":2,\"78\":2,\"84\":2,\"89\":2}}],[\"graph\",{\"1\":{\"140\":1}}],[\"grants\",{\"1\":{\"100\":1}}],[\"grep\",{\"1\":{\"58\":1}}],[\"group\",{\"1\":{\"28\":1,\"67\":1,\"163\":6,\"164\":3,\"165\":3,\"166\":1,\"183\":1}}],[\"got的重定位\",{\"1\":{\"85\":1}}],[\"got段中而是在一个名为\",{\"1\":{\"77\":1}}],[\"got中相应的项保存的是目标函数的地址\",{\"1\":{\"77\":1}}],[\"got在文件中的偏移为0x3fc0\",{\"1\":{\"77\":1}}],[\"got是如何实现指令的地址无关性的\",{\"1\":{\"77\":1}}],[\"got\",{\"1\":{\"49\":2,\"67\":5,\"73\":4,\"77\":3,\"80\":3,\"85\":7}}],[\"g++\",{\"1\":{\"42\":1}}],[\"g\",{\"1\":{\"28\":1,\"58\":7,\"67\":1,\"98\":1}}],[\"gnu\",{\"1\":{\"8\":1,\"17\":2,\"19\":4,\"20\":2,\"28\":2,\"49\":9,\"58\":2,\"67\":10,\"73\":24,\"83\":2,\"89\":13,\"94\":1}}],[\"gcc默认使用小型代码模型\",{\"1\":{\"56\":1}}],[\"gcc编译器也可以通过==\",{\"1\":{\"40\":1}}],[\"gcc生成可执行文件的四个步骤\",{\"1\":{\"6\":1}}],[\"gcc\",{\"1\":{\"6\":1,\"7\":1,\"8\":2,\"9\":1,\"20\":1,\"22\":1,\"44\":2,\"46\":1,\"55\":5,\"67\":4,\"73\":3,\"77\":2,\"82\":1,\"84\":1,\"89\":5,\"92\":2,\"93\":3,\"94\":2}}],[\"sam\",{\"1\":{\"168\":2,\"178\":1}}],[\"safe\",{\"1\":{\"102\":1,\"103\":2,\"104\":3,\"107\":2,\"110\":1,\"111\":2,\"112\":4,\"124\":2,\"125\":4,\"126\":1,\"164\":3,\"173\":1,\"174\":6,\"175\":2,\"180\":4}}],[\"sqrt\",{\"1\":{\"151\":1}}],[\"s后的\",{\"1\":{\"141\":1}}],[\"space\",{\"1\":{\"140\":1}}],[\"specify\",{\"1\":{\"86\":1}}],[\"specific\",{\"1\":{\"25\":1,\"28\":2,\"67\":2}}],[\"specialsymbol\",{\"1\":{\"40\":2}}],[\"schema\",{\"1\":{\"100\":2}}],[\"snprintf\",{\"1\":{\"94\":2}}],[\"sum\",{\"0\":{\"158\":1},\"1\":{\"153\":1,\"158\":4,\"165\":4}}],[\"supplies\",{\"1\":{\"139\":1,\"144\":2,\"145\":1,\"149\":2,\"173\":2,\"174\":14,\"175\":4}}],[\"supplement\",{\"1\":{\"86\":1}}],[\"suitable\",{\"1\":{\"104\":1,\"164\":1}}],[\"subquery\",{\"1\":{\"169\":1}}],[\"substring\",{\"1\":{\"149\":1}}],[\"sub\",{\"1\":{\"20\":2,\"52\":2,\"53\":2,\"77\":3}}],[\"sling\",{\"1\":{\"102\":1,\"103\":2,\"104\":3,\"107\":2,\"110\":1,\"111\":2,\"112\":4,\"117\":2,\"123\":2,\"124\":2,\"125\":2,\"126\":1,\"164\":3,\"173\":1,\"174\":6,\"175\":2,\"180\":4,\"188\":2,\"190\":1,\"191\":1}}],[\"slo一模一样\",{\"1\":{\"85\":1}}],[\"slo\",{\"1\":{\"85\":3}}],[\"sleep\",{\"1\":{\"67\":1,\"73\":1}}],[\"sd\",{\"1\":{\"84\":1}}],[\"sword\",{\"1\":{\"83\":1}}],[\"swap的地址\",{\"1\":{\"53\":1}}],[\"swap调用处的地址在反汇编代码的0x2c字节处同样被标记为0\",{\"1\":{\"52\":1}}],[\"swap\",{\"1\":{\"46\":2,\"50\":1,\"53\":1,\"54\":2,\"55\":4}}],[\"smaller\",{\"1\":{\"57\":1}}],[\"small\",{\"1\":{\"56\":1}}],[\"sxword\",{\"1\":{\"56\":1,\"83\":1}}],[\"s指令查看a\",{\"1\":{\"55\":1}}],[\"s指令来显示elf文件的各种段表结构\",{\"1\":{\"28\":1}}],[\"s查看符号表\",{\"1\":{\"39\":1}}],[\"show\",{\"1\":{\"100\":9}}],[\"shoff元素\",{\"1\":{\"29\":1}}],[\"shoff\",{\"1\":{\"25\":1}}],[\"shndx的值会有些特殊\",{\"1\":{\"38\":1}}],[\"shndx\",{\"0\":{\"38\":1},\"1\":{\"36\":1}}],[\"shnum\",{\"1\":{\"25\":1}}],[\"shl\",{\"1\":{\"33\":1}}],[\"sh\",{\"0\":{\"30\":1,\"31\":1,\"32\":2},\"1\":{\"29\":10,\"30\":2,\"33\":5,\"38\":1}}],[\"shdr\",{\"1\":{\"29\":1}}],[\"shdr又被称为段描述符\",{\"1\":{\"28\":1}}],[\"shdr对应一个段属性描述\",{\"1\":{\"28\":1}}],[\"shdr结构的数组形式进行存储\",{\"1\":{\"28\":1}}],[\"shstrtab\",{\"1\":{\"28\":1,\"29\":1,\"34\":1,\"67\":1}}],[\"shstrndx\",{\"1\":{\"25\":1}}],[\"shentsize\",{\"1\":{\"25\":1}}],[\"shared选项而不使用\",{\"1\":{\"76\":1}}],[\"shared的地址\",{\"1\":{\"53\":1}}],[\"shared地址在反汇编代码的0x08字节处标记为0\",{\"1\":{\"52\":1}}],[\"shared\",{\"1\":{\"17\":1,\"46\":3,\"50\":1,\"53\":1,\"54\":2,\"55\":3,\"73\":3,\"75\":1,\"77\":2,\"83\":1,\"84\":1,\"89\":4,\"94\":1}}],[\"sha1\",{\"1\":{\"17\":2}}],[\"sys\",{\"1\":{\"100\":1}}],[\"system\",{\"1\":{\"25\":1}}],[\"sysv\",{\"1\":{\"17\":2}}],[\"syment\",{\"1\":{\"83\":1}}],[\"sym\",{\"1\":{\"36\":1,\"54\":4,\"77\":2,\"85\":4}}],[\"symtab\",{\"1\":{\"22\":1,\"28\":2,\"39\":1,\"55\":1,\"67\":2,\"77\":1,\"83\":2,\"84\":4}}],[\"symbol\",{\"0\":{\"35\":1},\"1\":{\"22\":1,\"35\":5,\"36\":5,\"37\":2,\"39\":1,\"43\":2,\"54\":1,\"55\":1,\"56\":3,\"57\":1,\"77\":1,\"84\":5,\"89\":2}}],[\"sin\",{\"1\":{\"151\":1}}],[\"since\",{\"1\":{\"86\":2}}],[\"single\",{\"1\":{\"44\":2,\"104\":2,\"164\":2}}],[\"simpledynamicallinking\",{\"1\":{\"73\":10}}],[\"simplesection\",{\"1\":{\"19\":4,\"20\":2,\"21\":2,\"22\":4,\"25\":1,\"28\":1,\"35\":2,\"39\":2}}],[\"signature\",{\"1\":{\"41\":1}}],[\"sizeof\",{\"1\":{\"94\":4}}],[\"sizes\",{\"1\":{\"86\":1}}],[\"size\",{\"1\":{\"19\":3,\"22\":1,\"25\":6,\"28\":1,\"29\":3,\"36\":2,\"39\":1,\"49\":3,\"55\":1,\"67\":3,\"77\":2,\"84\":1,\"91\":8,\"93\":6,\"94\":5,\"104\":1,\"164\":1}}],[\"season\",{\"1\":{\"104\":1,\"164\":1}}],[\"seed\",{\"1\":{\"102\":1,\"103\":1,\"104\":1,\"106\":3,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"117\":1,\"119\":2,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"164\":1,\"173\":1,\"174\":6,\"175\":2,\"176\":1,\"180\":2}}],[\"select子句顺序\",{\"0\":{\"166\":1}}],[\"select语句中的每个列都必须在group\",{\"1\":{\"163\":1}}],[\"select语句的基本格式\",{\"1\":{\"108\":1}}],[\"select\",{\"1\":{\"102\":2,\"103\":1,\"104\":1,\"105\":2,\"106\":4,\"107\":2,\"108\":1,\"110\":1,\"111\":1,\"112\":2,\"113\":2,\"115\":1,\"117\":3,\"118\":1,\"119\":2,\"120\":2,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"127\":2,\"130\":2,\"131\":2,\"135\":2,\"136\":1,\"137\":2,\"138\":1,\"139\":2,\"141\":2,\"142\":1,\"144\":2,\"145\":1,\"146\":2,\"149\":3,\"150\":3,\"154\":2,\"155\":2,\"156\":1,\"157\":1,\"158\":2,\"159\":1,\"160\":1,\"162\":1,\"163\":2,\"164\":4,\"165\":2,\"166\":1,\"168\":8,\"169\":3,\"173\":1,\"174\":1,\"175\":2,\"176\":1,\"178\":1,\"180\":3,\"181\":1,\"182\":2,\"183\":1,\"188\":4,\"190\":2,\"191\":2}}],[\"set\",{\"1\":{\"100\":4,\"102\":1,\"103\":1,\"104\":1,\"105\":2,\"106\":4,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"113\":2,\"115\":1,\"117\":3,\"118\":1,\"119\":2,\"120\":2,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"127\":2,\"130\":2,\"131\":2,\"135\":2,\"136\":1,\"137\":2,\"138\":1,\"139\":3,\"141\":2,\"142\":1,\"144\":4,\"145\":2,\"146\":2,\"149\":5,\"150\":3,\"154\":2,\"155\":2,\"156\":1,\"157\":1,\"158\":2,\"159\":1,\"160\":1,\"162\":1,\"163\":2,\"164\":4,\"165\":2,\"168\":5,\"169\":2,\"173\":3,\"174\":15,\"175\":6,\"176\":1,\"178\":1,\"180\":2,\"181\":1,\"182\":2,\"183\":1,\"188\":3,\"190\":1,\"191\":1}}],[\"server\",{\"1\":{\"86\":1,\"98\":1}}],[\"seg2\",{\"1\":{\"69\":1}}],[\"seg1\",{\"1\":{\"69\":1}}],[\"seg0\",{\"1\":{\"69\":1}}],[\"segment\",{\"1\":{\"18\":1,\"67\":22,\"73\":2,\"80\":1,\"81\":1,\"86\":1}}],[\"second\",{\"1\":{\"150\":1}}],[\"sec\",{\"1\":{\"49\":1,\"73\":1,\"77\":1,\"100\":4,\"102\":1,\"103\":1,\"104\":1,\"105\":2,\"106\":4,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"113\":2,\"115\":1,\"117\":3,\"118\":1,\"119\":2,\"120\":2,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"127\":2,\"130\":2,\"131\":2,\"135\":2,\"136\":1,\"137\":2,\"138\":1,\"139\":2,\"141\":2,\"142\":1,\"144\":2,\"145\":1,\"146\":2,\"149\":3,\"150\":3,\"154\":2,\"155\":2,\"156\":1,\"157\":1,\"158\":2,\"159\":1,\"160\":1,\"162\":1,\"163\":2,\"164\":4,\"165\":2,\"168\":5,\"169\":2,\"173\":1,\"174\":1,\"175\":2,\"176\":1,\"178\":1,\"180\":2,\"181\":1,\"182\":2,\"183\":1,\"188\":3,\"190\":1,\"191\":1}}],[\"sectionmapping\",{\"1\":{\"67\":7,\"68\":6}}],[\"sections\",{\"1\":{\"19\":1,\"49\":3,\"67\":1,\"73\":1}}],[\"section\",{\"1\":{\"18\":3,\"20\":7,\"21\":2,\"22\":5,\"24\":1,\"25\":8,\"28\":2,\"29\":10,\"34\":1,\"36\":2,\"39\":4,\"52\":1,\"53\":1,\"54\":2,\"55\":2,\"56\":1,\"67\":7,\"73\":1,\"77\":4,\"82\":1,\"83\":2,\"85\":2}}],[\"sticks\",{\"1\":{\"102\":1,\"103\":1,\"104\":2,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"117\":1,\"119\":2,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"141\":3,\"164\":2,\"173\":1,\"174\":6,\"175\":2,\"176\":1,\"180\":2}}],[\"stick\",{\"1\":{\"102\":1,\"103\":1,\"104\":2,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"115\":1,\"117\":2,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"141\":1,\"164\":2,\"173\":1,\"174\":6,\"175\":2,\"180\":2}}],[\"stderr\",{\"1\":{\"80\":3,\"94\":4}}],[\"st\",{\"0\":{\"37\":1,\"38\":1,\"39\":1},\"1\":{\"36\":6,\"39\":2}}],[\"strsz\",{\"1\":{\"83\":2}}],[\"strong\",{\"1\":{\"43\":2,\"44\":2}}],[\"strtab\",{\"1\":{\"28\":3,\"34\":1,\"67\":3,\"83\":2,\"84\":1}}],[\"struct\",{\"1\":{\"25\":1,\"29\":1,\"36\":1,\"54\":1,\"56\":1,\"67\":1,\"83\":2,\"86\":2}}],[\"strings\",{\"1\":{\"28\":1,\"67\":1}}],[\"string\",{\"1\":{\"25\":2,\"29\":1,\"34\":2,\"36\":1,\"84\":2}}],[\"stripped\",{\"1\":{\"17\":3}}],[\"standard\",{\"1\":{\"86\":1}}],[\"stapsdt\",{\"1\":{\"67\":3}}],[\"state\",{\"1\":{\"100\":2,\"169\":2,\"181\":1}}],[\"statement\",{\"1\":{\"98\":1}}],[\"status\",{\"1\":{\"55\":1,\"100\":1}}],[\"static\",{\"1\":{\"17\":1,\"19\":6,\"21\":1,\"22\":3,\"35\":2,\"39\":2,\"55\":4,\"67\":2,\"75\":1,\"77\":3,\"79\":2,\"85\":2,\"89\":1}}],[\"startup\",{\"1\":{\"52\":1,\"54\":5}}],[\"starting\",{\"1\":{\"28\":1,\"67\":2,\"73\":1,\"77\":1}}],[\"start\",{\"1\":{\"25\":2,\"40\":5,\"80\":1,\"84\":1,\"85\":1}}],[\"stack虽然有但是长度为0\",{\"1\":{\"19\":1}}],[\"stack\",{\"1\":{\"19\":2,\"28\":1,\"49\":2,\"53\":1,\"54\":2,\"55\":2,\"67\":1,\"68\":1,\"73\":2,\"89\":1}}],[\"soundex考虑了类似的发音字符和音节\",{\"1\":{\"149\":1}}],[\"soundex是一个将任何文本串转换为描述其语音表示的字母数字模式的算法\",{\"1\":{\"149\":1}}],[\"soundex\",{\"1\":{\"149\":3}}],[\"source\",{\"1\":{\"94\":1}}],[\"so都被装载进来了\",{\"1\":{\"89\":1}}],[\"so以及b2\",{\"1\":{\"89\":1}}],[\"so和a2\",{\"1\":{\"89\":3}}],[\"so和bar\",{\"1\":{\"80\":1}}],[\"so导出\",{\"1\":{\"84\":1}}],[\"so它实际上是定义了foobar\",{\"1\":{\"84\":1}}],[\"soname\",{\"1\":{\"83\":1}}],[\"so实际上是一个共享对象\",{\"1\":{\"81\":1}}],[\"so模块的入口点\",{\"1\":{\"80\":1}}],[\"so中的函数a似乎被忽略了\",{\"1\":{\"89\":1}}],[\"so中的bar\",{\"1\":{\"80\":1}}],[\"so中第一次调用bar\",{\"1\":{\"80\":1}}],[\"so需要调用libc\",{\"1\":{\"80\":1}}],[\"so外\",{\"1\":{\"73\":1}}],[\"so与program1一样\",{\"1\":{\"73\":1}}],[\"so的同名符号一定会被忽略\",{\"1\":{\"89\":1}}],[\"so的函数a是不是冲突了\",{\"1\":{\"89\":1}}],[\"so的函数a和a2\",{\"1\":{\"89\":1}}],[\"so的错误\",{\"1\":{\"89\":1}}],[\"so的\",{\"1\":{\"84\":1}}],[\"so的最终装载地址并不是0x0000000000000000\",{\"1\":{\"73\":1}}],[\"so的装载属性\",{\"1\":{\"73\":1}}],[\"so的动态符号\",{\"1\":{\"73\":1}}],[\"so的原因\",{\"1\":{\"73\":1}}],[\"so也作为链接的输入文件之一\",{\"1\":{\"73\":1}}],[\"so也参与了链接过程\",{\"1\":{\"73\":1}}],[\"so保留了完整的符号信息\",{\"1\":{\"73\":1}}],[\"so共享对象文件\",{\"1\":{\"73\":1}}],[\"so文件\",{\"1\":{\"17\":1}}],[\"so\",{\"1\":{\"17\":3,\"73\":24,\"77\":5,\"80\":1,\"82\":2,\"83\":6,\"84\":4,\"85\":3,\"86\":1,\"89\":59,\"94\":2}}],[\"s\",{\"1\":{\"8\":3,\"9\":2,\"20\":2,\"22\":1,\"25\":1,\"28\":2,\"39\":1,\"55\":1,\"56\":3,\"67\":2,\"68\":1,\"77\":2,\"80\":3,\"82\":1,\"85\":1}}],[\"生成的代码要小\",{\"1\":{\"77\":1}}],[\"生成的代码要大\",{\"1\":{\"77\":1}}],[\"生成目标文件\",{\"1\":{\"9\":1}}],[\"生成汇编文件\",{\"1\":{\"8\":1}}],[\"生成预处理文件\",{\"1\":{\"7\":1}}],[\"语句之间用关键字union分隔\",{\"1\":{\"189\":1}}],[\"语句\",{\"1\":{\"102\":1}}],[\"语义分析及优化后生成汇编的过程\",{\"1\":{\"8\":1}}],[\"语法分析\",{\"1\":{\"8\":1}}],[\"将要使用3个union关键字\",{\"1\":{\"189\":1}}],[\"将它们的结果组合成单个结果集\",{\"1\":{\"187\":1}}],[\"将它们的got\",{\"1\":{\"90\":1}}],[\"将会多检索出两行\",{\"1\":{\"164\":1}}],[\"将串转换为大写\",{\"1\":{\"149\":1}}],[\"将串转换为小写\",{\"1\":{\"149\":1}}],[\"将值联结到一起构成单个值\",{\"1\":{\"144\":1}}],[\"将匹配1000或2000或3000\",{\"1\":{\"136\":1}}],[\"将不会匹配它们\",{\"1\":{\"130\":1}}],[\"将控制权交给动态链接器的入口地址\",{\"1\":{\"81\":1}}],[\"将共享对象中的地址引用按照是否跨模块分为\",{\"1\":{\"77\":1}}],[\"将program1\",{\"1\":{\"73\":1}}],[\"将其映射到进程的地址空间\",{\"1\":{\"69\":1}}],[\"将进程与中该虚拟内存页与分配的物理内存页建立映射关系\",{\"1\":{\"65\":1}}],[\"将cpu的指令寄存器设置成可执行文件的入口地址\",{\"1\":{\"64\":1}}],[\"将shared地址写入第二个参数\",{\"1\":{\"52\":1}}],[\"将所有包含指令的段反汇编\",{\"1\":{\"20\":1}}],[\"将所有段的内容以十六进制的方式打印\",{\"1\":{\"20\":1}}],[\"将每个源代码模块独立编译\",{\"1\":{\"12\":1}}],[\"将每一条汇编指令翻译成对应机器码的过程\",{\"1\":{\"9\":1}}],[\"将预处理文件经过一系列词法分析\",{\"1\":{\"8\":1}}],[\"将被包含的文件插入到该预处理指令的位置\",{\"1\":{\"7\":1}}],[\">=2\",{\"1\":{\"164\":1}}],[\">=\",{\"1\":{\"116\":1,\"119\":1,\"125\":2,\"164\":4,\"165\":2}}],[\">\",{\"1\":{\"7\":1,\"98\":1,\"116\":1,\"142\":1}}],[\"6中\",{\"1\":{\"85\":1}}],[\"6f2e3200\",{\"1\":{\"82\":1}}],[\"6e75782d\",{\"1\":{\"82\":1}}],[\"66\",{\"1\":{\"77\":3,\"80\":1}}],[\"669\",{\"1\":{\"68\":2}}],[\"63\",{\"1\":{\"20\":1}}],[\"62\",{\"1\":{\"20\":1}}],[\"62756e74\",{\"1\":{\"20\":2}}],[\"64位\",{\"1\":{\"83\":1}}],[\"642d6c69\",{\"1\":{\"82\":1}}],[\"64应该为rip\",{\"1\":{\"70\":1}}],[\"64小型代码模型\",{\"1\":{\"56\":1}}],[\"64\",{\"1\":{\"8\":1,\"17\":5,\"19\":1,\"20\":1,\"25\":3,\"29\":1,\"49\":3,\"52\":4,\"53\":5,\"54\":9,\"56\":4,\"58\":4,\"67\":2,\"73\":19,\"77\":1,\"79\":1,\"82\":3,\"83\":2,\"85\":14,\"86\":2,\"89\":20}}],[\"6\",{\"0\":{\"45\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"107\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"140\":1},\"1\":{\"7\":1,\"19\":1,\"22\":1,\"28\":1,\"39\":1,\"49\":3,\"55\":2,\"67\":1,\"69\":1,\"73\":6,\"83\":3,\"84\":1,\"89\":10,\"100\":1,\"138\":1,\"139\":1,\"144\":2,\"145\":1,\"149\":1,\"182\":1}}],[\"添加行号和文件名标号\",{\"1\":{\"7\":1}}],[\"59\",{\"1\":{\"146\":1}}],[\"5之后的另一种写法是\",{\"1\":{\"106\":1}}],[\"5指示mysql返回从第5行开始返回5行数据\",{\"1\":{\"106\":1}}],[\"5指示mysql返回不多于5行\",{\"1\":{\"106\":1}}],[\"50\",{\"1\":{\"100\":10,\"103\":3,\"104\":3,\"111\":3,\"112\":6,\"115\":3,\"117\":4,\"123\":2,\"124\":3,\"125\":4,\"126\":3,\"146\":1,\"157\":1,\"160\":1,\"164\":3,\"165\":2,\"173\":3,\"174\":18,\"175\":6,\"188\":4,\"190\":2,\"191\":2}}],[\"57\",{\"1\":{\"22\":1,\"39\":1}}],[\"5d\",{\"1\":{\"20\":2}}],[\"58\",{\"1\":{\"20\":1}}],[\"5611c5471000\",{\"1\":{\"73\":1}}],[\"5611c5450000\",{\"1\":{\"73\":1}}],[\"5611c3c7e000\",{\"1\":{\"73\":1}}],[\"5611c3c7d000\",{\"1\":{\"73\":2}}],[\"5611c3c7c000\",{\"1\":{\"73\":2}}],[\"5611c3c7b000\",{\"1\":{\"73\":2}}],[\"5611c3c7a000\",{\"1\":{\"73\":2}}],[\"5611c3c79000\",{\"1\":{\"73\":1}}],[\"56\",{\"1\":{\"20\":1}}],[\"54\",{\"1\":{\"20\":1}}],[\"54000000\",{\"1\":{\"20\":1}}],[\"51\",{\"1\":{\"20\":1}}],[\"55908c883000\",{\"1\":{\"89\":1}}],[\"55908c862000\",{\"1\":{\"89\":1}}],[\"55908b68c000\",{\"1\":{\"89\":1}}],[\"55908b68b000\",{\"1\":{\"89\":2}}],[\"55908b68a000\",{\"1\":{\"89\":2}}],[\"55908b689000\",{\"1\":{\"89\":2}}],[\"55908b688000\",{\"1\":{\"89\":2}}],[\"55908b687000\",{\"1\":{\"89\":1}}],[\"55\",{\"1\":{\"20\":2,\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"113\":2,\"127\":2,\"156\":1,\"160\":1,\"164\":1,\"165\":2,\"173\":1,\"174\":6,\"175\":2}}],[\"55000000\",{\"1\":{\"20\":1}}],[\"554889e5\",{\"1\":{\"20\":1}}],[\"5\",{\"0\":{\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":2,\"45\":1,\"79\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":2,\"106\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"139\":1,\"158\":1,\"166\":1},\"1\":{\"7\":1,\"19\":1,\"20\":1,\"22\":2,\"28\":1,\"39\":2,\"40\":1,\"49\":3,\"55\":3,\"67\":1,\"84\":3,\"85\":2,\"100\":3,\"102\":2,\"103\":3,\"104\":4,\"106\":9,\"107\":4,\"110\":2,\"111\":3,\"112\":6,\"117\":5,\"118\":1,\"119\":10,\"123\":2,\"124\":1,\"125\":2,\"126\":1,\"127\":6,\"130\":1,\"131\":1,\"137\":1,\"138\":3,\"141\":1,\"142\":1,\"146\":4,\"155\":1,\"163\":1,\"164\":4,\"169\":1,\"173\":3,\"174\":18,\"175\":6,\"176\":4,\"180\":2,\"182\":1,\"188\":5,\"190\":2,\"191\":2}}],[\"删除所有注释\",{\"1\":{\"7\":1}}],[\"4后\",{\"1\":{\"135\":1}}],[\"4一样\",{\"1\":{\"106\":1}}],[\"49\",{\"1\":{\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"117\":2,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"164\":1,\"173\":1,\"174\":6,\"175\":2,\"188\":2,\"190\":1,\"191\":1}}],[\"49446\",{\"1\":{\"73\":5}}],[\"49449\",{\"1\":{\"73\":5}}],[\"404\",{\"1\":{\"192\":1}}],[\"4020\",{\"1\":{\"85\":1}}],[\"4014\",{\"1\":{\"77\":1}}],[\"401c\",{\"1\":{\"77\":2}}],[\"4010\",{\"1\":{\"53\":1}}],[\"4008\",{\"1\":{\"77\":1,\"80\":1}}],[\"4000\",{\"1\":{\"77\":2}}],[\"4d\",{\"1\":{\"52\":1}}],[\"47\",{\"1\":{\"52\":1}}],[\"474e5500\",{\"1\":{\"20\":1}}],[\"41\",{\"1\":{\"52\":1}}],[\"4byte\",{\"1\":{\"43\":1}}],[\"42\",{\"1\":{\"42\":2,\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"117\":3,\"124\":1,\"126\":1,\"164\":1,\"173\":1,\"174\":6,\"175\":2,\"188\":3,\"190\":2,\"191\":1}}],[\"46\",{\"1\":{\"25\":1}}],[\"43\",{\"1\":{\"22\":1,\"39\":1,\"52\":1,\"84\":1,\"98\":1}}],[\"4f\",{\"1\":{\"20\":1}}],[\"4c\",{\"1\":{\"20\":1,\"25\":1}}],[\"4a\",{\"1\":{\"20\":2}}],[\"44444\",{\"1\":{\"181\":2}}],[\"44\",{\"1\":{\"20\":2,\"52\":3,\"53\":4,\"77\":3,\"80\":1}}],[\"45\",{\"1\":{\"20\":4,\"25\":1}}],[\"45f80100\",{\"1\":{\"20\":1}}],[\"45fc89c6\",{\"1\":{\"20\":1}}],[\"48\",{\"1\":{\"20\":6,\"52\":11,\"53\":11,\"77\":9}}],[\"4889e548\",{\"1\":{\"20\":1}}],[\"488d0500\",{\"1\":{\"20\":1}}],[\"4883ec10\",{\"1\":{\"20\":1}}],[\"4\",{\"0\":{\"10\":1,\"15\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":2,\"42\":1,\"56\":1,\"58\":1,\"70\":1,\"78\":1,\"80\":1,\"85\":1,\"105\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":2,\"138\":1,\"157\":1,\"165\":1,\"184\":1,\"191\":1},\"1\":{\"7\":1,\"19\":1,\"20\":1,\"22\":7,\"28\":3,\"39\":7,\"49\":7,\"52\":1,\"54\":3,\"55\":1,\"57\":1,\"67\":6,\"77\":1,\"80\":4,\"84\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":5,\"111\":1,\"112\":2,\"117\":2,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"141\":3,\"146\":2,\"163\":1,\"164\":3,\"165\":2,\"173\":1,\"174\":6,\"175\":2,\"176\":1,\"183\":1,\"188\":3,\"190\":1,\"191\":1}}],[\"递归的执行\",{\"1\":{\"7\":1}}],[\"处理\",{\"1\":{\"7\":1}}],[\"处理所有预编译指令\",{\"1\":{\"7\":1}}],[\"3意为从行3开始取4行\",{\"1\":{\"106\":1}}],[\"34\",{\"1\":{\"69\":1}}],[\"3fc0\",{\"1\":{\"77\":3}}],[\"3f\",{\"1\":{\"52\":1}}],[\"3d\",{\"1\":{\"52\":1}}],[\"36342e73\",{\"1\":{\"82\":1}}],[\"36342f6c\",{\"1\":{\"82\":1}}],[\"36\",{\"1\":{\"52\":1}}],[\"31\",{\"1\":{\"52\":5,\"53\":2}}],[\"31332e32\",{\"1\":{\"20\":1}}],[\"35\",{\"1\":{\"52\":2,\"53\":2,\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"127\":2,\"164\":1,\"173\":1,\"174\":6,\"175\":2}}],[\"3e\",{\"1\":{\"20\":1}}],[\"37\",{\"1\":{\"20\":1}}],[\"33\",{\"1\":{\"20\":1}}],[\"3000\",{\"1\":{\"136\":1}}],[\"30\",{\"1\":{\"20\":1,\"150\":4}}],[\"39000000\",{\"1\":{\"20\":1}}],[\"3c000000\",{\"1\":{\"20\":1}}],[\"3a202855\",{\"1\":{\"20\":1}}],[\"32位\",{\"1\":{\"83\":1}}],[\"32\",{\"1\":{\"17\":1,\"56\":2,\"67\":5,\"86\":2,\"91\":1,\"92\":1,\"93\":1,\"94\":1}}],[\"3\",{\"0\":{\"9\":1,\"14\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":2,\"23\":2,\"27\":1,\"32\":1,\"33\":1,\"39\":1,\"41\":1,\"50\":1,\"55\":1,\"57\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":2,\"70\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":2,\"78\":1,\"79\":1,\"84\":1,\"90\":1,\"94\":1,\"100\":1,\"104\":1,\"110\":1,\"111\":1,\"112\":2,\"113\":2,\"119\":1,\"125\":1,\"127\":1,\"137\":1,\"151\":1,\"156\":1,\"160\":1,\"164\":1,\"176\":1,\"182\":1,\"183\":1,\"190\":1},\"1\":{\"7\":1,\"17\":1,\"19\":3,\"22\":4,\"28\":1,\"39\":4,\"40\":1,\"49\":19,\"54\":1,\"55\":3,\"67\":1,\"80\":1,\"83\":1,\"84\":1,\"85\":1,\"103\":1,\"104\":1,\"106\":3,\"111\":1,\"112\":2,\"117\":3,\"124\":1,\"126\":1,\"130\":1,\"131\":1,\"138\":2,\"142\":1,\"146\":2,\"150\":2,\"155\":1,\"163\":2,\"164\":2,\"168\":1,\"173\":1,\"174\":6,\"175\":2,\"176\":1,\"188\":3,\"190\":2,\"191\":1}}],[\"equijoin\",{\"1\":{\"175\":1}}],[\"et\",{\"1\":{\"139\":1,\"144\":2,\"145\":1,\"149\":2,\"174\":14}}],[\"etext\",{\"1\":{\"40\":9}}],[\"empty\",{\"1\":{\"120\":1,\"149\":1}}],[\"email\",{\"1\":{\"100\":2,\"120\":1,\"155\":1,\"181\":1}}],[\"ef\",{\"1\":{\"77\":2}}],[\"errors和show\",{\"1\":{\"100\":1}}],[\"error\",{\"1\":{\"55\":1,\"80\":3,\"94\":6}}],[\"exp\",{\"1\":{\"151\":1}}],[\"expanded\",{\"1\":{\"146\":2}}],[\"export\",{\"1\":{\"84\":2}}],[\"exectuion\",{\"1\":{\"67\":1}}],[\"exec\",{\"1\":{\"67\":1,\"86\":1}}],[\"execution\",{\"1\":{\"29\":1}}],[\"execute\",{\"1\":{\"28\":1,\"67\":1}}],[\"executable\",{\"1\":{\"17\":1,\"40\":7,\"67\":1,\"77\":1}}],[\"except\",{\"1\":{\"67\":2}}],[\"exclude\",{\"1\":{\"28\":1,\"67\":1}}],[\"exit\",{\"1\":{\"55\":1,\"80\":3,\"94\":2}}],[\"ext\",{\"1\":{\"43\":1,\"77\":5}}],[\"extern\",{\"0\":{\"42\":1},\"1\":{\"40\":4,\"42\":4,\"43\":1,\"46\":1,\"77\":4,\"78\":1}}],[\"external\",{\"1\":{\"35\":1}}],[\"extra\",{\"1\":{\"28\":1,\"67\":1,\"100\":2,\"104\":1,\"164\":1}}],[\"ei\",{\"1\":{\"25\":1}}],[\"edata\",{\"1\":{\"40\":6}}],[\"edx\",{\"1\":{\"20\":4}}],[\"edi\",{\"1\":{\"20\":2}}],[\"e8\",{\"1\":{\"20\":2,\"52\":3,\"53\":3,\"77\":6}}],[\"e8000000\",{\"1\":{\"20\":1}}],[\"esi\",{\"1\":{\"20\":1}}],[\"eax\",{\"1\":{\"20\":11,\"52\":4,\"53\":4,\"77\":6}}],[\"ec\",{\"1\":{\"20\":2,\"52\":1,\"53\":1,\"77\":3}}],[\"e5\",{\"1\":{\"20\":2}}],[\"ehdr的e\",{\"1\":{\"29\":1}}],[\"ehdr\",{\"1\":{\"25\":1}}],[\"ehsize\",{\"1\":{\"25\":1}}],[\"eh\",{\"1\":{\"19\":1,\"20\":1,\"28\":2,\"49\":4,\"54\":2,\"67\":2,\"73\":4}}],[\"england\",{\"1\":{\"144\":2,\"145\":1}}],[\"entsize\",{\"1\":{\"28\":1,\"29\":1,\"67\":1,\"77\":1}}],[\"entries\",{\"1\":{\"22\":1,\"39\":1,\"54\":1,\"55\":1,\"77\":2,\"83\":1,\"84\":1,\"85\":1}}],[\"entry\",{\"1\":{\"14\":1,\"25\":7,\"29\":1,\"54\":2,\"56\":1,\"67\":1,\"73\":1,\"83\":3,\"85\":1,\"86\":2}}],[\"end\",{\"1\":{\"40\":12,\"98\":1}}],[\"endian\",{\"1\":{\"25\":1}}],[\"endif\",{\"1\":{\"7\":1,\"73\":1,\"91\":2,\"93\":1,\"94\":1}}],[\"endbr64\",{\"1\":{\"20\":2,\"52\":1,\"53\":1,\"77\":7,\"80\":1}}],[\"e\",{\"1\":{\"7\":1,\"20\":6,\"25\":14,\"28\":1,\"41\":2,\"67\":2,\"73\":1,\"169\":1,\"183\":1}}],[\"elements\",{\"1\":{\"86\":2}}],[\"elf中表示这种模块间符号导入导出的关系就叫做\",{\"1\":{\"84\":1}}],[\"elf32\",{\"1\":{\"83\":4,\"86\":1}}],[\"elf使用\",{\"1\":{\"80\":1}}],[\"elf共享库在编译时\",{\"1\":{\"78\":1}}],[\"elf的做法是在数据段里面创建一个指向这些变量的指针数组\",{\"1\":{\"77\":1}}],[\"elf与linux进程虚拟空间映射关系\",{\"1\":{\"68\":1}}],[\"elf可执行文件有一个专门的数据结构叫做==程序头表\",{\"1\":{\"67\":1}}],[\"elf可执行文件与进程虚拟空间映射关系\",{\"1\":{\"67\":1}}],[\"elf可执行文件引入了一个概念叫做\",{\"1\":{\"67\":1}}],[\"elf定义了32种不同的重定位类型\",{\"1\":{\"56\":1}}],[\"elf符号表结构\",{\"0\":{\"36\":1},\"1\":{\"36\":1}}],[\"elf重定位类型\",{\"1\":{\"25\":1}}],[\"elf魔数\",{\"1\":{\"25\":1}}],[\"elf目标文件的最前部是elf文件头\",{\"1\":{\"24\":1}}],[\"elf64\",{\"1\":{\"19\":1,\"20\":1,\"25\":15,\"29\":12,\"36\":5,\"49\":3,\"52\":1,\"53\":1,\"54\":4,\"56\":4,\"58\":2,\"67\":9,\"82\":1,\"83\":4,\"86\":1}}],[\"elf文件链接视图和执行视图\",{\"0\":{\"67\":1}}],[\"elf文件中用到了很多字符串\",{\"1\":{\"34\":1}}],[\"elf文件头中保存有入口地址\",{\"1\":{\"64\":1}}],[\"elf文件头中指出了段表位于文件的偏移\",{\"1\":{\"29\":1}}],[\"elf文件头结构成员含义\",{\"1\":{\"25\":1}}],[\"elf文件头定义了\",{\"1\":{\"25\":1}}],[\"elf文件结构\",{\"1\":{\"24\":1}}],[\"elf文件结构描述\",{\"0\":{\"24\":1}}],[\"elf文件的开头是一个\",{\"1\":{\"18\":1}}],[\"elf文件标准里采用elf格式的文件\",{\"1\":{\"17\":1}}],[\"elf\",{\"1\":{\"17\":3,\"24\":1,\"25\":3,\"29\":1,\"36\":1,\"67\":6,\"68\":6,\"73\":1,\"86\":1}}],[\"else\",{\"1\":{\"7\":1,\"44\":1}}],[\"elif\",{\"1\":{\"7\":1}}],[\"il\",{\"1\":{\"169\":1}}],[\"items\",{\"1\":{\"158\":2,\"160\":2}}],[\"item\",{\"1\":{\"146\":6,\"158\":1,\"165\":4,\"181\":2}}],[\"its\",{\"1\":{\"98\":2}}],[\"it\",{\"1\":{\"86\":4}}],[\"itm\",{\"1\":{\"84\":2,\"85\":2}}],[\"image\",{\"1\":{\"84\":1}}],[\"import\",{\"1\":{\"84\":2}}],[\"implicit\",{\"1\":{\"55\":1}}],[\"ia32下一般为4096字节\",{\"1\":{\"64\":1}}],[\"is\",{\"1\":{\"44\":4,\"57\":1,\"67\":1,\"73\":1,\"86\":2,\"98\":2,\"120\":2}}],[\"id为tnt2的所有订单物品\",{\"1\":{\"168\":1}}],[\"id分组数据\",{\"1\":{\"164\":1}}],[\"id而不是整个表计算num\",{\"1\":{\"163\":1}}],[\"id排序并分组数据\",{\"1\":{\"163\":1}}],[\"id包含产品供应商的id\",{\"1\":{\"163\":1}}],[\"id不等于1003的商品\",{\"1\":{\"118\":1}}],[\"id\",{\"1\":{\"49\":1,\"67\":2,\"73\":2,\"98\":1,\"100\":2,\"103\":2,\"104\":2,\"105\":4,\"111\":2,\"112\":4,\"113\":4,\"118\":3,\"120\":2,\"123\":3,\"124\":6,\"125\":12,\"126\":1,\"127\":7,\"130\":4,\"131\":4,\"146\":4,\"150\":6,\"154\":1,\"159\":1,\"162\":1,\"163\":6,\"164\":11,\"168\":10,\"169\":3,\"173\":2,\"175\":4,\"176\":4,\"178\":3,\"180\":9,\"181\":6,\"182\":8,\"183\":5,\"188\":16,\"190\":7,\"191\":8}}],[\"ident\",{\"1\":{\"25\":1}}],[\"idx\",{\"1\":{\"19\":1,\"49\":3}}],[\"i\",{\"1\":{\"7\":3,\"8\":2,\"19\":2,\"28\":3,\"41\":1,\"67\":1,\"73\":5,\"84\":2,\"92\":2,\"180\":1}}],[\"ifndef\",{\"1\":{\"73\":1,\"91\":1}}],[\"ifdef\",{\"1\":{\"7\":1,\"91\":1,\"93\":1,\"94\":1}}],[\"if\",{\"1\":{\"7\":1,\"29\":1,\"44\":2,\"56\":2,\"80\":3,\"94\":2}}],[\"inner\",{\"1\":{\"175\":2,\"182\":1,\"183\":1}}],[\"in取合法值的由逗号分隔的清单\",{\"1\":{\"126\":1}}],[\"in操作符用来指定条件范围\",{\"1\":{\"126\":1}}],[\"in操作符\",{\"0\":{\"126\":1}}],[\"inc\",{\"1\":{\"139\":2,\"144\":2,\"145\":1,\"149\":3,\"168\":2,\"169\":1,\"174\":14,\"178\":1,\"181\":2,\"183\":1}}],[\"increment\",{\"1\":{\"100\":2}}],[\"included\",{\"1\":{\"104\":1,\"164\":1}}],[\"include预编译指令\",{\"1\":{\"7\":1}}],[\"include\",{\"1\":{\"6\":1,\"25\":1,\"29\":1,\"36\":1,\"40\":1,\"42\":1,\"44\":2,\"67\":1,\"73\":5,\"80\":3,\"82\":1,\"84\":2,\"86\":1,\"89\":3,\"91\":5,\"93\":1,\"94\":4}}],[\"input\",{\"1\":{\"98\":1}}],[\"insecure\",{\"1\":{\"98\":1}}],[\"independent\",{\"1\":{\"77\":2}}],[\"index\",{\"1\":{\"25\":2,\"29\":1,\"36\":2,\"54\":1,\"56\":1}}],[\"in\",{\"1\":{\"25\":1,\"29\":1,\"55\":4,\"57\":2,\"67\":2,\"86\":2,\"100\":5,\"102\":1,\"103\":1,\"104\":1,\"105\":2,\"106\":4,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"113\":2,\"115\":1,\"117\":3,\"118\":1,\"119\":2,\"120\":1,\"123\":1,\"124\":1,\"125\":2,\"126\":3,\"127\":3,\"130\":2,\"131\":2,\"135\":2,\"136\":1,\"137\":2,\"138\":1,\"139\":2,\"141\":2,\"142\":1,\"144\":2,\"145\":1,\"146\":2,\"149\":2,\"150\":3,\"154\":2,\"155\":2,\"156\":1,\"157\":1,\"158\":2,\"159\":1,\"160\":1,\"162\":1,\"163\":2,\"164\":4,\"165\":2,\"168\":10,\"169\":3,\"173\":1,\"174\":1,\"175\":2,\"176\":1,\"178\":1,\"180\":2,\"181\":1,\"182\":2,\"183\":1,\"188\":5,\"190\":2,\"191\":2}}],[\"information\",{\"1\":{\"29\":1,\"100\":1}}],[\"info\",{\"0\":{\"32\":1,\"37\":1},\"1\":{\"25\":1,\"28\":2,\"29\":1,\"33\":1,\"36\":1,\"54\":3,\"56\":1,\"67\":2,\"77\":2,\"85\":2}}],[\"init为512字节\",{\"1\":{\"67\":1}}],[\"init\",{\"1\":{\"19\":1,\"21\":1,\"22\":1,\"35\":1,\"39\":2,\"49\":2,\"67\":8,\"73\":3,\"83\":4,\"90\":4}}],[\"intr\",{\"1\":{\"94\":2}}],[\"intl\",{\"1\":{\"93\":2}}],[\"intc\",{\"1\":{\"92\":2}}],[\"into\",{\"1\":{\"25\":2}}],[\"intended\",{\"1\":{\"104\":1,\"164\":1}}],[\"integer\",{\"1\":{\"83\":2,\"86\":2}}],[\"interface\",{\"1\":{\"98\":1}}],[\"interna\",{\"1\":{\"58\":1}}],[\"internal\",{\"1\":{\"58\":2}}],[\"interpose\",{\"1\":{\"89\":1}}],[\"interposition\",{\"1\":{\"77\":1}}],[\"interp\",{\"0\":{\"82\":1},\"1\":{\"49\":1,\"82\":6}}],[\"interpreter\",{\"1\":{\"17\":1,\"82\":3,\"86\":2}}],[\"intel\",{\"1\":{\"17\":1}}],[\"int\",{\"1\":{\"6\":1,\"19\":9,\"40\":1,\"41\":12,\"42\":8,\"43\":6,\"44\":3,\"46\":6,\"67\":1,\"73\":5,\"77\":4,\"78\":2,\"79\":2,\"80\":8,\"82\":1,\"84\":2,\"85\":2,\"89\":1,\"91\":4,\"92\":1,\"93\":3,\"94\":2,\"100\":2}}],[\"2e\",{\"1\":{\"77\":6}}],[\"2e3000\",{\"1\":{\"20\":1}}],[\"2e322e30\",{\"1\":{\"20\":1}}],[\"2774\",{\"1\":{\"89\":6}}],[\"27\",{\"1\":{\"67\":1,\"77\":1,\"83\":1}}],[\"2c\",{\"1\":{\"52\":2}}],[\"26\",{\"1\":{\"49\":1,\"67\":2}}],[\"255\",{\"1\":{\"100\":2}}],[\"256\",{\"1\":{\"94\":2}}],[\"25640a00\",{\"1\":{\"20\":1}}],[\"25\",{\"1\":{\"49\":1,\"52\":2,\"53\":3,\"67\":1,\"77\":3,\"80\":1}}],[\"24\",{\"1\":{\"49\":1,\"52\":5,\"53\":5,\"67\":1,\"83\":3,\"85\":1,\"98\":1}}],[\"240\",{\"1\":{\"19\":1}}],[\"22\",{\"1\":{\"49\":1,\"67\":1,\"77\":1,\"85\":1}}],[\"224\",{\"1\":{\"19\":1}}],[\"212857\",{\"1\":{\"154\":1}}],[\"21\",{\"1\":{\"49\":1,\"67\":1}}],[\"200\",{\"1\":{\"181\":2}}],[\"2005\",{\"1\":{\"150\":13,\"181\":2}}],[\"2005年9月1日\",{\"1\":{\"150\":1}}],[\"20009\",{\"1\":{\"181\":1,\"182\":2}}],[\"20008\",{\"1\":{\"165\":2,\"182\":2}}],[\"20007\",{\"1\":{\"150\":2,\"165\":2,\"168\":2,\"182\":2}}],[\"20006\",{\"1\":{\"150\":2,\"165\":2,\"182\":2}}],[\"20005\",{\"1\":{\"146\":2,\"150\":3,\"158\":2,\"165\":2,\"168\":2,\"176\":1,\"181\":1,\"182\":2}}],[\"2000\",{\"1\":{\"98\":1,\"102\":1,\"103\":1,\"104\":2,\"106\":1,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"113\":2,\"118\":1,\"127\":2,\"130\":1,\"135\":1,\"136\":2,\"141\":1,\"164\":2,\"173\":1,\"174\":6,\"175\":2}}],[\"2025\",{\"1\":{\"98\":1}}],[\"20\",{\"1\":{\"49\":1,\"67\":2}}],[\"2f6c6962\",{\"1\":{\"82\":1}}],[\"2f\",{\"1\":{\"20\":1,\"53\":2,\"77\":3,\"80\":1}}],[\"2b\",{\"1\":{\"20\":1,\"52\":2,\"53\":1}}],[\"2b000000\",{\"1\":{\"20\":1}}],[\"29\",{\"1\":{\"20\":1,\"77\":1,\"146\":1}}],[\"28\",{\"1\":{\"20\":2,\"52\":2,\"53\":3,\"67\":1}}],[\"23\",{\"1\":{\"20\":1,\"49\":1,\"67\":1,\"85\":1,\"135\":1}}],[\"23ubuntu4\",{\"1\":{\"20\":1}}],[\"2d323375\",{\"1\":{\"20\":1}}],[\"2a\",{\"1\":{\"14\":1,\"20\":1}}],[\"2\",{\"0\":{\"8\":1,\"11\":1,\"12\":1,\"13\":2,\"14\":1,\"15\":1,\"18\":1,\"21\":1,\"26\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":2,\"32\":1,\"38\":1,\"40\":1,\"49\":1,\"51\":1,\"52\":1,\"54\":2,\"55\":1,\"56\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":2,\"68\":1,\"73\":1,\"76\":1,\"83\":1,\"89\":1,\"93\":1,\"99\":1,\"102\":1,\"103\":2,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"111\":1,\"116\":1,\"117\":1,\"118\":2,\"119\":1,\"120\":1,\"124\":1,\"126\":1,\"131\":1,\"132\":1,\"136\":1,\"146\":1,\"150\":1,\"155\":1,\"159\":1,\"163\":1,\"169\":1,\"173\":1,\"174\":1,\"175\":2,\"176\":1,\"179\":1,\"180\":1,\"181\":2,\"182\":1,\"187\":1,\"188\":1,\"189\":2,\"190\":1,\"191\":1},\"1\":{\"7\":3,\"17\":4,\"19\":11,\"20\":2,\"22\":1,\"25\":1,\"28\":1,\"39\":1,\"43\":2,\"49\":51,\"55\":1,\"67\":1,\"73\":7,\"77\":2,\"80\":12,\"82\":2,\"83\":1,\"84\":7,\"85\":4,\"89\":7,\"102\":1,\"103\":3,\"104\":4,\"106\":1,\"107\":2,\"110\":1,\"111\":3,\"112\":6,\"115\":4,\"117\":4,\"118\":1,\"120\":1,\"123\":2,\"124\":2,\"125\":2,\"126\":2,\"127\":2,\"130\":2,\"131\":3,\"135\":1,\"136\":1,\"137\":2,\"138\":1,\"141\":2,\"142\":1,\"157\":1,\"160\":1,\"163\":4,\"164\":12,\"168\":6,\"169\":2,\"173\":3,\"174\":18,\"175\":6,\"178\":1,\"181\":1,\"183\":1,\"188\":4,\"190\":2,\"191\":2}}],[\"展开所有宏定义\",{\"1\":{\"7\":1}}],[\"编译时打桩\",{\"0\":{\"92\":1}}],[\"编译器会产生这样的代码\",{\"1\":{\"78\":1}}],[\"编译器还不知道foobar\",{\"1\":{\"73\":1}}],[\"编译\",{\"0\":{\"8\":1},\"1\":{\"6\":1}}],[\"编译和链接\",{\"0\":{\"5\":1}}],[\"预处理\",{\"0\":{\"7\":1},\"1\":{\"6\":1}}],[\"outer\",{\"1\":{\"182\":3}}],[\"ours\",{\"1\":{\"139\":1,\"144\":2,\"145\":1,\"149\":2,\"174\":14}}],[\"oi\",{\"1\":{\"178\":2,\"181\":5}}],[\"oil\",{\"1\":{\"102\":1,\"103\":1,\"104\":2,\"106\":1,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"117\":2,\"118\":1,\"119\":2,\"124\":1,\"126\":1,\"164\":2,\"173\":1,\"174\":6,\"175\":2}}],[\"oh\",{\"1\":{\"169\":1}}],[\"od\",{\"1\":{\"127\":1}}],[\"ol1\",{\"1\":{\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"124\":1,\"164\":1,\"188\":2,\"190\":1,\"191\":1}}],[\"owners\",{\"1\":{\"98\":1}}],[\"ord\",{\"1\":{\"183\":2}}],[\"ordertotal\",{\"1\":{\"165\":5}}],[\"ordered\",{\"1\":{\"158\":2}}],[\"orders表不存储客户信息\",{\"1\":{\"168\":1}}],[\"orders表存储一行\",{\"1\":{\"168\":1}}],[\"orders表包含收到的所有订单\",{\"1\":{\"146\":1}}],[\"orders\",{\"1\":{\"100\":1,\"150\":3,\"164\":3,\"168\":3,\"169\":7,\"178\":1,\"181\":1,\"182\":6,\"183\":3}}],[\"orderitems表包含每个订单中的各项物品\",{\"1\":{\"146\":1}}],[\"orderitems\",{\"1\":{\"100\":1,\"146\":2,\"158\":2,\"165\":2,\"168\":3,\"176\":2,\"178\":1,\"181\":1}}],[\"order\",{\"1\":{\"28\":1,\"67\":1,\"110\":2,\"111\":1,\"112\":2,\"113\":2,\"117\":1,\"126\":1,\"127\":2,\"135\":2,\"136\":1,\"137\":2,\"138\":1,\"139\":2,\"141\":2,\"142\":1,\"144\":2,\"145\":1,\"146\":2,\"149\":1,\"150\":20,\"158\":2,\"163\":1,\"165\":8,\"166\":1,\"168\":7,\"169\":1,\"173\":1,\"174\":1,\"176\":1,\"178\":2,\"181\":6,\"182\":4,\"183\":1,\"191\":1}}],[\"or操作符\",{\"0\":{\"124\":1}}],[\"oracle\",{\"1\":{\"98\":3}}],[\"or\",{\"1\":{\"98\":4,\"124\":1,\"125\":2}}],[\"option中的每个逗号都要替换为一个空格\",{\"1\":{\"93\":1}}],[\"option选项表示把option传递给链接器\",{\"1\":{\"93\":1}}],[\"o链接成可执行文件时\",{\"1\":{\"73\":1}}],[\"o链接到一起\",{\"1\":{\"73\":1}}],[\"o时\",{\"1\":{\"73\":1}}],[\"o没有被链接起来\",{\"1\":{\"73\":1}}],[\"o和lib\",{\"1\":{\"73\":1}}],[\"o被链接成可执行文件这一步\",{\"1\":{\"73\":1}}],[\"o之后\",{\"1\":{\"73\":1}}],[\"one\",{\"1\":{\"104\":1,\"164\":1}}],[\"on\",{\"1\":{\"68\":1,\"86\":2,\"98\":1,\"175\":1,\"182\":2,\"183\":1}}],[\"only\",{\"1\":{\"55\":1,\"86\":1,\"104\":1,\"164\":1}}],[\"overlay\",{\"1\":{\"61\":1}}],[\"obstack\",{\"1\":{\"58\":6}}],[\"objdump\",{\"1\":{\"19\":1,\"20\":1,\"49\":3,\"52\":1,\"53\":1,\"58\":1,\"82\":1}}],[\"object\",{\"1\":{\"17\":1,\"22\":4,\"25\":2,\"39\":4,\"73\":1,\"77\":1}}],[\"o的符号表\",{\"1\":{\"55\":1}}],[\"o2\",{\"1\":{\"46\":1}}],[\"o中所有要重定位的地方\",{\"1\":{\"54\":1}}],[\"o中的foobar\",{\"1\":{\"73\":1}}],[\"o中的\",{\"1\":{\"39\":2}}],[\"o中有一个叫做\",{\"1\":{\"33\":1}}],[\"o共有10个有效段\",{\"1\":{\"28\":1}}],[\"other\",{\"1\":{\"25\":1,\"36\":1,\"98\":1}}],[\"os\",{\"1\":{\"25\":1,\"28\":2,\"67\":2}}],[\"of\",{\"1\":{\"20\":7,\"25\":7,\"52\":1,\"53\":1,\"55\":1,\"57\":1,\"77\":1,\"82\":1,\"86\":1,\"98\":2,\"104\":1,\"164\":1}}],[\"offset\",{\"1\":{\"19\":1,\"25\":2,\"28\":2,\"29\":2,\"54\":8,\"56\":3,\"67\":6,\"73\":2,\"77\":5,\"83\":1,\"85\":4,\"106\":2,\"113\":1}}],[\"off\",{\"1\":{\"19\":1,\"25\":2,\"29\":1,\"49\":3,\"67\":1}}],[\"o文件的static\",{\"1\":{\"35\":1}}],[\"o文件\",{\"1\":{\"17\":1}}],[\"o后缀的文件\",{\"1\":{\"15\":1}}],[\"o\",{\"0\":{\"19\":1},\"1\":{\"6\":1,\"7\":1,\"8\":1,\"9\":5,\"17\":2,\"19\":4,\"20\":2,\"22\":1,\"25\":1,\"28\":3,\"35\":1,\"39\":1,\"42\":1,\"44\":2,\"49\":4,\"50\":3,\"52\":2,\"54\":4,\"55\":3,\"57\":2,\"58\":2,\"67\":4,\"73\":4,\"77\":2,\"82\":1,\"84\":1,\"89\":5,\"92\":2,\"93\":3,\"94\":2,\"178\":3,\"181\":5}}],[\"0个或1个匹配\",{\"1\":{\"141\":1}}],[\"0个或多个匹配\",{\"1\":{\"141\":1}}],[\"0到31和127\",{\"1\":{\"140\":1}}],[\"0ubuntu0\",{\"1\":{\"98\":1}}],[\"09\",{\"1\":{\"67\":1,\"73\":1,\"77\":2,\"123\":1,\"141\":1,\"150\":14,\"162\":1,\"178\":1,\"181\":1}}],[\"0328\",{\"1\":{\"82\":1}}],[\"0318\",{\"1\":{\"82\":1}}],[\"03\",{\"1\":{\"67\":1,\"73\":1,\"77\":1,\"89\":36,\"118\":1,\"163\":2,\"164\":1,\"169\":1,\"181\":1}}],[\"03000000\",{\"1\":{\"20\":1}}],[\"07\",{\"1\":{\"52\":1,\"53\":1,\"67\":1,\"73\":1,\"103\":1,\"144\":1,\"150\":1}}],[\"08\",{\"1\":{\"52\":2,\"53\":3,\"67\":1,\"68\":5,\"73\":21,\"77\":6,\"112\":1,\"115\":1,\"117\":1,\"130\":1,\"138\":1,\"164\":1,\"168\":1,\"181\":1}}],[\"08000000\",{\"1\":{\"20\":2}}],[\"04\",{\"1\":{\"52\":4,\"53\":5,\"67\":1,\"73\":1,\"98\":1,\"112\":1,\"120\":1,\"145\":1,\"146\":1,\"150\":1}}],[\"04000000\",{\"1\":{\"20\":2}}],[\"02\",{\"1\":{\"25\":1,\"67\":1,\"73\":1,\"77\":2,\"160\":1,\"165\":1,\"168\":2,\"188\":1}}],[\"020000c0\",{\"1\":{\"20\":1}}],[\"0f\",{\"1\":{\"20\":2,\"52\":1,\"53\":4,\"77\":10,\"80\":2}}],[\"0f1efa55\",{\"1\":{\"20\":1}}],[\"06是2006年5月4日或2006年4月5日或2004年5月6日或\",{\"1\":{\"150\":1}}],[\"06\",{\"1\":{\"67\":1,\"73\":1,\"105\":1,\"106\":1,\"142\":1,\"150\":1,\"154\":1,\"173\":1,\"183\":1,\"190\":1}}],[\"06700c07\",{\"1\":{\"20\":1}}],[\"06620c07\",{\"1\":{\"20\":1}}],[\"0123456789\",{\"1\":{\"138\":1}}],[\"01edd000\",{\"1\":{\"68\":1}}],[\"01ebb000\",{\"1\":{\"68\":1}}],[\"01\",{\"1\":{\"20\":4,\"25\":2,\"53\":2,\"67\":1,\"73\":1,\"77\":3,\"102\":1,\"105\":1,\"111\":1,\"119\":1,\"127\":2,\"131\":1,\"137\":1,\"139\":1,\"149\":3,\"150\":10,\"154\":1,\"164\":1,\"168\":2,\"169\":1,\"174\":1,\"181\":1}}],[\"01781001\",{\"1\":{\"20\":1}}],[\"017a5200\",{\"1\":{\"20\":1}}],[\"01d089c7\",{\"1\":{\"20\":1}}],[\"0x563142b312a0\",{\"1\":{\"94\":2}}],[\"0x560a72b382a0\",{\"1\":{\"92\":1}}],[\"0x5590c014a2a0\",{\"1\":{\"93\":2}}],[\"0x550\",{\"1\":{\"83\":1}}],[\"0x510\",{\"1\":{\"85\":1}}],[\"0x50e\",{\"1\":{\"83\":1}}],[\"0x520\",{\"1\":{\"83\":1}}],[\"0x610\",{\"1\":{\"83\":1}}],[\"0x3fb8\",{\"1\":{\"83\":1}}],[\"0x3fc0\",{\"1\":{\"77\":1}}],[\"0x3b0\",{\"1\":{\"83\":1}}],[\"0x3d8\",{\"1\":{\"83\":1}}],[\"0x3dc0\",{\"1\":{\"83\":1}}],[\"0x3db8\",{\"1\":{\"83\":1}}],[\"0x3548\",{\"1\":{\"77\":1}}],[\"0x390\",{\"1\":{\"29\":1}}],[\"0xbf510\",{\"1\":{\"67\":1}}],[\"0x2dc8\",{\"1\":{\"83\":1}}],[\"0x2e96\",{\"1\":{\"77\":1}}],[\"0x2ef1\",{\"1\":{\"77\":1}}],[\"0x2e72\",{\"1\":{\"77\":4}}],[\"0x2ed5\",{\"1\":{\"77\":3}}],[\"0x2f8e\",{\"1\":{\"77\":1,\"80\":1}}],[\"0x2f96\",{\"1\":{\"77\":2}}],[\"0x2fa1\",{\"1\":{\"53\":3}}],[\"0x230\",{\"1\":{\"54\":1}}],[\"0x28\",{\"1\":{\"52\":2,\"53\":3}}],[\"0x2a\",{\"1\":{\"14\":1}}],[\"0x74\",{\"1\":{\"29\":1}}],[\"0x1168\",{\"1\":{\"83\":1}}],[\"0x114e\",{\"1\":{\"77\":1}}],[\"0x1147\",{\"1\":{\"77\":1}}],[\"0x11a0\",{\"1\":{\"53\":1}}],[\"0x1e8\",{\"1\":{\"54\":1}}],[\"0x1064代码处调用\",{\"1\":{\"77\":1}}],[\"0x106f\",{\"1\":{\"53\":1}}],[\"0x10\",{\"1\":{\"67\":1,\"73\":1}}],[\"0x10003fc0\",{\"1\":{\"77\":1}}],[\"0x1000401c\",{\"1\":{\"77\":1}}],[\"0x10000000\",{\"1\":{\"77\":1}}],[\"0x1000\",{\"1\":{\"67\":4,\"73\":4,\"83\":1}}],[\"0x1091\",{\"1\":{\"53\":1}}],[\"0x1\",{\"1\":{\"25\":1,\"67\":1,\"73\":1,\"80\":1}}],[\"0x8\",{\"1\":{\"20\":2,\"52\":2,\"53\":3,\"67\":3,\"73\":3}}],[\"0x468\",{\"1\":{\"85\":1}}],[\"0x480\",{\"1\":{\"83\":1}}],[\"0x458\",{\"1\":{\"77\":1}}],[\"0x401720\",{\"1\":{\"67\":1}}],[\"0x4010\",{\"1\":{\"53\":1}}],[\"0x408\",{\"1\":{\"28\":1,\"29\":1}}],[\"0x4\",{\"1\":{\"20\":3,\"52\":2,\"53\":2,\"67\":1,\"73\":2}}],[\"0x00007f83a7b7b000\",{\"1\":{\"89\":1}}],[\"0x00007f83a7b6f000\",{\"1\":{\"89\":1}}],[\"0x00007f83a793d000\",{\"1\":{\"89\":1}}],[\"0x00007f0682441000\",{\"1\":{\"89\":1}}],[\"0x00007f0682435000\",{\"1\":{\"89\":1}}],[\"0x00007f0682203000\",{\"1\":{\"89\":1}}],[\"0x00007ffc144a5000\",{\"1\":{\"89\":1}}],[\"0x00007ffd801db000\",{\"1\":{\"89\":1}}],[\"0x00007ffe6d77b000\",{\"1\":{\"83\":1}}],[\"0x00007f796754d000\",{\"1\":{\"83\":1}}],[\"0x00007f7967314000\",{\"1\":{\"83\":1}}],[\"0x000000006ffffff9\",{\"1\":{\"83\":1}}],[\"0x000000006ffffff0\",{\"1\":{\"83\":1}}],[\"0x000000006fffffff\",{\"1\":{\"83\":1}}],[\"0x000000006ffffffe\",{\"1\":{\"83\":1}}],[\"0x000000006ffffffb\",{\"1\":{\"83\":1}}],[\"0x000000006ffffef5\",{\"1\":{\"83\":1}}],[\"0x00000000004a5f50\",{\"1\":{\"67\":6}}],[\"0x000000000047f000\",{\"1\":{\"67\":2}}],[\"0x00000000004002a0\",{\"1\":{\"67\":2}}],[\"0x0000000000400270\",{\"1\":{\"67\":4}}],[\"0x0000000000400000\",{\"1\":{\"67\":2}}],[\"0x0000000000401000\",{\"1\":{\"67\":2}}],[\"0x00000000000a4f50\",{\"1\":{\"67\":3}}],[\"0x00000000000259ec\",{\"1\":{\"67\":2}}],[\"0x000000000007f000\",{\"1\":{\"67\":1}}],[\"0x000000000007d6b1\",{\"1\":{\"67\":2}}],[\"0x0000000000004000\",{\"1\":{\"85\":1}}],[\"0x00000000000040b0\",{\"1\":{\"67\":2}}],[\"0x0000000000003e08\",{\"1\":{\"73\":2}}],[\"0x0000000000003df8\",{\"1\":{\"73\":4}}],[\"0x000000000000201c\",{\"1\":{\"73\":3}}],[\"0x0000000000002000\",{\"1\":{\"73\":3}}],[\"0x0000000000002e08\",{\"1\":{\"73\":1}}],[\"0x0000000000002df8\",{\"1\":{\"73\":2}}],[\"0x000000000000b2f8\",{\"1\":{\"67\":1}}],[\"0x0000000000005b78\",{\"1\":{\"67\":1}}],[\"0x0000000000001000\",{\"1\":{\"67\":1,\"73\":3}}],[\"0x00000000000001c0\",{\"1\":{\"73\":2}}],[\"0x000000000000017d\",{\"1\":{\"73\":2}}],[\"0x0000000000000560\",{\"1\":{\"73\":2}}],[\"0x0000000000000208\",{\"1\":{\"73\":2}}],[\"0x00000000000002c8\",{\"1\":{\"73\":3}}],[\"0x00000000000002a8\",{\"1\":{\"73\":6}}],[\"0x00000000000002a0\",{\"1\":{\"67\":1}}],[\"0x0000000000000228\",{\"1\":{\"73\":1}}],[\"0x0000000000000220\",{\"1\":{\"73\":1}}],[\"0x0000000000000270\",{\"1\":{\"67\":2}}],[\"0x000000000000001e\",{\"1\":{\"83\":1}}],[\"0x0000000000000017\",{\"1\":{\"83\":1}}],[\"0x0000000000000014\",{\"1\":{\"83\":1}}],[\"0x0000000000000015\",{\"1\":{\"83\":1}}],[\"0x000000000000001c\",{\"1\":{\"83\":1}}],[\"0x000000000000001a\",{\"1\":{\"83\":1}}],[\"0x000000000000001b\",{\"1\":{\"83\":1}}],[\"0x0000000000000019\",{\"1\":{\"83\":1}}],[\"0x0000000000000018\",{\"1\":{\"67\":1}}],[\"0x000000000000002c\",{\"1\":{\"73\":2}}],[\"0x0000000000000024\",{\"1\":{\"73\":2}}],[\"0x0000000000000020\",{\"1\":{\"73\":4}}],[\"0x00000000000000dc\",{\"1\":{\"73\":2}}],[\"0x0000000000000058\",{\"1\":{\"67\":1}}],[\"0x0000000000000044\",{\"1\":{\"67\":2}}],[\"0x0000000000000030\",{\"1\":{\"67\":4}}],[\"0x0000000000000009\",{\"1\":{\"83\":1}}],[\"0x0000000000000008\",{\"1\":{\"83\":1}}],[\"0x0000000000000007\",{\"1\":{\"83\":1}}],[\"0x0000000000000002\",{\"1\":{\"83\":1}}],[\"0x0000000000000003\",{\"1\":{\"83\":1}}],[\"0x000000000000000b\",{\"1\":{\"83\":1}}],[\"0x000000000000000a\",{\"1\":{\"83\":1}}],[\"0x0000000000000006\",{\"1\":{\"83\":1}}],[\"0x0000000000000005\",{\"1\":{\"83\":1}}],[\"0x000000000000000d\",{\"1\":{\"83\":1}}],[\"0x000000000000000c\",{\"1\":{\"83\":1}}],[\"0x0000000000000001\",{\"1\":{\"83\":1}}],[\"0x0000000000000000\",{\"1\":{\"67\":6,\"73\":8,\"83\":1}}],[\"0x0000000000000004\",{\"1\":{\"54\":3}}],[\"0x00000000000004f8\",{\"1\":{\"67\":2}}],[\"0x04\",{\"1\":{\"54\":1}}],[\"0x04正好是段表在elf文件中的偏移\",{\"1\":{\"29\":1}}],[\"0x010f\",{\"1\":{\"53\":1}}],[\"0x0\",{\"1\":{\"14\":1,\"20\":3,\"25\":2,\"52\":2,\"73\":1,\"77\":3,\"80\":1,\"83\":2}}],[\"00219000\",{\"1\":{\"89\":1}}],[\"00215000\",{\"1\":{\"89\":2}}],[\"00202000\",{\"1\":{\"73\":1}}],[\"0020\",{\"1\":{\"20\":3}}],[\"001bd000\",{\"1\":{\"89\":1}}],[\"001b0000\",{\"1\":{\"73\":1}}],[\"001fe000\",{\"1\":{\"73\":1}}],[\"0010\",{\"1\":{\"20\":4}}],[\"000\",{\"1\":{\"135\":2}}],[\"000500000006\",{\"1\":{\"85\":1}}],[\"000500000004\",{\"1\":{\"54\":1}}],[\"000400000006\",{\"1\":{\"85\":1}}],[\"000400000002\",{\"1\":{\"54\":1}}],[\"000100000006\",{\"1\":{\"85\":1}}],[\"00039000\",{\"1\":{\"89\":1}}],[\"00037000\",{\"1\":{\"89\":1}}],[\"000300000006\",{\"1\":{\"85\":1}}],[\"00038000\",{\"1\":{\"73\":1}}],[\"00036000\",{\"1\":{\"73\":1}}],[\"000200000007\",{\"1\":{\"85\":1}}],[\"000200000006\",{\"1\":{\"77\":1}}],[\"000200000002\",{\"1\":{\"54\":1}}],[\"0002c000\",{\"1\":{\"73\":1,\"89\":1}}],[\"00028000\",{\"1\":{\"73\":1,\"89\":1}}],[\"000bf3ff\",{\"1\":{\"67\":1}}],[\"000b7ca0\",{\"1\":{\"67\":1}}],[\"000a9000\",{\"1\":{\"68\":1}}],[\"000a90c0\",{\"1\":{\"67\":1}}],[\"000ac090\",{\"1\":{\"67\":1}}],[\"000aaaf0\",{\"1\":{\"67\":1}}],[\"000aaac8\",{\"1\":{\"67\":2}}],[\"000a8fe8\",{\"1\":{\"67\":1}}],[\"000a8f48\",{\"1\":{\"67\":1}}],[\"000a4000\",{\"1\":{\"68\":1}}],[\"000a4f80\",{\"1\":{\"67\":1}}],[\"000a4f70\",{\"1\":{\"67\":1}}],[\"000a4f68\",{\"1\":{\"67\":2}}],[\"000a4f50\",{\"1\":{\"67\":1}}],[\"000a4910\",{\"1\":{\"67\":1}}],[\"0009b220\",{\"1\":{\"67\":1}}],[\"0009b1c0\",{\"1\":{\"67\":1}}],[\"0009b1a4\",{\"1\":{\"67\":1}}],[\"0007f000\",{\"1\":{\"67\":1,\"68\":1}}],[\"0007e6a4\",{\"1\":{\"67\":1}}],[\"000600000004\",{\"1\":{\"54\":1}}],[\"00003020\",{\"1\":{\"85\":1}}],[\"00003014\",{\"1\":{\"49\":2}}],[\"00003000\",{\"1\":{\"49\":1,\"73\":2,\"85\":1,\"89\":5}}],[\"00002fe0\",{\"1\":{\"85\":1}}],[\"00002fc0\",{\"1\":{\"77\":1}}],[\"00002fb8\",{\"1\":{\"49\":1}}],[\"00002dc8\",{\"1\":{\"49\":1}}],[\"00002dc0\",{\"1\":{\"49\":1}}],[\"00002db8\",{\"1\":{\"49\":1}}],[\"00002040\",{\"1\":{\"49\":1}}],[\"00002004\",{\"1\":{\"49\":1}}],[\"00002000\",{\"1\":{\"49\":1,\"73\":4,\"89\":11}}],[\"00001180\",{\"1\":{\"67\":1}}],[\"000011f0\",{\"1\":{\"49\":1}}],[\"00001060\",{\"1\":{\"49\":1}}],[\"00001050\",{\"1\":{\"49\":1}}],[\"00001040\",{\"1\":{\"49\":1}}],[\"00001020\",{\"1\":{\"49\":1,\"67\":1}}],[\"00001000\",{\"1\":{\"49\":1,\"67\":1,\"68\":1,\"73\":3,\"89\":5}}],[\"0000c9c3\",{\"1\":{\"20\":1}}],[\"00000638\",{\"1\":{\"49\":1}}],[\"00000578\",{\"1\":{\"49\":1}}],[\"00000538\",{\"1\":{\"49\":1}}],[\"00000524\",{\"1\":{\"49\":1}}],[\"00000480\",{\"1\":{\"49\":1}}],[\"000003d8\",{\"1\":{\"49\":1}}],[\"000003b0\",{\"1\":{\"49\":1}}],[\"0000038c\",{\"1\":{\"49\":1}}],[\"00000368\",{\"1\":{\"49\":1}}],[\"00000360\",{\"1\":{\"28\":1}}],[\"00000338\",{\"1\":{\"49\":1}}],[\"00000318\",{\"1\":{\"49\":1}}],[\"00000390\",{\"1\":{\"28\":1}}],[\"000002c4\",{\"1\":{\"67\":1}}],[\"000002a0\",{\"1\":{\"67\":1}}],[\"00000270\",{\"1\":{\"67\":1}}],[\"00000288\",{\"1\":{\"28\":1}}],[\"000002e8\",{\"1\":{\"28\":1,\"67\":1}}],[\"000001f0\",{\"1\":{\"49\":1}}],[\"00000190\",{\"1\":{\"49\":1}}],[\"00000150\",{\"1\":{\"28\":1}}],[\"000001c2\",{\"1\":{\"20\":1}}],[\"000000cc\",{\"1\":{\"49\":1}}],[\"000000c0\",{\"1\":{\"49\":3}}],[\"00000014\",{\"1\":{\"49\":1}}],[\"00000010\",{\"1\":{\"49\":2}}],[\"0000001b\",{\"1\":{\"49\":1}}],[\"00000018\",{\"1\":{\"49\":1}}],[\"0000001c\",{\"1\":{\"49\":1}}],[\"0000003c\",{\"1\":{\"49\":1}}],[\"00000030\",{\"1\":{\"49\":1}}],[\"00000038\",{\"1\":{\"49\":2}}],[\"00000094\",{\"1\":{\"49\":2}}],[\"00000090\",{\"1\":{\"49\":1}}],[\"00000098\",{\"1\":{\"49\":3}}],[\"000000e0\",{\"1\":{\"49\":2}}],[\"000000e8\",{\"1\":{\"20\":1}}],[\"000000bb\",{\"1\":{\"49\":1}}],[\"000000bf\",{\"1\":{\"49\":1}}],[\"000000b0\",{\"1\":{\"19\":1,\"28\":1}}],[\"0000004f\",{\"1\":{\"49\":1}}],[\"00000048\",{\"1\":{\"20\":1,\"49\":1}}],[\"00000040\",{\"1\":{\"19\":1,\"28\":1,\"49\":3}}],[\"000000f8\",{\"1\":{\"19\":1,\"28\":1}}],[\"00000058\",{\"1\":{\"19\":1,\"49\":1}}],[\"000000d8\",{\"1\":{\"19\":1,\"28\":1}}],[\"000000d7\",{\"1\":{\"19\":1,\"28\":1}}],[\"00000026\",{\"1\":{\"49\":1}}],[\"00000024\",{\"1\":{\"49\":2}}],[\"00000020\",{\"1\":{\"19\":1,\"49\":4}}],[\"00000027\",{\"1\":{\"19\":1,\"49\":2}}],[\"000000a3\",{\"1\":{\"49\":1}}],[\"000000a8\",{\"1\":{\"49\":1}}],[\"000000ac\",{\"1\":{\"19\":2,\"28\":2}}],[\"000000a4\",{\"1\":{\"19\":1,\"28\":1}}],[\"0000000d\",{\"1\":{\"49\":1}}],[\"0000000e\",{\"1\":{\"49\":1}}],[\"000000004018\",{\"1\":{\"85\":2}}],[\"000000004020\",{\"1\":{\"85\":1}}],[\"000000003ff8\",{\"1\":{\"85\":1}}],[\"000000003ff0\",{\"1\":{\"85\":1}}],[\"000000003fe8\",{\"1\":{\"85\":1}}],[\"000000003fe0\",{\"1\":{\"85\":1}}],[\"000000003fc0\",{\"1\":{\"77\":1}}],[\"000000003e18\",{\"1\":{\"85\":1}}],[\"000000003e10\",{\"1\":{\"85\":1}}],[\"00000000004abae0\",{\"1\":{\"67\":1}}],[\"00000000004aa0c0\",{\"1\":{\"67\":1}}],[\"00000000004a9fe8\",{\"1\":{\"67\":1}}],[\"00000000004a9f48\",{\"1\":{\"67\":1}}],[\"00000000004a5f80\",{\"1\":{\"67\":1}}],[\"00000000004a5f70\",{\"1\":{\"67\":1}}],[\"00000000004a5f68\",{\"1\":{\"67\":2}}],[\"00000000004a5f50\",{\"1\":{\"67\":1}}],[\"00000000004a4910\",{\"1\":{\"67\":1}}],[\"000000000047f000\",{\"1\":{\"67\":1}}],[\"000000000047e6a4\",{\"1\":{\"67\":1}}],[\"0000000000401180\",{\"1\":{\"67\":1}}],[\"0000000000401020\",{\"1\":{\"67\":1}}],[\"0000000000401000\",{\"1\":{\"67\":1}}],[\"00000000004002e8\",{\"1\":{\"67\":1}}],[\"00000000004002c4\",{\"1\":{\"67\":1}}],[\"00000000004002a0\",{\"1\":{\"67\":1}}],[\"0000000000400270\",{\"1\":{\"67\":1}}],[\"000000000049b220\",{\"1\":{\"67\":1}}],[\"000000000049b1c0\",{\"1\":{\"67\":1}}],[\"000000000049b1a4\",{\"1\":{\"67\":1}}],[\"000000000049\",{\"1\":{\"54\":1}}],[\"000000000020\",{\"1\":{\"54\":1}}],[\"00000000002d\",{\"1\":{\"54\":1}}],[\"000000000008\",{\"1\":{\"85\":3}}],[\"000000000001c1a4\",{\"1\":{\"67\":1}}],[\"000000000007d521\",{\"1\":{\"67\":1}}],[\"00000000000b\",{\"1\":{\"54\":1}}],[\"000000000000775f\",{\"1\":{\"67\":1}}],[\"000000000000bc10\",{\"1\":{\"67\":1}}],[\"0000000000005768\",{\"1\":{\"67\":1}}],[\"00000000000096f0\",{\"1\":{\"67\":1}}],[\"0000000000004020\",{\"1\":{\"85\":1}}],[\"000000000000401c\",{\"1\":{\"77\":1}}],[\"0000000000004014\",{\"1\":{\"49\":2}}],[\"0000000000004000\",{\"1\":{\"49\":2,\"85\":1}}],[\"0000000000003fe0\",{\"1\":{\"85\":1}}],[\"0000000000003fc0\",{\"1\":{\"77\":1}}],[\"0000000000003fc8\",{\"1\":{\"67\":1}}],[\"0000000000003fb8\",{\"1\":{\"49\":2}}],[\"0000000000003dc8\",{\"1\":{\"49\":2}}],[\"0000000000003dc0\",{\"1\":{\"49\":2}}],[\"0000000000003db8\",{\"1\":{\"49\":2}}],[\"0000000000002040\",{\"1\":{\"49\":2}}],[\"0000000000002004\",{\"1\":{\"49\":2}}],[\"0000000000002000\",{\"1\":{\"49\":2}}],[\"0000000000001131\",{\"1\":{\"77\":1}}],[\"0000000000001139\",{\"1\":{\"77\":1}}],[\"0000000000001119\",{\"1\":{\"77\":1,\"84\":1}}],[\"0000000000001155\",{\"1\":{\"77\":2}}],[\"00000000000011f0\",{\"1\":{\"49\":2}}],[\"00000000000015a0\",{\"1\":{\"67\":1}}],[\"0000000000001a08\",{\"1\":{\"67\":1}}],[\"0000000000001070\",{\"1\":{\"77\":1,\"80\":1}}],[\"0000000000001060\",{\"1\":{\"49\":2,\"53\":1,\"77\":2}}],[\"0000000000001050\",{\"1\":{\"49\":2}}],[\"0000000000001040\",{\"1\":{\"49\":2}}],[\"0000000000001020\",{\"1\":{\"49\":2}}],[\"0000000000001000\",{\"1\":{\"49\":2}}],[\"0000000000000210\",{\"1\":{\"67\":1}}],[\"000000000000010c\",{\"1\":{\"67\":1}}],[\"00000000000001c4\",{\"1\":{\"58\":2}}],[\"00000000000001c9\",{\"1\":{\"58\":1}}],[\"0000000000000160\",{\"1\":{\"58\":1,\"67\":1}}],[\"0000000000000138\",{\"1\":{\"28\":1}}],[\"0000000000000638\",{\"1\":{\"49\":2}}],[\"0000000000000578\",{\"1\":{\"49\":2}}],[\"0000000000000538\",{\"1\":{\"49\":2}}],[\"0000000000000524\",{\"1\":{\"49\":2}}],[\"0000000000000480\",{\"1\":{\"49\":2}}],[\"0000000000000330\",{\"1\":{\"58\":2}}],[\"0000000000000338\",{\"1\":{\"49\":2}}],[\"00000000000003d8\",{\"1\":{\"49\":2}}],[\"00000000000003b0\",{\"1\":{\"49\":2}}],[\"000000000000038c\",{\"1\":{\"49\":2}}],[\"0000000000000368\",{\"1\":{\"49\":2}}],[\"0000000000000318\",{\"1\":{\"49\":2}}],[\"00000000000000c8\",{\"1\":{\"67\":1}}],[\"0000000000000090\",{\"1\":{\"67\":1}}],[\"0000000000000040\",{\"1\":{\"67\":1}}],[\"0000000000000049\",{\"1\":{\"54\":1}}],[\"00000000000000dc\",{\"1\":{\"67\":1}}],[\"0000000000000010\",{\"1\":{\"67\":1}}],[\"000000000000001b\",{\"1\":{\"67\":1}}],[\"000000000000001c\",{\"1\":{\"58\":1}}],[\"0000000000000019\",{\"1\":{\"58\":2}}],[\"0000000000000018\",{\"1\":{\"28\":3,\"58\":2,\"67\":3}}],[\"0000000000000074\",{\"1\":{\"28\":1}}],[\"0000000000000078\",{\"1\":{\"28\":1}}],[\"0000000000000060\",{\"1\":{\"28\":1,\"67\":1}}],[\"0000000000000064\",{\"1\":{\"28\":1}}],[\"0000000000000030\",{\"1\":{\"28\":1,\"67\":1}}],[\"0000000000000058\",{\"1\":{\"28\":1}}],[\"0000000000000028\",{\"1\":{\"77\":1}}],[\"0000000000000026\",{\"1\":{\"67\":1}}],[\"0000000000000024\",{\"1\":{\"67\":1}}],[\"000000000000002d\",{\"1\":{\"54\":1}}],[\"0000000000000020\",{\"1\":{\"28\":1,\"54\":1,\"67\":2,\"85\":2}}],[\"0000000000000027\",{\"1\":{\"28\":1}}],[\"000000000000002b\",{\"1\":{\"20\":1,\"22\":1,\"35\":1,\"39\":1}}],[\"000000000000000d\",{\"1\":{\"67\":1}}],[\"000000000000000b\",{\"1\":{\"54\":1}}],[\"0000000000000001\",{\"1\":{\"28\":1,\"67\":2}}],[\"0000000000000008\",{\"1\":{\"28\":1,\"67\":4,\"77\":1,\"85\":3}}],[\"0000000000000004\",{\"1\":{\"22\":2,\"28\":2,\"35\":2,\"39\":2}}],[\"0000000000000000\",{\"1\":{\"19\":16,\"20\":1,\"22\":10,\"28\":26,\"35\":3,\"39\":10,\"49\":30,\"52\":1,\"54\":4,\"55\":7,\"58\":9,\"67\":28,\"77\":1,\"84\":6,\"85\":6}}],[\"00000000\",{\"1\":{\"19\":1,\"20\":6,\"28\":1,\"49\":5,\"67\":1,\"68\":6,\"73\":11,\"89\":15}}],[\"00000004\",{\"1\":{\"19\":1,\"49\":3}}],[\"00000008\",{\"1\":{\"19\":2,\"49\":2}}],[\"00000064\",{\"1\":{\"19\":1}}],[\"00008b15\",{\"1\":{\"20\":1}}],[\"0000\",{\"1\":{\"20\":6}}],[\"004b2000\",{\"1\":{\"68\":1}}],[\"004ac000\",{\"1\":{\"68\":2}}],[\"004aa000\",{\"1\":{\"68\":2}}],[\"004a5000\",{\"1\":{\"68\":2}}],[\"0047f000\",{\"1\":{\"68\":2}}],[\"00474343\",{\"1\":{\"20\":1}}],[\"00450e10\",{\"1\":{\"20\":2}}],[\"00401000\",{\"1\":{\"68\":2}}],[\"00400000\",{\"1\":{\"68\":1}}],[\"0040\",{\"1\":{\"20\":2}}],[\"0060\",{\"1\":{\"20\":1}}],[\"00b80000\",{\"1\":{\"20\":1}}],[\"0050\",{\"1\":{\"20\":2}}],[\"0030\",{\"1\":{\"20\":2}}],[\"00\",{\"1\":{\"14\":4,\"20\":31,\"25\":9,\"52\":29,\"53\":19,\"67\":1,\"68\":10,\"73\":15,\"77\":65,\"80\":4,\"89\":16,\"100\":3,\"103\":6,\"104\":7,\"106\":3,\"107\":2,\"110\":1,\"111\":6,\"112\":12,\"113\":4,\"117\":4,\"119\":5,\"120\":1,\"123\":2,\"124\":4,\"125\":10,\"126\":5,\"127\":4,\"130\":1,\"131\":1,\"135\":1,\"136\":1,\"137\":1,\"139\":1,\"141\":1,\"146\":7,\"150\":23,\"155\":1,\"156\":2,\"157\":1,\"158\":2,\"159\":1,\"160\":1,\"164\":7,\"165\":7,\"173\":6,\"174\":36,\"175\":14,\"176\":3,\"180\":1,\"181\":8,\"182\":1,\"188\":2,\"191\":1}}],[\"05000000\",{\"1\":{\"20\":1}}],[\"05\",{\"1\":{\"14\":1,\"20\":2,\"67\":1,\"73\":1,\"77\":6,\"124\":1,\"144\":1,\"150\":2,\"155\":1,\"180\":1,\"182\":1}}],[\"0\",{\"1\":{\"6\":1,\"17\":1,\"19\":6,\"20\":3,\"22\":9,\"25\":4,\"28\":24,\"35\":1,\"39\":9,\"40\":1,\"42\":1,\"43\":1,\"46\":1,\"49\":16,\"52\":1,\"54\":1,\"55\":7,\"67\":57,\"68\":5,\"73\":9,\"77\":3,\"80\":7,\"82\":1,\"84\":8,\"85\":10,\"89\":9,\"91\":1,\"94\":2,\"98\":1,\"100\":4,\"102\":1,\"103\":1,\"104\":1,\"105\":2,\"106\":4,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"113\":3,\"115\":1,\"117\":3,\"118\":1,\"119\":2,\"120\":2,\"123\":1,\"124\":1,\"125\":2,\"126\":1,\"127\":2,\"130\":2,\"131\":2,\"135\":2,\"136\":1,\"137\":2,\"138\":2,\"139\":2,\"140\":1,\"141\":5,\"142\":3,\"144\":2,\"145\":1,\"146\":2,\"149\":3,\"150\":3,\"154\":2,\"155\":2,\"156\":1,\"157\":1,\"158\":2,\"159\":1,\"160\":1,\"162\":1,\"163\":2,\"164\":4,\"165\":2,\"168\":5,\"169\":3,\"173\":1,\"174\":1,\"175\":2,\"176\":1,\"178\":1,\"180\":2,\"181\":1,\"182\":2,\"183\":1,\"188\":3,\"190\":1,\"191\":1}}],[\"next\",{\"1\":{\"94\":2}}],[\"needed\",{\"1\":{\"83\":1,\"89\":1}}],[\"need\",{\"1\":{\"83\":1}}],[\"nm\",{\"1\":{\"35\":1}}],[\"null值\",{\"1\":{\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1}}],[\"null与不匹配\",{\"1\":{\"120\":1}}],[\"null这种语句\",{\"1\":{\"120\":1}}],[\"null语句\",{\"1\":{\"120\":1}}],[\"null\",{\"1\":{\"28\":2,\"67\":1,\"80\":1,\"83\":1,\"94\":2,\"100\":20,\"120\":2,\"155\":1,\"163\":1,\"182\":1}}],[\"num列\",{\"1\":{\"168\":1}}],[\"number\",{\"1\":{\"25\":3}}],[\"num\",{\"1\":{\"22\":1,\"39\":1,\"55\":1,\"77\":1,\"84\":1,\"146\":2,\"150\":6,\"155\":4,\"158\":2,\"160\":2,\"162\":2,\"163\":5,\"164\":4,\"165\":6,\"168\":7,\"176\":1,\"178\":2,\"181\":4,\"182\":4,\"183\":3}}],[\"nr\",{\"1\":{\"28\":1,\"67\":1,\"77\":1}}],[\"nident\",{\"1\":{\"25\":1}}],[\"ndx\",{\"1\":{\"22\":1,\"39\":1,\"55\":1,\"77\":1,\"84\":1}}],[\"node\",{\"1\":{\"149\":1}}],[\"no\",{\"1\":{\"100\":4}}],[\"normally\",{\"1\":{\"86\":1}}],[\"now\",{\"1\":{\"83\":2,\"150\":1}}],[\"nobits\",{\"1\":{\"28\":1,\"67\":2}}],[\"nopw\",{\"1\":{\"77\":3,\"80\":1}}],[\"nopl\",{\"1\":{\"53\":1}}],[\"nop\",{\"1\":{\"20\":1}}],[\"not操作符\",{\"0\":{\"127\":1}}],[\"notype\",{\"1\":{\"22\":2,\"39\":2,\"55\":4,\"84\":4}}],[\"note\",{\"1\":{\"19\":4,\"20\":1,\"28\":3,\"49\":7,\"67\":17,\"73\":7}}],[\"not\",{\"1\":{\"17\":1,\"86\":3,\"104\":1,\"127\":3,\"164\":1,\"192\":1}}],[\"name包含文本1000的所有行\",{\"1\":{\"135\":1}}],[\"name=\",{\"1\":{\"117\":1}}],[\"name进行升序排序\",{\"1\":{\"112\":1}}],[\"name进行排序\",{\"1\":{\"111\":1}}],[\"name限定为表products\",{\"1\":{\"107\":1}}],[\"names\",{\"1\":{\"98\":1}}],[\"namespace\",{\"1\":{\"40\":1,\"41\":1,\"42\":1}}],[\"name\",{\"1\":{\"19\":1,\"22\":1,\"28\":1,\"29\":2,\"35\":1,\"36\":2,\"39\":1,\"41\":2,\"49\":3,\"54\":2,\"55\":1,\"67\":1,\"77\":3,\"83\":2,\"84\":1,\"85\":2,\"86\":1,\"100\":2,\"102\":2,\"103\":2,\"104\":1,\"106\":8,\"107\":4,\"108\":2,\"110\":3,\"111\":3,\"112\":5,\"113\":4,\"115\":2,\"117\":7,\"118\":2,\"119\":4,\"120\":1,\"123\":2,\"124\":2,\"125\":4,\"126\":3,\"127\":6,\"130\":8,\"131\":6,\"135\":9,\"136\":4,\"137\":8,\"138\":4,\"139\":8,\"141\":8,\"142\":4,\"144\":6,\"145\":2,\"149\":9,\"164\":1,\"168\":4,\"169\":3,\"173\":6,\"174\":6,\"175\":8,\"176\":4,\"178\":2,\"180\":4,\"181\":1,\"183\":2}}],[\"n\",{\"1\":{\"6\":1,\"19\":1,\"21\":1,\"40\":4,\"41\":3,\"42\":1,\"44\":2,\"73\":2,\"80\":4,\"82\":1,\"84\":1,\"89\":2,\"91\":2,\"93\":2,\"94\":2,\"140\":1,\"141\":3}}],[\"hunting\",{\"1\":{\"104\":1,\"164\":1}}],[\"hurt\",{\"1\":{\"86\":1}}],[\"hlocalhost\",{\"1\":{\"98\":1}}],[\"h头文件编译的\",{\"1\":{\"92\":1}}],[\"h中的包装函数使用的标志malloc\",{\"1\":{\"92\":1}}],[\"house\",{\"1\":{\"169\":1}}],[\"hour\",{\"1\":{\"150\":1}}],[\"hook\",{\"0\":{\"91\":1},\"1\":{\"104\":3,\"164\":3}}],[\"home=\",{\"1\":{\"70\":1}}],[\"home\",{\"1\":{\"68\":5,\"70\":1,\"73\":10,\"89\":25}}],[\"holds\",{\"1\":{\"29\":1}}],[\"hidden\",{\"1\":{\"58\":3}}],[\"hdr\",{\"1\":{\"49\":1,\"73\":2}}],[\"having子句过滤计数为2或2以上的分组\",{\"1\":{\"164\":1}}],[\"having在数据分组后进行过滤\",{\"1\":{\"164\":1}}],[\"having和where的差别\",{\"1\":{\"164\":1}}],[\"having支持所有where操作符\",{\"1\":{\"164\":1}}],[\"having\",{\"0\":{\"164\":1},\"1\":{\"164\":3,\"165\":2,\"166\":1}}],[\"have\",{\"1\":{\"86\":2}}],[\"handy\",{\"1\":{\"104\":3,\"164\":3}}],[\"handle\",{\"1\":{\"80\":5}}],[\"hash似乎已经不用了\",{\"1\":{\"84\":1}}],[\"hash\",{\"1\":{\"49\":1,\"73\":1,\"83\":3,\"84\":1}}],[\"half\",{\"1\":{\"25\":8}}],[\"h来查看elf文件中包含的段\",{\"1\":{\"28\":1}}],[\"h指令即可查看elf文件头\",{\"1\":{\"25\":1}}],[\"h指令打印elf文件的各个段的基本信息\",{\"1\":{\"19\":1}}],[\"help\",{\"1\":{\"98\":2}}],[\"hello\",{\"1\":{\"6\":6,\"7\":5,\"8\":3,\"9\":4,\"82\":1}}],[\"here\",{\"1\":{\"86\":3}}],[\"heap\",{\"1\":{\"68\":1,\"73\":1,\"89\":1}}],[\"headers\",{\"1\":{\"25\":6,\"28\":2,\"67\":4,\"73\":2,\"77\":2}}],[\"header\",{\"1\":{\"24\":2,\"25\":11,\"34\":1,\"67\":2,\"81\":1}}],[\"hex\",{\"1\":{\"19\":1}}],[\"h\",{\"1\":{\"19\":1,\"20\":5,\"25\":2,\"29\":1,\"36\":1,\"49\":3,\"67\":1,\"73\":5,\"84\":1,\"86\":1,\"91\":3,\"92\":1,\"98\":2}}],[\"h>\",{\"1\":{\"6\":1,\"40\":1,\"42\":1,\"44\":2,\"67\":1,\"73\":3,\"80\":3,\"82\":1,\"84\":1,\"86\":1,\"89\":3,\"91\":5,\"93\":1,\"94\":4}}],[\"1个或多个匹配\",{\"1\":{\"141\":1}}],[\"1|2|3\",{\"1\":{\"137\":1}}],[\"1f\",{\"1\":{\"52\":1,\"53\":1,\"77\":3,\"80\":1}}],[\"1d\",{\"1\":{\"52\":1}}],[\"192\",{\"1\":{\"83\":1}}],[\"1988\",{\"1\":{\"69\":1}}],[\"19\",{\"1\":{\"49\":1,\"67\":1,\"77\":1,\"158\":1}}],[\"18\",{\"1\":{\"49\":1,\"52\":3,\"53\":2,\"67\":1}}],[\"17\",{\"1\":{\"49\":1,\"67\":1}}],[\"164\",{\"1\":{\"69\":1}}],[\"16\",{\"1\":{\"49\":1,\"52\":1,\"67\":2,\"154\":1,\"160\":1}}],[\"15\",{\"0\":{\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1},\"1\":{\"20\":1,\"49\":1,\"67\":1,\"159\":1}}],[\"1b\",{\"1\":{\"20\":2}}],[\"1b0c0708\",{\"1\":{\"20\":1}}],[\"149\",{\"1\":{\"158\":1,\"165\":2}}],[\"141\",{\"1\":{\"83\":1}}],[\"14\",{\"0\":{\"178\":1,\"179\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":1,\"184\":1},\"1\":{\"20\":1,\"25\":1,\"28\":1,\"49\":1,\"67\":1,\"84\":1,\"102\":1,\"103\":2,\"104\":2,\"105\":1,\"107\":2,\"110\":1,\"111\":2,\"112\":4,\"127\":2,\"160\":1,\"163\":1,\"164\":2,\"173\":2,\"174\":6,\"175\":4,\"188\":2,\"190\":1,\"191\":1}}],[\"14000000\",{\"1\":{\"20\":1}}],[\"125\",{\"1\":{\"165\":2}}],[\"12小节\",{\"1\":{\"80\":1}}],[\"12345678\",{\"1\":{\"98\":1}}],[\"123\",{\"1\":{\"70\":2,\"137\":2}}],[\"127\",{\"1\":{\"69\":1}}],[\"12\",{\"0\":{\"168\":1,\"169\":1},\"1\":{\"20\":1,\"22\":1,\"28\":2,\"39\":1,\"49\":1,\"67\":1,\"150\":2}}],[\"102949\",{\"1\":{\"89\":1}}],[\"10d0\",{\"1\":{\"85\":1}}],[\"10370\",{\"1\":{\"73\":4}}],[\"1032\",{\"1\":{\"25\":1}}],[\"1050\",{\"1\":{\"53\":1,\"77\":1}}],[\"10ad\",{\"1\":{\"53\":1}}],[\"10a7\",{\"1\":{\"53\":1}}],[\"10a3\",{\"1\":{\"53\":1}}],[\"10a1\",{\"1\":{\"53\":1}}],[\"10a8\",{\"1\":{\"53\":2}}],[\"109f\",{\"1\":{\"53\":1}}],[\"109d\",{\"1\":{\"53\":1}}],[\"1096\",{\"1\":{\"53\":1}}],[\"1091\",{\"1\":{\"53\":2}}],[\"1085852\",{\"1\":{\"89\":5}}],[\"1085761\",{\"1\":{\"89\":5}}],[\"1086586\",{\"1\":{\"89\":5}}],[\"1086583\",{\"1\":{\"89\":5}}],[\"1086585\",{\"1\":{\"89\":5}}],[\"108c\",{\"1\":{\"53\":2}}],[\"108b\",{\"1\":{\"53\":1}}],[\"1084\",{\"1\":{\"53\":1}}],[\"107a\",{\"1\":{\"77\":1,\"80\":1}}],[\"1074\",{\"1\":{\"77\":1,\"80\":1}}],[\"1070\",{\"1\":{\"77\":3,\"80\":1}}],[\"107f\",{\"1\":{\"53\":1}}],[\"107d\",{\"1\":{\"53\":1}}],[\"1078\",{\"1\":{\"53\":1}}],[\"1076\",{\"1\":{\"53\":1}}],[\"106a\",{\"1\":{\"77\":2}}],[\"106f\",{\"1\":{\"53\":2}}],[\"1068\",{\"1\":{\"53\":2}}],[\"1064\",{\"1\":{\"53\":1,\"77\":2}}],[\"1060\",{\"1\":{\"53\":1,\"77\":4}}],[\"1005\",{\"1\":{\"104\":2,\"105\":3,\"118\":2,\"127\":4,\"163\":2,\"164\":4}}],[\"1002\",{\"1\":{\"104\":2,\"105\":3,\"118\":2,\"124\":3,\"125\":2,\"126\":1,\"127\":2,\"163\":2,\"164\":3,\"188\":7,\"190\":4,\"191\":3}}],[\"1003生产的所有商品并对商品名称进行升序排序\",{\"1\":{\"126\":1}}],[\"1003\",{\"1\":{\"104\":7,\"105\":8,\"118\":1,\"123\":1,\"124\":8,\"125\":13,\"126\":1,\"127\":2,\"154\":1,\"159\":1,\"162\":1,\"163\":2,\"164\":9,\"188\":6,\"190\":3,\"191\":3}}],[\"1001\",{\"1\":{\"104\":3,\"105\":4,\"118\":3,\"127\":6,\"163\":2,\"164\":4,\"188\":8,\"190\":4,\"191\":4}}],[\"10004\",{\"1\":{\"150\":2,\"168\":3,\"182\":2,\"183\":1}}],[\"10003\",{\"1\":{\"150\":2,\"182\":2,\"183\":1}}],[\"10001\",{\"1\":{\"150\":3,\"164\":1,\"168\":3,\"169\":1,\"181\":2,\"182\":4,\"183\":1}}],[\"1000|2000\",{\"1\":{\"136\":1}}],[\"1000将不匹配\",{\"1\":{\"130\":1}}],[\"10005\",{\"1\":{\"120\":1,\"182\":2,\"183\":1}}],[\"10002\",{\"1\":{\"120\":1,\"182\":1}}],[\"1000\",{\"1\":{\"67\":1,\"102\":1,\"103\":1,\"104\":2,\"106\":1,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"118\":1,\"127\":2,\"130\":1,\"135\":3,\"136\":2,\"141\":1,\"164\":2,\"165\":2,\"173\":1,\"174\":6,\"175\":2}}],[\"10000000\",{\"1\":{\"20\":1}}],[\"100\",{\"1\":{\"46\":1}}],[\"10\",{\"0\":{\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1},\"1\":{\"20\":2,\"22\":1,\"28\":1,\"39\":1,\"49\":1,\"67\":2,\"68\":5,\"73\":21,\"77\":1,\"100\":3,\"103\":2,\"104\":3,\"111\":2,\"112\":4,\"117\":4,\"119\":6,\"123\":3,\"124\":2,\"125\":6,\"126\":2,\"135\":1,\"146\":7,\"164\":4,\"173\":2,\"174\":12,\"175\":4,\"176\":3,\"181\":3}}],[\"1e\",{\"1\":{\"20\":3,\"52\":1,\"53\":1,\"77\":7,\"80\":1}}],[\"1c000000\",{\"1\":{\"20\":3}}],[\"133571\",{\"1\":{\"154\":1,\"160\":1}}],[\"13\",{\"0\":{\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"175\":1,\"176\":1},\"1\":{\"20\":2,\"22\":1,\"25\":1,\"28\":1,\"39\":1,\"49\":1,\"67\":1,\"103\":1,\"104\":1,\"111\":1,\"112\":2,\"124\":1,\"125\":2,\"126\":1,\"154\":1,\"164\":1,\"173\":1,\"174\":6,\"175\":2}}],[\"1110\",{\"1\":{\"85\":1}}],[\"1119\",{\"1\":{\"77\":2}}],[\"112a\",{\"1\":{\"77\":1}}],[\"1123\",{\"1\":{\"77\":1}}],[\"1120\",{\"1\":{\"77\":1}}],[\"1173\",{\"1\":{\"89\":5}}],[\"1175\",{\"1\":{\"77\":2}}],[\"1171\",{\"1\":{\"77\":2}}],[\"117001\",{\"1\":{\"73\":5}}],[\"1151\",{\"1\":{\"77\":1}}],[\"115d\",{\"1\":{\"77\":2}}],[\"1159\",{\"1\":{\"77\":2}}],[\"1155\",{\"1\":{\"77\":2}}],[\"1154\",{\"1\":{\"77\":1}}],[\"114d\",{\"1\":{\"77\":1}}],[\"1148\",{\"1\":{\"77\":1}}],[\"1143\",{\"1\":{\"77\":1}}],[\"114e\",{\"1\":{\"77\":1}}],[\"1147\",{\"1\":{\"77\":2}}],[\"1144\",{\"1\":{\"77\":2}}],[\"113e\",{\"1\":{\"77\":1}}],[\"1135\",{\"1\":{\"77\":1}}],[\"1131\",{\"1\":{\"77\":1}}],[\"1130\",{\"1\":{\"77\":1}}],[\"113d\",{\"1\":{\"77\":2}}],[\"1139\",{\"1\":{\"77\":2}}],[\"116c\",{\"1\":{\"77\":2}}],[\"1167\",{\"1\":{\"77\":2}}],[\"1162\",{\"1\":{\"77\":2}}],[\"116994\",{\"1\":{\"73\":5}}],[\"116178\",{\"1\":{\"68\":5}}],[\"11a0\",{\"1\":{\"53\":2}}],[\"11\",{\"0\":{\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"166\":1},\"1\":{\"8\":1,\"22\":1,\"28\":3,\"39\":1,\"49\":1,\"67\":1,\"73\":1,\"150\":1}}],[\"1\",{\"0\":{\"6\":1,\"7\":2,\"8\":1,\"9\":1,\"10\":1,\"12\":1,\"17\":1,\"20\":1,\"25\":1,\"26\":1,\"27\":1,\"29\":1,\"30\":2,\"31\":1,\"32\":1,\"36\":1,\"37\":2,\"38\":1,\"39\":1,\"41\":1,\"47\":1,\"48\":2,\"49\":1,\"50\":1,\"52\":1,\"60\":1,\"61\":2,\"62\":1,\"64\":1,\"67\":1,\"72\":1,\"75\":1,\"82\":1,\"88\":1,\"92\":1,\"97\":2,\"99\":1,\"100\":1,\"102\":1,\"110\":1,\"113\":1,\"115\":1,\"117\":1,\"122\":1,\"123\":2,\"124\":1,\"125\":1,\"129\":1,\"130\":2,\"131\":1,\"134\":1,\"135\":2,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"144\":1,\"145\":2,\"148\":1,\"149\":2,\"150\":1,\"151\":1,\"153\":1,\"154\":2,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"162\":1,\"168\":1,\"171\":1,\"172\":2,\"174\":1,\"178\":1,\"180\":1,\"186\":1,\"188\":1},\"1\":{\"7\":1,\"17\":3,\"19\":2,\"22\":5,\"25\":1,\"28\":8,\"35\":1,\"39\":5,\"43\":2,\"46\":1,\"49\":4,\"54\":1,\"55\":4,\"67\":7,\"68\":1,\"73\":5,\"77\":5,\"78\":1,\"80\":9,\"83\":3,\"84\":2,\"85\":1,\"89\":2,\"94\":2,\"98\":1,\"102\":2,\"103\":2,\"104\":4,\"106\":1,\"107\":4,\"110\":2,\"111\":2,\"112\":4,\"113\":4,\"115\":1,\"117\":5,\"118\":1,\"119\":2,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":2,\"130\":1,\"131\":2,\"135\":1,\"137\":2,\"138\":4,\"139\":1,\"141\":3,\"142\":1,\"146\":2,\"149\":1,\"150\":1,\"154\":2,\"155\":2,\"156\":1,\"157\":1,\"158\":2,\"159\":1,\"160\":1,\"162\":1,\"164\":5,\"168\":1,\"169\":4,\"173\":2,\"174\":12,\"175\":4,\"176\":2,\"180\":2,\"181\":2,\"183\":3}}],[\"链接时打桩\",{\"0\":{\"93\":1}}],[\"链接过程会把program1\",{\"1\":{\"73\":1}}],[\"链接成为可指向文件program1\",{\"1\":{\"73\":1}}],[\"链接器开始重新遍历可执行文件和每个共享对象的重定位表\",{\"1\":{\"90\":1}}],[\"链接器的装载会有不同的顺序\",{\"1\":{\"89\":1}}],[\"链接器可以列出可执行文件所需的所有共享对象并将这些共享对象的名字放入到一个装载集合中\",{\"1\":{\"89\":1}}],[\"链接器会在创建可执行文件时\",{\"1\":{\"78\":1}}],[\"链接器会判断f是一个目标文件还是一个存档文件\",{\"1\":{\"55\":1}}],[\"链接器在装载模块的时候会查找每个变量所在的地址\",{\"1\":{\"77\":1}}],[\"链接器在解析符号时就可以知道\",{\"1\":{\"73\":1}}],[\"链接器维护一个可重定位目标文件的集合e\",{\"1\":{\"55\":1}}],[\"链接器是从左到右按照它们在编译器取得程序命令行上出现的顺序来扫描可重定位目标文件和存档文件\",{\"1\":{\"55\":1}}],[\"链接器就会报服啊后未定义的错误\",{\"1\":{\"44\":1}}],[\"链接的输入目标只有program1\",{\"1\":{\"73\":1}}],[\"链接的接口\",{\"0\":{\"35\":1}}],[\"链接的过程就是将几个输入目标文件加工合并成一个输出文件的过程\",{\"1\":{\"47\":1}}],[\"链接的过程就是把多个不同的目标文件之间相互衔接的过程\",{\"1\":{\"35\":1}}],[\"链接的过程\",{\"0\":{\"13\":1}}],[\"链接的本质就是把一些指令对其它符号地址的引用加以修改\",{\"1\":{\"12\":1}}],[\"链接的基本定义\",{\"0\":{\"12\":1}}],[\"链接一堆文件生成最终的可执行文件的过程\",{\"1\":{\"10\":1}}],[\"链接\",{\"0\":{\"4\":1,\"10\":1},\"1\":{\"6\":1}}],[\"cntrl\",{\"1\":{\"140\":2}}],[\"city\",{\"1\":{\"100\":2,\"181\":1}}],[\"curtime\",{\"1\":{\"150\":1}}],[\"curdate\",{\"1\":{\"150\":1}}],[\"current\",{\"1\":{\"25\":1,\"98\":1}}],[\"cust\",{\"1\":{\"100\":18,\"120\":3,\"149\":8,\"150\":6,\"155\":5,\"164\":3,\"168\":15,\"169\":8,\"178\":6,\"181\":11,\"182\":8,\"183\":7}}],[\"customers表\",{\"1\":{\"182\":1}}],[\"customers\",{\"1\":{\"100\":3,\"120\":1,\"149\":2,\"155\":2,\"168\":2,\"169\":2,\"178\":1,\"181\":1,\"182\":6,\"183\":5}}],[\"crashcourse\",{\"1\":{\"99\":1,\"100\":2,\"107\":1}}],[\"creating\",{\"1\":{\"55\":1}}],[\"create\",{\"1\":{\"44\":2,\"100\":2}}],[\"clear\",{\"1\":{\"98\":1}}],[\"class\",{\"1\":{\"25\":1,\"41\":3}}],[\"c文件进行修改得到如下源码\",{\"1\":{\"93\":1}}],[\"c文件所以就会执行上述的存档文件的操作导致foo\",{\"1\":{\"55\":1}}],[\"c的原因装载的顺序应该是\",{\"1\":{\"89\":1}}],[\"c的foobar\",{\"1\":{\"73\":1}}],[\"c呢\",{\"1\":{\"89\":1}}],[\"c中的函数b2\",{\"1\":{\"89\":1}}],[\"c中的函数b1和b2\",{\"1\":{\"89\":1}}],[\"cxa\",{\"1\":{\"85\":1}}],[\"c是共享对象的一部分\",{\"1\":{\"78\":1}}],[\"c是程序可执行文件的一部分\",{\"1\":{\"78\":1}}],[\"c是这样引用的\",{\"1\":{\"78\":1}}],[\"c时\",{\"1\":{\"78\":1}}],[\"c被编译成program1\",{\"1\":{\"73\":2}}],[\"c被链接成lib\",{\"1\":{\"73\":1}}],[\"c编译成一个共享对象文件\",{\"1\":{\"73\":1}}],[\"cartesian\",{\"1\":{\"174\":1}}],[\"carrying\",{\"1\":{\"104\":2,\"164\":2}}],[\"carrots\",{\"1\":{\"102\":1,\"103\":1,\"104\":2,\"106\":3,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"115\":1,\"117\":2,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"164\":2,\"173\":1,\"174\":6,\"175\":2,\"180\":2}}],[\"case\",{\"1\":{\"104\":2,\"164\":2}}],[\"cannot\",{\"1\":{\"86\":2}}],[\"can\",{\"1\":{\"86\":1,\"98\":1,\"102\":1,\"103\":1,\"104\":2,\"106\":1,\"107\":2,\"110\":1,\"111\":1,\"112\":2,\"117\":2,\"118\":1,\"119\":2,\"124\":1,\"126\":1,\"164\":2,\"173\":1,\"174\":6,\"175\":2}}],[\"cat\",{\"1\":{\"68\":1,\"73\":1,\"89\":1}}],[\"call\",{\"1\":{\"20\":2,\"52\":3,\"53\":3,\"77\":6}}],[\"cst32\",{\"1\":{\"67\":2}}],[\"csapp提到的另一种重定位结构\",{\"1\":{\"56\":1}}],[\"csapp\",{\"1\":{\"43\":1,\"55\":1}}],[\"cpu将控制权交给操作系统\",{\"1\":{\"65\":1}}],[\"cpu直接使用在指令中编码的32值作为有效地址\",{\"1\":{\"56\":1}}],[\"cpu执行一条使用pc相对寻址的指令时\",{\"1\":{\"56\":1}}],[\"cpp\",{\"1\":{\"7\":1}}],[\"c依赖于a2\",{\"1\":{\"89\":1}}],[\"c依赖于a1\",{\"1\":{\"89\":1}}],[\"c依赖的文件不会并入集合中\",{\"1\":{\"55\":1}}],[\"c依赖与liba\",{\"1\":{\"55\":1}}],[\"changed\",{\"1\":{\"99\":1}}],[\"chapter05\",{\"1\":{\"89\":25}}],[\"chapter04\",{\"1\":{\"68\":5,\"73\":10}}],[\"char\",{\"1\":{\"19\":1,\"25\":1,\"36\":2,\"40\":4,\"80\":1,\"94\":4,\"100\":16}}],[\"chk\",{\"1\":{\"53\":1,\"54\":2,\"55\":2,\"58\":4}}],[\"c4\",{\"1\":{\"52\":1,\"53\":1,\"77\":3}}],[\"c0\",{\"1\":{\"52\":2,\"53\":2}}],[\"ccvefqsm\",{\"1\":{\"57\":1}}],[\"ccjfgl1q\",{\"1\":{\"57\":1}}],[\"ccwmm6jl\",{\"1\":{\"55\":2}}],[\"cc\",{\"1\":{\"42\":2}}],[\"cc1\",{\"1\":{\"8\":1}}],[\"c语言源代码文件中的所有全局的变量和函数经过编译后\",{\"1\":{\"40\":1}}],[\"c代码中用在调用printf时用到了字符字面量\",{\"1\":{\"21\":1}}],[\"c代码中一共有两个这样的变量\",{\"1\":{\"21\":1,\"22\":1}}],[\"c2\",{\"1\":{\"20\":2,\"41\":1}}],[\"c28b45fc\",{\"1\":{\"20\":1}}],[\"c3\",{\"1\":{\"20\":2,\"52\":1,\"53\":1,\"77\":5}}],[\"c9\",{\"1\":{\"20\":2}}],[\"c6\",{\"1\":{\"20\":1}}],[\"cos\",{\"1\":{\"151\":1}}],[\"coyote\",{\"1\":{\"149\":1,\"168\":2,\"169\":1,\"178\":1,\"181\":4,\"183\":1}}],[\"column\",{\"1\":{\"108\":1,\"155\":1}}],[\"columns\",{\"1\":{\"100\":2}}],[\"collect2\",{\"1\":{\"55\":1}}],[\"correlated\",{\"1\":{\"169\":1}}],[\"corporation\",{\"1\":{\"98\":1}}],[\"core\",{\"1\":{\"17\":1}}],[\"copyright\",{\"1\":{\"98\":1}}],[\"copy\",{\"1\":{\"68\":1}}],[\"cow\",{\"1\":{\"68\":1}}],[\"country\",{\"1\":{\"100\":2,\"144\":4,\"145\":1,\"181\":1}}],[\"count\",{\"0\":{\"155\":1},\"1\":{\"25\":2,\"153\":1,\"155\":3,\"160\":1,\"162\":1,\"163\":2,\"164\":6,\"169\":2,\"183\":1}}],[\"combination\",{\"1\":{\"104\":1,\"164\":1}}],[\"compound\",{\"1\":{\"186\":1}}],[\"complete\",{\"1\":{\"104\":3,\"164\":3}}],[\"complement\",{\"1\":{\"25\":1}}],[\"compiletime\",{\"1\":{\"91\":1}}],[\"compressed\",{\"1\":{\"28\":1,\"67\":1}}],[\"com\",{\"1\":{\"22\":1,\"39\":1,\"181\":2}}],[\"commands\",{\"1\":{\"98\":1}}],[\"command\",{\"1\":{\"98\":1}}],[\"common选项即可\",{\"1\":{\"57\":1}}],[\"common块的机制来源于fortran\",{\"1\":{\"57\":1}}],[\"common块\",{\"0\":{\"57\":1},\"1\":{\"39\":2}}],[\"common\",{\"1\":{\"22\":1}}],[\"comment\",{\"1\":{\"19\":2,\"20\":1,\"28\":1,\"49\":3,\"67\":1}}],[\"code\",{\"1\":{\"19\":1,\"49\":8,\"56\":1,\"77\":1}}],[\"concat\",{\"1\":{\"144\":4,\"145\":1}}],[\"concatenate\",{\"1\":{\"144\":1}}],[\"connection\",{\"1\":{\"98\":1}}],[\"conflicts\",{\"1\":{\"86\":1}}],[\"contact列值和搜索串为它们的soundex值\",{\"1\":{\"149\":1}}],[\"contact\",{\"1\":{\"100\":2,\"149\":5,\"168\":4,\"178\":2,\"181\":1}}],[\"contains\",{\"1\":{\"22\":1,\"39\":1,\"54\":2,\"55\":1,\"77\":2,\"83\":1,\"84\":1,\"85\":2}}],[\"contents\",{\"1\":{\"19\":8,\"20\":6,\"49\":38,\"82\":1}}],[\"const变量\",{\"1\":{\"21\":1}}],[\"const\",{\"1\":{\"19\":1,\"44\":1}}],[\"c7\",{\"1\":{\"14\":1,\"20\":3,\"52\":1,\"53\":1,\"77\":5}}],[\"c++编译器默认函数和初始化了的全局变量为强符号\",{\"1\":{\"43\":1}}],[\"c++编译器会将extern\",{\"1\":{\"42\":1}}],[\"c++中的全局变量和静态变量也有同样的机制\",{\"1\":{\"41\":1}}],[\"c++filt\",{\"1\":{\"41\":2}}],[\"c++名称修饰\",{\"1\":{\"41\":1}}],[\"c++\",{\"0\":{\"1\":1,\"41\":1},\"2\":{\"2\":1,\"3\":1}}],[\"c\",{\"0\":{\"1\":1,\"42\":1},\"1\":{\"6\":2,\"7\":3,\"9\":1,\"20\":3,\"22\":3,\"28\":1,\"35\":1,\"39\":1,\"40\":1,\"41\":5,\"42\":5,\"43\":3,\"44\":3,\"46\":5,\"55\":11,\"67\":4,\"73\":7,\"77\":3,\"82\":2,\"84\":3,\"89\":16,\"91\":2,\"92\":3,\"93\":5,\"94\":3,\"98\":2,\"178\":2,\"181\":3},\"2\":{\"2\":1,\"3\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
