const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":63,\"nextId\":63,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"2@1\",\"4\":\"4\",\"5\":\"5\",\"6\":\"5#_1-被隐藏的过程\",\"7\":\"5#_1-1-预处理\",\"8\":\"5#_1-2-编译\",\"9\":\"5#_1-3-汇编\",\"10\":\"5#_1-4-链接\",\"11\":\"5#_2-静态链接\",\"12\":\"5#_2-1-链接的基本定义\",\"13\":\"5#_2-2-链接的过程\",\"14\":\"5#_2-3-重定位\",\"15\":\"5#_2-4-其它\",\"16\":\"6\",\"17\":\"6#_1-目标文件的格式\",\"18\":\"6#_2-目标文件是什么样的\",\"19\":\"6#_3-挖掘simplesection-o\",\"20\":\"6#_3-1-代码段\",\"21\":\"6#_3-2-数据段和只读数据段\",\"22\":\"6#_3-3-bss段\",\"23\":\"6#_3-3-其它段\",\"24\":\"6#_4-elf文件结构描述\",\"25\":\"6#_4-1-文件头\",\"26\":\"6#_4-1-2-文件类型\",\"27\":\"6#_4-1-3-机器类型\",\"28\":\"6#_4-2-段表\",\"29\":\"6#_4-2-1-段描述符的结构\",\"30\":\"6#_4-2-1-1-段的类型-sh-type\",\"31\":\"6#_4-2-1-2-段的标志位-sh-flags\",\"32\":\"6#_4-2-1-3-段的链接信息-sh-link、sh-info\",\"33\":\"6#_4-3-重定位表\",\"34\":\"6#_4-4-字符串表\",\"35\":\"6#_5-链接的接口-符号-symbol\",\"36\":\"6#_5-1-elf符号表结构\",\"37\":\"6#_5-1-1-符号类型和绑定类型-st-info\",\"38\":\"6#_5-1-2-符号所在段-st-shndx\",\"39\":\"6#_5-1-3-符号值-st-value\",\"40\":\"6#_5-2-特殊符号\",\"41\":\"6#_5-3-1-c-符号修饰\",\"42\":\"6#_5-4-extern-c\",\"43\":\"6#_5-5-强符合与弱符号\",\"44\":\"6#弱引用和强引用\",\"45\":\"6#_5-6-调试信息\",\"46\":\"7\",\"47\":\"7#_1-空间与地址分配\",\"48\":\"7#_1-1-按序叠加\",\"49\":\"7#_1-2-相似段合并\",\"50\":\"7#_1-3-符号地址的确定\",\"51\":\"7#_2-符号解析与重定位\",\"52\":\"7#_2-1-重定位\",\"53\":\"7#修正后的地址\",\"54\":\"7#_2-2-重定位表\",\"55\":\"7#_2-3-符号解析\",\"56\":\"7#_2-4-指令修正方式\",\"57\":\"7#_3-common块\",\"58\":\"7#_4-c-相关问题\",\"59\":\"7#_5-静态库链接\",\"60\":\"7#_6-链接过程控制\",\"61\":\"7#_7-bfd库\",\"62\":\"8\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[2],\"2\":[null,null,2],\"3\":[null,null,2],\"4\":[2],\"5\":[2],\"6\":[2,24],\"7\":[2,36],\"8\":[3,21],\"9\":[3,11],\"10\":[3,4],\"11\":[2],\"12\":[3,6],\"13\":[2,3],\"14\":[3,31],\"15\":[3,6],\"16\":[2],\"17\":[2,57],\"18\":[2,39],\"19\":[3,111],\"20\":[3,204],\"21\":[3,25],\"22\":[2,77],\"23\":[2,1],\"24\":[2,15],\"25\":[3,127],\"26\":[4,1],\"27\":[4,1],\"28\":[3,152],\"29\":[4,67],\"30\":[7,8],\"31\":[7,5],\"32\":[9,8],\"33\":[3,29],\"34\":[2,17],\"35\":[5,73],\"36\":[3,31],\"37\":[6,7],\"38\":[7,8],\"39\":[7,83],\"40\":[3,61],\"41\":[5,69],\"42\":[5,31],\"43\":[2,62],\"44\":[1,56],\"45\":[3,2],\"46\":[2,19],\"47\":[2,3],\"48\":[2,19],\"49\":[3,218],\"50\":[3,30],\"51\":[2],\"52\":[3,104],\"53\":[1,121],\"54\":[2,105],\"55\":[3],\"56\":[3],\"57\":[2],\"58\":[2],\"59\":[2],\"60\":[2],\"61\":[2],\"62\":[1,3]},\"averageFieldLength\":[2.9682539682539684,40.180942606611055,1],\"storedFields\":{\"0\":{\"h\":\"介绍页\"},\"1\":{\"h\":\"c/c++\"},\"2\":{\"c\":[\"c/c++\"]},\"3\":{\"c\":[\"c/c++\"]},\"4\":{\"h\":\"链接、装载和库\"},\"5\":{\"h\":\"第一章 编译和链接\"},\"6\":{\"h\":\"1. 被隐藏的过程\",\"t\":[\"// hello.c #include <stdio.h> int main() { printf(\\\"hello world\\\\n\\\"); return 0; }\",\"使用gcc生成可执行文件\",\"$> gcc hello.c -o hello $> ./hello Hello World\",\"gcc生成可执行文件的四个步骤\",\"预处理\",\"编译\",\"汇编\",\"链接\"]},\"7\":{\"h\":\"1.1 预处理\",\"t\":[\"1. 展开所有宏定义 (#define) 2. 处理所有预编译指令 (#if #ifdef #elif #else #endif) 3. 处理#include预编译指令,将被包含的文件插入到该预处理指令的位置。递归的执行 4. 删除所有注释 5. 添加行号和文件名标号。比如 #2 \\\"hello.c\\\" 2, 以便于编译时编译器产生调试用的行号信息及用于编译时产生编译错误或警告时能够显示行号。 6. 保留所有的#pragma编译指令，因为编译器需要使用它们。\",\"生成预处理文件 *.i\",\"$> gcc -E hello.c -o hello.i 或者 $> cpp hello.c > hello.i\"]},\"8\":{\"h\":\"1.2 编译\",\"t\":[\"将预处理文件经过一系列词法分析、语法分析、语义分析及优化后生成汇编的过程。程序构建的核心。 生成汇编文件 .s\",\"$> gcc -S hello.i -o hello.s 或者 $> /usr/lib/gcc/x86_64-linux-gnu/11/cc1 hello.i\"]},\"9\":{\"h\":\"1.3 汇编\",\"t\":[\"将每一条汇编指令翻译成对应机器码的过程。 生成目标文件（或者中间目标文件）*.o\",\"$> as hello.s -o hello.o 或者 $> gcc -c hello.s -o hello.o\"]},\"10\":{\"h\":\"1.4 链接\",\"t\":[\"通过使用链接器(ld)链接一堆文件生成最终的可执行文件的过程。 如hello文件\"]},\"11\":{\"h\":\"2. 静态链接\"},\"12\":{\"h\":\"2.1 链接的基本定义\",\"t\":[\"将每个源代码模块独立编译，然后安装需要将他们“组装”起来的过程被称为链接。 链接的本质就是把一些指令对其它符号地址的引用加以修改。\"]},\"13\":{\"h\":\"2.2 链接的过程\",\"t\":[\"地址和空间分配、符号决议和重定位。\"]},\"14\":{\"h\":\"2.3 重定位\",\"t\":[\"在链接过程中，对定义在其它目标文件中的函数调用的指令需要被重新调整，对使用定义在其它目标文件中的变量也是如此。 比如: 有目标文件A有全局变量var 对目标文件B有 movq 0x2a, var c7 05 00 00 00 00 2a movq $0x2a,0x0(%rip) 由于编译目标文件B时无法确认var的目标地址，所以编译器在无法确认var地址的情况下，只能将movq指令的目标地址置0， 等待链接器再将目标文件A和B链接起来时再将其修正。 例如A和B链接后，变量var的地址确认为0x1000，那么链接器将会把这个指令的目标地址部分修改为0x1000。 这个地址修正的过程也被叫做“重定位(Relocation)”，每个要修正的地方叫一个“重定位入口(Relocation Entry)”。 重定位所做的就是给程序中每个这样的绝对地址引用的地址进行修正。\"]},\"15\":{\"h\":\"2.4 其它\",\"t\":[\"运行时库：支撑程序运行的基本函数集合。 库：一组目标文件(.o后缀的文件)的包\"]},\"16\":{\"h\":\"第二章 目标文件\"},\"17\":{\"h\":\"1. 目标文件的格式\",\"t\":[\"Linux下的主流文件存储格式为ELF，通过file指令可以查看文件的存储格式。\",\"$> file foobar.o foobar.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped $> file /bin/bash /bin/bash: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=2f77b36371c214e11670c7d9d92727e9a49f626b, for GNU/Linux 3.2.0, stripped file /lib32/ld-linux.so.2 /lib32/ld-linux.so.2: ELF 32-bit LSB shared object, Intel 80386, version 1 (GNU/Linux), static-pie linked, BuildID[sha1]=595f7870a8165b3eb04c9ebda08a8ccba6f742c2, stripped\",\"ELF文件标准里采用ELF格式的文件:\",\"可重定位文件 Linux的 *.o文件 静态链接库\",\"可执行文件\",\"共享目标文件 Linux的 *.so文件\",\"核心转储文件 Linux下的 core dump\"]},\"18\":{\"h\":\"2. 目标文件是什么样的\",\"t\":[\"目标文件将信息按不同的属性进行存储，通常称之为节(section)或者段(segment)\",\"提示\",\"源代码编译后的机器指令经常放于代码段(.text) 全局变量和局部静态变量经常存放于数据段(.data)\",\" ELF文件的开头是一个“文件头”，描述了整个文件的文件属性。\",\"是否可执行\",\"是否静态链接\",\"是否动态链接\",\"入口地址\",\"目标硬件\",\"目标操作系统\",\"等等\",\"文件头同时包括一个段表\",\"提示\",\"段表用来描述一个文件中各个段的数组。段表描述了文件中各个段在文件中的偏移位置及段的属性等，从段表中可以得到每个的段的所有信息。 .data section: 已初始化的全局变量和局部静态变量 .bss section: 未初始化的全局变量和局部静态变量(默认值为0),初始化为0的全局变量和局部静态变量 .bss段只是为未初始化的全局变量和局部静态变量预留位置而已(记录所有为初始或者初始化为0的全局变量和静态变量的大小总和)，所以在文件中也不占据空间\",\"分段的好处\",\" 可以防止程序被恶意篡改\",\" 利用缓存，提高CPU的缓存命中\",\" 节省内存空间(内存共享比如libc的动态链接库)\"]},\"19\":{\"h\":\"3. 挖掘SimpleSection.o\",\"t\":[\"int printf(const char *format, ...); int global_init_var = 84; int global_uninit_var; void func1(int i) { printf(\\\"%d\\\\n\\\", i); } int main() { static int static_var = 85; static int static_var2; int a = 1; int b; func1(static_var + static_var2 + a + b); return 0; }\",\"提示\",\"使用objdump -h指令打印ELF文件的各个段的基本信息 -x 参数可以打印更多信息\",\"$> objdump -h SimpleSection.o SimpleSection.o: file format elf64-x86-64 Sections: Idx Name Size VMA LMA File off Algn 0 .text 00000064 0000000000000000 0000000000000000 00000040 2**0 CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 1 .data 00000008 0000000000000000 0000000000000000 000000a4 2**2 CONTENTS, ALLOC, LOAD, DATA 2 .bss 00000008 0000000000000000 0000000000000000 000000ac 2**2 ALLOC 3 .rodata 00000004 0000000000000000 0000000000000000 000000ac 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA 4 .comment 00000027 0000000000000000 0000000000000000 000000b0 2**0 CONTENTS, READONLY 5 .note.GNU-stack 00000000 0000000000000000 0000000000000000 000000d7 2**0 CONTENTS, READONLY 6 .note.gnu.property 00000020 0000000000000000 0000000000000000 000000d8 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 7 .eh_frame 00000058 0000000000000000 0000000000000000 000000f8 2**3 CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA\",\"注\",\".rodata: 只读数据段 .comment: 注释信息段 .note.GNU-stack: 堆栈提示段 Size: 段的长度 File Offset: 段所在的位置(段偏移) CONTENTS: 该段在文件中存在(bss段没有表示bss段在ELF文件中不存在内容。.note.GNU-stack虽然有但是长度为0，认为它在ELF文件中也不存在)\",\"使用size指令查看ELF文件的代码段、数据段和bss段。\",\"$> size SimpleSection.o text data bss dec hex filename 224 8 8 240 f0 SimpleSection.o\"]},\"20\":{\"h\":\"3.1 代码段\",\"t\":[\"$> objdump -s -d SimpleSection.o SimpleSection.o: file format elf64-x86-64 Contents of section .text: 0000 f30f1efa 554889e5 4883ec10 897dfc8b ....UH..H....}.. 0010 45fc89c6 488d0500 00000048 89c7b800 E...H......H.... 0020 000000e8 00000000 90c9c3f3 0f1efa55 ...............U 0030 4889e548 83ec10c7 45f80100 00008b15 H..H....E....... 0040 00000000 8b050000 000001c2 8b45f801 .............E.. 0050 c28b45fc 01d089c7 e8000000 00b80000 ..E............. 0060 0000c9c3 .... Contents of section .data: 0000 54000000 55000000 T...U... Contents of section .rodata: 0000 25640a00 %d.. Contents of section .comment: 0000 00474343 3a202855 62756e74 75203133 .GCC: (Ubuntu 13 0010 2e322e30 2d323375 62756e74 75342920 .2.0-23ubuntu4) 0020 31332e32 2e3000 13.2.0. Contents of section .note.gnu.property: 0000 04000000 10000000 05000000 474e5500 ............GNU. 0010 020000c0 04000000 03000000 00000000 ................ Contents of section .eh_frame: 0000 14000000 00000000 017a5200 01781001 .........zR..x.. 0010 1b0c0708 90010000 1c000000 1c000000 ................ 0020 00000000 2b000000 00450e10 8602430d ....+....E....C. 0030 06620c07 08000000 1c000000 3c000000 .b..........<... 0040 00000000 39000000 00450e10 8602430d ....9....E....C. 0050 06700c07 08000000 .p...... Disassembly of section .text: 0000000000000000 <func1>: 0: f3 0f 1e fa endbr64 4: 55 push %rbp 5: 48 89 e5 mov %rsp,%rbp 8: 48 83 ec 10 sub $0x10,%rsp c: 89 7d fc mov %edi,-0x4(%rbp) f: 8b 45 fc mov -0x4(%rbp),%eax 12: 89 c6 mov %eax,%esi 14: 48 8d 05 00 00 00 00 lea 0x0(%rip),%rax # 1b <func1+0x1b> 1b: 48 89 c7 mov %rax,%rdi 1e: b8 00 00 00 00 mov $0x0,%eax 23: e8 00 00 00 00 call 28 <func1+0x28> 28: 90 nop 29: c9 leave 2a: c3 ret 000000000000002b <main>: 2b: f3 0f 1e fa endbr64 2f: 55 push %rbp 30: 48 89 e5 mov %rsp,%rbp 33: 48 83 ec 10 sub $0x10,%rsp 37: c7 45 f8 01 00 00 00 movl $0x1,-0x8(%rbp) 3e: 8b 15 00 00 00 00 mov 0x0(%rip),%edx # 44 <main+0x19> 44: 8b 05 00 00 00 00 mov 0x0(%rip),%eax # 4a <main+0x1f> 4a: 01 c2 add %eax,%edx 4c: 8b 45 f8 mov -0x8(%rbp),%eax 4f: 01 c2 add %eax,%edx 51: 8b 45 fc mov -0x4(%rbp),%eax 54: 01 d0 add %edx,%eax 56: 89 c7 mov %eax,%edi 58: e8 00 00 00 00 call 5d <main+0x32> 5d: b8 00 00 00 00 mov $0x0,%eax 62: c9 leave 63: c3 ret\",\"提示\",\"-s: 将所有段的内容以十六进制的方式打印 -d: 将所有包含指令的段反汇编\"]},\"21\":{\"h\":\"3.2 数据段和只读数据段\",\"t\":[\"提示\",\".data section: 已初始化的全局变量和局部静态变量\",\"SimpleSection.c代码中一共有两个这样的变量(global_init_var, static_var),所以.data段的大小正好为8个字节。\",\"提示\",\".rodata section: 存放只读数据(const变量,字符串字面量)\",\"SimpleSection.c代码中用在调用printf时用到了字符字面量\\\"%d\\\\n\\\",它是一种只读数据,所以它被放到了.rodata段。所以.rodata段的大小正好为四字节(字符串结尾包含字符串结束符)。\"]},\"22\":{\"h\":\"3.3 bss段\",\"t\":[\"提示\",\".bss section: 未初始化的全局变量和局部静态变量(默认值为0),初始化为0的全局变量和局部静态变量\",\"SimpleSection.c代码中一共有两个这样的变量(global_uninit_var, static_var2),所以.data段的大小正好为8个字节。\",\"提示\",\"可以给gcc选项加入-fcommon使未初始化的全局变量被定义为一个\\\"COMMON\\\"符号，注意对于初始化为0的全局变量则不行。\",\"$> gcc -c SimpleSection.c -fcommon $> readelf -s SimpleSection.o Symbol table '.symtab' contains 13 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000000000 0 FILE LOCAL DEFAULT ABS SimpleSection.c 2: 0000000000000000 0 SECTION LOCAL DEFAULT 1 .text 3: 0000000000000000 0 SECTION LOCAL DEFAULT 3 .data 4: 0000000000000000 0 SECTION LOCAL DEFAULT 4 .bss 5: 0000000000000000 0 SECTION LOCAL DEFAULT 5 .rodata 6: 0000000000000004 4 OBJECT LOCAL DEFAULT 3 static_var.1 7: 0000000000000000 4 OBJECT LOCAL DEFAULT 4 static_var2.0 8: 0000000000000000 4 OBJECT GLOBAL DEFAULT 3 global_init_var 9: 0000000000000004 4 OBJECT GLOBAL DEFAULT COM global_uninit_var 10: 0000000000000000 43 FUNC GLOBAL DEFAULT 1 func1 11: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND printf 12: 000000000000002b 57 FUNC GLOBAL DEFAULT 1 main\"]},\"23\":{\"h\":\"3.3 其它段\",\"t\":[\"其它段\"]},\"24\":{\"h\":\"4. ELF文件结构描述\",\"t\":[\"注\",\"ELF目标文件的最前部是ELF文件头（ELF Header）,它包含了描述整个文件的基本属性。仅接着是ELF各个段。其中ELF文件中与段有关的重要结构就是段表（Section Header Table），该表描述了ELF文件包含的所有段的信息，比如每个段的段名、段的长度、在文件中的偏移、读写权限及段的其它属性。\",\"ELF文件结构\"]},\"25\":{\"h\":\"4.1 文件头\",\"t\":[\"通过使用readelf -h指令即可查看ELF文件头\",\"$> readelf -h SimpleSection.o ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: REL (Relocatable file) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x0 Start of program headers: 0 (bytes into file) Start of section headers: 1032 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 0 (bytes) Number of program headers: 0 Size of section headers: 64 (bytes) Number of section headers: 14 Section header string table index: 13\",\"ELF文件头定义了\",\"ELF魔数\",\"文件机器字节长度\",\"数据存储方式\",\"版本\",\"运行平台\",\"ABI版本\",\"ELF重定位类型\",\"硬件平台\",\"硬件平台版本\",\"入口地址\",\"程序入口和长度\",\"段表位置和长度\",\"段数量\",\"// /usr/include/elf.h typedef struct { unsigned char e_ident[EI_NIDENT]; /* Magic number and other info */ Elf64_Half e_type; /* Object file type */ Elf64_Half e_machine; /* Architecture */ Elf64_Word e_version; /* Object file version */ Elf64_Addr e_entry; /* Entry point virtual address */ Elf64_Off e_phoff; /* Program header table file offset */ Elf64_Off e_shoff; /* Section header table file offset */ Elf64_Word e_flags; /* Processor-specific flags */ Elf64_Half e_ehsize; /* ELF header size in bytes */ Elf64_Half e_phentsize; /* Program header table entry size */ Elf64_Half e_phnum; /* Program header table entry count */ Elf64_Half e_shentsize; /* Section header table entry size */ Elf64_Half e_shnum; /* Section header table entry count */ Elf64_Half e_shstrndx; /* Section header string table index */ } Elf64_Ehdr;\",\"ELF文件头结构成员含义\"]},\"26\":{\"h\":\"4.1.2 文件类型\",\"t\":[\"文件类型\"]},\"27\":{\"h\":\"4.1.3 机器类型\",\"t\":[\"机器类型\"]},\"28\":{\"h\":\"4.2 段表\",\"t\":[\"提示\",\"段表用于保存这些段的基本属性结构。\",\"使用objdump -h来查看ELF文件中包含的段，但是只是把ELF文件中关键的段显示了出来。可以使用readelf -S指令来显示ELF文件的各种段表结构\",\"$> readelf -S SimpleSection.o There are 14 section headers, starting at offset 0x408: Section Headers: [Nr] Name Type Address Offset Size EntSize Flags Link Info Align [ 0] NULL 0000000000000000 00000000 0000000000000000 0000000000000000 0 0 0 [ 1] .text PROGBITS 0000000000000000 00000040 0000000000000064 0000000000000000 AX 0 0 1 [ 2] .rela.text RELA 0000000000000000 000002e8 0000000000000078 0000000000000018 I 11 1 8 [ 3] .data PROGBITS 0000000000000000 000000a4 0000000000000008 0000000000000000 WA 0 0 4 [ 4] .bss NOBITS 0000000000000000 000000ac 0000000000000004 0000000000000000 WA 0 0 4 [ 5] .rodata PROGBITS 0000000000000000 000000ac 0000000000000004 0000000000000000 A 0 0 1 [ 6] .comment PROGBITS 0000000000000000 000000b0 0000000000000027 0000000000000001 MS 0 0 1 [ 7] .note.GNU-stack PROGBITS 0000000000000000 000000d7 0000000000000000 0000000000000000 0 0 1 [ 8] .note.gnu.pr[...] NOTE 0000000000000000 000000d8 0000000000000020 0000000000000000 A 0 0 8 [ 9] .eh_frame PROGBITS 0000000000000000 000000f8 0000000000000058 0000000000000000 A 0 0 8 [10] .rela.eh_frame RELA 0000000000000000 00000360 0000000000000030 0000000000000018 I 11 9 8 [11] .symtab SYMTAB 0000000000000000 00000150 0000000000000138 0000000000000018 12 8 8 [12] .strtab STRTAB 0000000000000000 00000288 0000000000000060 0000000000000000 0 0 1 [13] .shstrtab STRTAB 0000000000000000 00000390 0000000000000074 0000000000000000 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), D (mbind), l (large), p (processor specific)\",\"提示\",\"段表的结构以Elf64_Shdr结构的数组形式进行存储,数组元素个数为段个数，每个Elf64_Shdr对应一个段属性描述。所以每个Elf64_Shdr又被称为段描述符。 第一个元素是无效段描述符，它的类型为\\\"NULL\\\"，除此之外每个描述符对应一个段。所以SimpleSection.o共有10个有效段。\"]},\"29\":{\"h\":\"4.2.1 段描述符的结构\",\"t\":[\"// /usr/include/elf.h typedef struct { Elf64_Word sh_name; /* Section name (string tbl index) */ Elf64_Word sh_type; /* Section type */ Elf64_Xword sh_flags; /* Section flags */ Elf64_Addr sh_addr; /* Section virtual addr at execution */ Elf64_Off sh_offset; /* Section file offset */ Elf64_Xword sh_size; /* Section size in bytes */ Elf64_Word sh_link; /* Link to another section */ Elf64_Word sh_info; /* Additional section information */ Elf64_Xword sh_addralign; /* Section alignment */ Elf64_Xword sh_entsize; /* Entry size if section holds table */ } Elf64_Shdr;\",\" 段表结构解析\",\"注\",\"elf文件头中指出了段表位于文件的偏移(Elf64_Ehdr的e_shoff元素)为1032(0x408)，代码段(.text)位于elf文件头后所以elf文件头的大小正好为代码段的偏移0x40(64)字节，段表的最后一个元素(.shstrtab)的偏移量为0x390文件大小为0x74。而0x408 = 0x390 + 0x74 + 0x04正好是段表在elf文件中的偏移(之所以+0x04是因为内存对齐的原因)。\"]},\"30\":{\"h\":\"4.2.1.1 段的类型(sh_type)\",\"t\":[\"提示\",\"对于编译器和链接器来说，主要决定段的属性的是段的类型(sh_type)和段的标志位(sh_flags)\",\"段的类型\"]},\"31\":{\"h\":\"4.2.1.2 段的标志位(sh_flags)\",\"t\":[\"提示\",\"决定了该段在进程虚拟地址空间中的属性，比如是否可写，是否可执行等。\",\"段的标志位\"]},\"32\":{\"h\":\"4.2.1.3 段的链接信息(sh_link、sh_info)\",\"t\":[\"提示\",\"只有段的类型是与链接(动态链接、静态链接、重定位表、符号表等)相关时这两个成员才会有意义。\",\"段的链接信息\"]},\"33\":{\"h\":\"4.3 重定位表\",\"t\":[\"提示\",\"在SimpleSection.o中有一个叫做\\\".rela.text\\\"的段, 它的类型(sh_type)为\\\"SH_RELA\\\", 也就是说它是一个重定位表。 对于每个需要重定位的段，都会有一个相应的重定位表。比如\\\".rela.text\\\"是\\\".text\\\"的重定位表。 一个重定位表同时也是elf的一个段, 那么这个段的类型(sh_type)就是\\\"SHL_REL\\\", 它的\\\"sh_link\\\"表示符号表的下标, \\\"sh_info\\\"表示它作用于那个段。\",\"重定位表\"]},\"34\":{\"h\":\"4.4 字符串表\",\"t\":[\"提示\",\"elf文件中用到了很多字符串，比如段名、变量名等。因为字符串的长度往往是不定的，所以用固定的结构来表示它比较困难。一种常见的做法是把字符串集中起来存放到一个表，然后使用字符串在表中的偏移来引用字符串。 .strtab: 字符串表(string table) .shstrtab: 段表字符串表(section header string table)\"]},\"35\":{\"h\":\"5. 链接的接口-符号(Symbol)\",\"t\":[\"提示\",\"链接的过程就是把多个不同的目标文件之间相互衔接的过程。这个相互衔接的过程实际上是目标文件之间对地址的引用。 比如文件B用到了目标A中的函数\\\"foo\\\", 那么我们就称文件A定义(define)了函数\\\"foo\\\", 称目标文件B引用(refrence)了目标文件A中的函数\\\"foo\\\"。这两个概念同样适用于变量。 在链接中将函数和变量称为符号(Symbol), 函数名和变量名称为符号名(Symbol Name)符号是链接中的粘合剂, 整个链接的过程基于符号才能正确完成。 每一个目标文件都有一个相应的符号表(Symbol Table)对符号进行管理, 该表记录了目标文件中所用的所有符号。每个定义的符号都有一个对应的值, 叫做符号值(Symbol Value), 对于变量和函数来说, 符号值就是它们的地址。除了函数和变量外，还存在其它几种不常用的符号。\",\"定义在目标文件的全局符号，可以被其它目标文件引用\",\"在本文件中引用的全局符号，却没有在本文件中定义，一般叫做外部符号(External Symbol)，也被称为符号引用\",\"段名，由编译器生成，它的值就是该段的起始地址。(.text, .data)\",\"局部符号，只在编译器内部可见。(SimpleSection.o文件的static_var和static_var2)\",\"行号信息，即目标文件指令与源代码中代码行的对应关系，可选。\",\"使用nm指令查看符号结果\",\"$> nm SimpleSection.o 0000000000000000 T func1 0000000000000000 D global_init_var 0000000000000004 C global_uninit_var 000000000000002b T main U printf 0000000000000004 d static_var.1 0000000000000000 b static_var2.0\"]},\"36\":{\"h\":\"5.1 ELF符号表结构\",\"t\":[\"// /usr/include/elf.h typedef struct { Elf64_Word st_name; /* Symbol name (string tbl index) */ unsigned char st_info; /* Symbol type and binding */ unsigned char st_other; /* Symbol visibility */ Elf64_Section st_shndx; /* Section index */ Elf64_Addr st_value; /* Symbol value */ Elf64_Xword st_size; /* Symbol size */ } Elf64_Sym;\",\"ELF符号表结构\"]},\"37\":{\"h\":\"5.1.1 符号类型和绑定类型(st_info)\",\"t\":[\"提示\",\"低4位表示符号类型(Symbol Type), 高28位表示符号绑定信息(Symbol Binding)\",\"符号类型和绑定\"]},\"38\":{\"h\":\"5.1.2 符号所在段(st_shndx)\",\"t\":[\"提示\",\"如果符号定义在本目标文件中，那么这个成员表示符号所在的段在段表中的下标，如果符号不是定义在本目标文件中，或者对于有些特殊符号，sh_shndx的值会有些特殊。\",\"符号所在段\"]},\"39\":{\"h\":\"5.1.3 符号值(st_value)\",\"t\":[\"提示\",\"每个符号都有一个对应的值，如果这个符号是一个函数或变量的定义，那么符号的值就是这个函数或变量的地址。\",\"在目标文件中，如果是符号的定义并且该符号不是“COMMON块”类型的，则st_value表示该符号在段中的偏移。比如SimpleSection.o中的\\\"func1\\\"、\\\"main\\\"、\\\"global_init_var\\\"。\",\"在目标文件中，如果符号是\\\"COMMON块\\\"，st_value表示该符号的对齐属性。比如SimpleSection.o中的\\\"global_uninit_var\\\"。\",\"在可执行文件中，st_value表示符号的虚拟地址。 使用readelf -s查看符号表\",\"# 注意编译时使用了-fcommon编译选项 $> readelf -s SimpleSection.o Symbol table '.symtab' contains 13 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000000000 0 FILE LOCAL DEFAULT ABS SimpleSection.c 2: 0000000000000000 0 SECTION LOCAL DEFAULT 1 .text 3: 0000000000000000 0 SECTION LOCAL DEFAULT 3 .data 4: 0000000000000000 0 SECTION LOCAL DEFAULT 4 .bss 5: 0000000000000000 0 SECTION LOCAL DEFAULT 5 .rodata 6: 0000000000000004 4 OBJECT LOCAL DEFAULT 3 static_var.1 7: 0000000000000000 4 OBJECT LOCAL DEFAULT 4 static_var2.0 8: 0000000000000000 4 OBJECT GLOBAL DEFAULT 3 global_init_var 9: 0000000000000004 4 OBJECT GLOBAL DEFAULT COM global_uninit_var 10: 0000000000000000 43 FUNC GLOBAL DEFAULT 1 func1 11: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND printf 12: 000000000000002b 57 FUNC GLOBAL DEFAULT 1 main\"]},\"40\":{\"h\":\"5.2 特殊符号\",\"t\":[\"// SpecialSymbol.c #include <stdio.h> extern char __executable_start[]; extern char etext[], _etext[], __etext[]; extern char edata[], _edata[]; extern char end[], _end[]; int main() { printf(\\\"Executable Start %X\\\\n\\\", __executable_start); printf(\\\"Text End %X %X %X\\\\n\\\", etext, _etext, __etext); printf(\\\"Data End %X %X\\\\n\\\", edata, _edata); printf(\\\"Executable End %X %X\\\\n\\\", end, _end); return 0; }\",\"$> ./SpecialSymbol Executable Start 9004000 Text End 9005205 9005205 9005205 Data End 9008010 9008010 Executable End 9008018 9008018\",\"提示\",\"__executable_start: 程序起始地址，注意不是入口地址。 etext, _etext, __etext: 代码段结束地址。 edata, edata: 数据段结束地址。 end, end: 程序结束地址。 地址都为虚拟地址。 ### 5.3 符号修饰与函数签名 [!tip] UNIX下c语言规定：c语言源代码文件中的所有全局的变量和函数经过编译后，相应的符号名前加上下划线\\\"\\\"。比如一个c函数\\\"foo\\\"，当它经过编译后的符号名就为\\\"foo\\\"。但是当程序规模很大时仍然会出现明明冲突的问题，于是像c++增加了==命名空间(namespace)==的方法来解决多模块的符号冲突问题。 现在的Linux下的GCC编译器中，默认情况下已经去掉了在c语言符号前加\\\"\\\"的这种方式。GCC编译器也可以通过==\\\"-fleading-underscore\\\"或者\\\"-fno-leading-underscore\\\"==来打开和关闭是否在c语言符号前加上\\\"\\\"\"]},\"41\":{\"h\":\"5.3.1 c++ 符号修饰\",\"t\":[\"int func(int); float func(float); class C { int func(int); class C2{ int func(int); }; }; namespace N { int func(int); class C { int func(int); }; };\",\"注\",\"函数签名(Function Signature): 包含了一个函数的信息，包括函数名、参数类型、它所在的类和名称空间及其它信息。 名称修饰(Name Decoration): 在编译器及连接器处理符号时，使用某种名称修饰的方法，使得每个函数签名对应一个修饰后名称(Decorated Name)。\",\"c++名称修饰\",\"提示\",\"所有符号都以\\\"_Z\\\"开头，对于嵌套的名字(在名称空间或在类里面的)，后面紧跟\\\"N\\\"，然后是各个名称空间和类的名字，每个名字前是名字字符串长度，再以\\\"E\\\"结尾。比如N::C::func经过名称修饰后就是_ZN1N1C4funcE。对于一个函数来说，它的参数列表紧跟在\\\"E\\\"后面，对于int类型来说,字母就是\\\"i\\\"。所以整个N::C::func(int)函数签名经过修饰为_ZN1N1C4funcEi。\",\"注\",\"可以通过\\\"c++filt\\\"的工具来解析被修饰的名称。\",\"$> c++filt _ZN1N1C4funcEi N::C::func(int)\",\"提示\",\"c++中的全局变量和静态变量也有同样的机制。比如foo命名空间下的bar变量(foo::bar)，经过修饰后的名字为: _ZN3far3barE。可以注意到变量的类型并没有加入到修饰后的名称中去。所以不论这个变量是整形还是浮点型甚至是全局对象，它的名称都是一样的。 名称修饰机制也被用来防止静态变量的名字冲突。比如main()函数里面的静态变量foo，和func()函数的静态变量foo会被GCC编译器会将他们修饰为：_ZZ4mainE3foo和_ZZ4funcE3foo。\"]},\"42\":{\"h\":\"5.4 extern \\\"C\\\"\",\"t\":[\"注\",\"c++编译器会将extern \\\"C\\\"的大括号内部的代码当作c语言代码处理。所以c++名称修饰会对其不起作用。\",\"// func和var不会被c++的名称修饰规则修饰。 extern \\\"C\\\" { int func(int); int var; } // 或者写成 extern \\\"C\\\" int func(int); extern \\\"C\\\" int var;\",\"// ManualNameMangling.cc // g++ ManualNameMangling.cc -o ManualNameMangling #include <stdio.h> namespace myname { int var = 42; } extern \\\"C\\\" double _ZN6myname3varE; int main() { printf(\\\"%d\\\\n\\\", myname::var); return 0; }\",\"$> ./ManualNameMangling 42\"]},\"43\":{\"h\":\"5.5 强符合与弱符号\",\"t\":[\"注\",\"深入理解计算机系统(csapp)一书中也有讲解。了解本小节将有助于帮助理解链接过程中为什么会出现重复定义的问题。\",\"// a.c int global = 1; // b.c int global = 2; // 由于global重复定义链接时将会出现重定义错误。\",\"符号的定义通常被称为强符号(Strong Symbol)。有些符号的定义也被称为弱符号(Weak Symbol)\",\"注\",\"c/c++编译器默认函数和初始化了的全局变量为强符号，未初始化的全局变量为弱符号。可以通过GCC编译器提供的\\\"attribute((weak))\\\" 来定义任何一个强符号为弱符号。 需要注意的是：强符号和弱符号都是针对定义的，不是针对符号的引用。\",\"extern int ext; // 这是一个引用，所以即不是强符号也不是弱符号。 int weak; // 弱符号 int strong = 1; // 强符号 __attribute__((weak)) weak2 = 2; // 弱符号 // 强符号 int main() { return 0; }\",\"连接器按如下规则处理与选择被多次定义的全局符号\",\"提示\",\"不允许被多次定义(既不同的目标文件中不能有同名的强符号)，如果出现多个强符号定义，则链接器报符号重定义错误。\",\"如果一个符号在某个文件中是强符号，在其它文件为弱符号，那么选强符号。\",\"如果一个符号在所有目标文件中都是弱符号，那么选其中占用空间最大的一个。比如文件A声明符号(未初始化)global为int(4byte)，目标文件B声明符号(未初始化)global为double(8byte)。当A和B链接时，符号global占8byte。(最好不要这样负责会出现一些意想不到的bug，而且很难发现)\"]},\"44\":{\"h\":\"弱引用和强引用\",\"t\":[\"提示\",\"强引用(Strong Reference): 对外部目标文件的符号引用在目标文件被最终链接成可执行文件时，他们需要被正确决议，如果没有找到该符号的定义，链接器就会报服啊后未定义的错误，这种被称为强引用(Strong Reference)。弱引用(Weak Reference): 在处理弱引用时，如果该符号有定义，则连接器将该符号的引用决议；如果该符号未被定义，则连接器对于该引用不报错。 对于未定义的弱引用，连接器默认其为0，或者是一个特殊的值，以便于程序代码能够识别。\",\"// 通过使用__attribute__ ((weakref))声明对一个外部函数的引用为弱引用。 __attribute__ ((weakref)) void foo(); int main() { if (foo) foo(); }\",\"// pthread.c // 通过使用__attribute__ ((weakref))判断是否链接到pthread库。 #include <stdio.h> #include <pthread.h> int pthread_create(pthread_t *, const pthread_attr_t *, void *(*)(void *), void *) __attribute__ ((weak)); int main() { if (pthread_create) { printf(\\\"This is multi-thread version!\\\\n\\\"); } else { printf(\\\"This is single-thread version!\\\\n\\\"); } }\",\"$> gcc pthread.c -o pt $> ./pt This is single-thread version! $> gcc pthread.c -o pt -lpthread $> ./pt This is multi-thread version!\"]},\"45\":{\"h\":\"5.6 调试信息\",\"t\":[\"注\",\"可以使用readelf查看debug相关的段\"]},\"46\":{\"h\":\"第三章 静态链接\",\"t\":[\"// a.c extern int shared; int main() { int a = 100; swap(&a, &shared); return 0; } // b.c int shared = 1; void swap(int *a, int *b) { *a ^= *b ^= *a ^= *b; }\",\"$> gcc -c a.c b.c -O2\"]},\"47\":{\"h\":\"1. 空间与地址分配\",\"t\":[\"注\",\"链接的过程就是将几个输入目标文件加工合并成一个输出文件的过程。\"]},\"48\":{\"h\":\"1.1 按序叠加\",\"t\":[\"注\",\"什么是按序叠加？ 就是将各个目标文件依次合并。但是这样会有些问题，当输入文件很多时，如果每个段都分别有.text段、.data段和.bss段，那最后输出文件将会有成百上千零散的段。这种做法是很浪费内存空间的（主要原因是内存对齐），对于x86的硬件来说，段的装载地址和空间的对齐单位是页，也就是4096字节。就算一个段只有1字节的大小，那这个段也要占据4096字节的内存大小。这会导致大量的内存碎片。\",\"按序叠加内存分配\"]},\"49\":{\"h\":\"1.2 相似段合并\",\"t\":[\"注\",\"什么是相似段合并？ 就是将相同性质的段进行合并，比如将所有输入文件的\\\".text\\\"合并到输出文件的\\\".text\\\"段，接着是\\\".data\\\"段，\\\".bss\\\"段等。\",\"相似段合并\",\"重要\",\".bss段在目标文件和可执行文件中不占用文件的空间，但是它在装载时占用地址空间。所以链接器在合并各个段的同时，也将\\\".bss\\\"段合并，同时分配虚拟空间。 关于地址和空间的两个含义：\",\"输出的可执行文件中的空间。\",\"装载后的虚拟地址中的虚拟地址空间。 对于\\\".text\\\"和\\\".data\\\"，它们在文件中和虚拟地址都要分配空间，对于\\\".bss\\\"这样的段，分配空间只局限与虚拟地址空间，因为它在文件中并没有内容。\",\"重要\",\"两步链接\",\"空间与地址分配 扫描所有的输入目标文件，并且获得它们的各个段的长度、属性和位置，并且将输入目标文件中的符号表中所有的符号定义和符号引用收集起来，统一放到一个全局符号表。这一步连接器将能够获得所有输入目标文件的段长度，并且将它们合并，计算输出文件中各个段合并后的长度和位置，并建立映射关系。\",\"符号解析与重定位 使用上一步中收集到的所有信息，读取输入文件中段的数据、重定位信息，并且进行符号解析与重定位、调整代码中的地址等。\",\"使用objdump指令查看链接前后的地址分配情况。\",\"# VMA: 虚拟地址 LMA: 加载地址 $> objdump -h a.o a.o: file format elf64-x86-64 Sections: Idx Name Size VMA LMA File off Algn 0 .text 00000058 0000000000000000 0000000000000000 00000040 2**0 CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 1 .data 00000000 0000000000000000 0000000000000000 00000098 2**0 CONTENTS, ALLOC, LOAD, DATA 2 .bss 00000000 0000000000000000 0000000000000000 00000098 2**0 ALLOC 3 .comment 00000027 0000000000000000 0000000000000000 00000098 2**0 CONTENTS, READONLY 4 .note.GNU-stack 00000000 0000000000000000 0000000000000000 000000bf 2**0 CONTENTS, READONLY 5 .note.gnu.property 00000020 0000000000000000 0000000000000000 000000c0 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 6 .eh_frame 00000038 0000000000000000 0000000000000000 000000e0 2**3 CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA $> objdump -h b.o b.o: file format elf64-x86-64 Sections: Idx Name Size VMA LMA File off Algn 0 .text 0000004f 0000000000000000 0000000000000000 00000040 2**0 CONTENTS, ALLOC, LOAD, READONLY, CODE 1 .data 00000004 0000000000000000 0000000000000000 00000090 2**2 CONTENTS, ALLOC, LOAD, DATA 2 .bss 00000000 0000000000000000 0000000000000000 00000094 2**0 ALLOC 3 .comment 00000027 0000000000000000 0000000000000000 00000094 2**0 CONTENTS, READONLY 4 .note.GNU-stack 00000000 0000000000000000 0000000000000000 000000bb 2**0 CONTENTS, READONLY 5 .note.gnu.property 00000020 0000000000000000 0000000000000000 000000c0 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 6 .eh_frame 00000038 0000000000000000 0000000000000000 000000e0 2**3 CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA $> objdump -h ab ab: file format elf64-x86-64 Sections: Idx Name Size VMA LMA File off Algn 0 .interp 0000001c 0000000000000318 0000000000000318 00000318 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA 1 .note.gnu.property 00000030 0000000000000338 0000000000000338 00000338 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 2 .note.gnu.build-id 00000024 0000000000000368 0000000000000368 00000368 2**2 CONTENTS, ALLOC, LOAD, READONLY, DATA 3 .note.ABI-tag 00000020 000000000000038c 000000000000038c 0000038c 2**2 CONTENTS, ALLOC, LOAD, READONLY, DATA 4 .gnu.hash 00000024 00000000000003b0 00000000000003b0 000003b0 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 5 .dynsym 000000a8 00000000000003d8 00000000000003d8 000003d8 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 6 .dynstr 000000a3 0000000000000480 0000000000000480 00000480 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA 7 .gnu.version 0000000e 0000000000000524 0000000000000524 00000524 2**1 CONTENTS, ALLOC, LOAD, READONLY, DATA 8 .gnu.version_r 00000040 0000000000000538 0000000000000538 00000538 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 9 .rela.dyn 000000c0 0000000000000578 0000000000000578 00000578 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 10 .rela.plt 00000018 0000000000000638 0000000000000638 00000638 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 11 .init 0000001b 0000000000001000 0000000000001000 00001000 2**2 CONTENTS, ALLOC, LOAD, READONLY, CODE 12 .plt 00000020 0000000000001020 0000000000001020 00001020 2**4 CONTENTS, ALLOC, LOAD, READONLY, CODE 13 .plt.got 00000010 0000000000001040 0000000000001040 00001040 2**4 CONTENTS, ALLOC, LOAD, READONLY, CODE 14 .plt.sec 00000010 0000000000001050 0000000000001050 00001050 2**4 CONTENTS, ALLOC, LOAD, READONLY, CODE 15 .text 00000190 0000000000001060 0000000000001060 00001060 2**4 CONTENTS, ALLOC, LOAD, READONLY, CODE 16 .fini 0000000d 00000000000011f0 00000000000011f0 000011f0 2**2 CONTENTS, ALLOC, LOAD, READONLY, CODE 17 .rodata 00000004 0000000000002000 0000000000002000 00002000 2**2 CONTENTS, ALLOC, LOAD, READONLY, DATA 18 .eh_frame_hdr 0000003c 0000000000002004 0000000000002004 00002004 2**2 CONTENTS, ALLOC, LOAD, READONLY, DATA 19 .eh_frame 000000cc 0000000000002040 0000000000002040 00002040 2**3 CONTENTS, ALLOC, LOAD, READONLY, DATA 20 .init_array 00000008 0000000000003db8 0000000000003db8 00002db8 2**3 CONTENTS, ALLOC, LOAD, DATA 21 .fini_array 00000008 0000000000003dc0 0000000000003dc0 00002dc0 2**3 CONTENTS, ALLOC, LOAD, DATA 22 .dynamic 000001f0 0000000000003dc8 0000000000003dc8 00002dc8 2**3 CONTENTS, ALLOC, LOAD, DATA 23 .got 00000048 0000000000003fb8 0000000000003fb8 00002fb8 2**3 CONTENTS, ALLOC, LOAD, DATA 24 .data 00000014 0000000000004000 0000000000004000 00003000 2**3 CONTENTS, ALLOC, LOAD, DATA 25 .bss 00000004 0000000000004014 0000000000004014 00003014 2**0 ALLOC 26 .comment 00000026 0000000000000000 0000000000000000 00003014 2**0 CONTENTS, READONLY\"]},\"50\":{\"h\":\"1.3 符号地址的确定\",\"t\":[\"注\",\"在第一步的扫描和空间分配阶段，各个段在链接后的虚拟地址空间已经确定。比如\\\".text\\\"段的起始地址为0x0000000000001060，\\\".data\\\"段的起始地址为0x0000000000004000。因为各个符号在段内的相对位置时固定的，所以这时\\\"main\\\"、\\\"shared\\\"和\\\"swap\\\"的地址也已经确定了，连接器通过给每个符号加上一个偏移量，使它们能够调整到正确的虚拟地址。比如我们假设\\\"a.o\\\"中的\\\"main\\\"函数相对于\\\"a.o\\\"的\\\".text\\\"段的偏移量为X，但是经过链接合并后，\\\"a.o\\\"的\\\".text\\\"段位于虚拟地址空间0x0000000000001060(这里是链接成可执行文件ab后在可执行文件ab中的偏移量)，那么\\\"main\\\"函数的虚拟地址应该是0x0000000000001060+X。\"]},\"51\":{\"h\":\"2. 符号解析与重定位\"},\"52\":{\"h\":\"2.1 重定位\",\"t\":[\"注\",\"使用objdump -d查看反汇编结果\",\"$> objdump -d a.o a.o: file format elf64-x86-64 Disassembly of section .text.startup: 0000000000000000 <main>: 0: f3 0f 1e fa endbr64 4: 48 83 ec 18 sub $0x18,%rsp 8: 48 8d 35 00 00 00 00 lea 0x0(%rip),%rsi # f <main+0xf> 将shared地址写入第二个参数 f: 64 48 8b 04 25 28 00 mov %fs:0x28,%rax 16: 00 00 18: 48 89 44 24 08 mov %rax,0x8(%rsp) 1d: 31 c0 xor %eax,%eax 1f: 48 8d 7c 24 04 lea 0x4(%rsp),%rdi 24: c7 44 24 04 64 00 00 movl $0x64,0x4(%rsp) 2b: 00 2c: e8 00 00 00 00 call 31 <main+0x31> 31: 48 8b 44 24 08 mov 0x8(%rsp),%rax 36: 64 48 2b 04 25 28 00 sub %fs:0x28,%rax 3d: 00 00 3f: 75 07 jne 48 <main+0x48> 41: 31 c0 xor %eax,%eax 43: 48 83 c4 18 add $0x18,%rsp 47: c3 ret 48: e8 00 00 00 00 call 4d <main+0x4d>\",\"由于此时还并没有进行链接（即没有执行链接的第一步：虚拟地址内存分配）所以main的起始地址为0。 shared地址在反汇编代码的0x08字节处标记为0(8:48 8d 35 00 00 00 00 lea 0x0(%rip),%rsi)后面四字节就是该指令的下一条指令的偏移量。 swap调用处的地址在反汇编代码的0x2c字节处同样被标记为0(2c:e8 00 00 00 00 call 31 <main+0x31>)后面四个字节就是被调用函数的相对于调用指令的下一条指令的偏移量。 此时的指令地址时暂时的，真正的地址计算工作留给了连接器。连接器在完成第一步的虚拟内存分配后就可以确定所有符号的虚拟地址了。\"]},\"53\":{\"h\":\"修正后的地址\",\"t\":[\"重要\",\"$> objdump -d ab ab: file format elf64-x86-64 ... # 截取了部分 Disassembly of section .text: 0000000000001060 <main>: 1060: f3 0f 1e fa endbr64 1064: 48 83 ec 18 sub $0x18,%rsp 1068: 48 8d 35 a1 2f 00 00 lea 0x2fa1(%rip),%rsi # 4010 <shared> 106f: 64 48 8b 04 25 28 00 mov %fs:0x28,%rax 1076: 00 00 1078: 48 89 44 24 08 mov %rax,0x8(%rsp) 107d: 31 c0 xor %eax,%eax 107f: 48 8d 7c 24 04 lea 0x4(%rsp),%rdi 1084: c7 44 24 04 64 00 00 movl $0x64,0x4(%rsp) 108b: 00 108c: e8 0f 01 00 00 call 11a0 <swap> 1091: 48 8b 44 24 08 mov 0x8(%rsp),%rax 1096: 64 48 2b 04 25 28 00 sub %fs:0x28,%rax 109d: 00 00 109f: 75 07 jne 10a8 <main+0x48> 10a1: 31 c0 xor %eax,%eax 10a3: 48 83 c4 18 add $0x18,%rsp 10a7: c3 ret 10a8: e8 a3 ff ff ff call 1050 <__stack_chk_fail@plt> 10ad: 0f 1f 00 nopl (%rax) ...\",\"经过修正后\\\"shared\\\"和\\\"swap\\\"地址分别为0x4010和0x11a0\",\"shared的地址: 0x106f + 0x2fa1 = 0x4010 1068: 48 8d 35 a1 2f 00 00 lea 0x2fa1(%rip),%rsi 106f: 64 48 8b 04 25 28 00 mov %fs:0x28,%rax swap的地址: 0x1091 + 0x010f = 0x11a0 108c: e8 0f 01 00 00 call 11a0 <swap> 1091: 48 8b 44 24 08 mov 0x8(%rsp),%rax\"]},\"54\":{\"h\":\"2.2 重定位表\",\"t\":[\"注\",\"使用objdump/readelf指令可以查看重定位文件。因为重定位表其实就是elf文件中的一个段，因此又被称为重定位段，比如代码段\\\".text\\\"如果有要重定位的地方，那么会有一个相应的叫\\\".rel.text\\\"的段保存了代码段的重定位表，同理\\\".data\\\"也会有一个叫\\\".rel.data\\\"的段。\",\"# a.o中所有要重定位的地方，既“a.o”所有引用到的外部符号。 $> bjdump -r a.o a.o: file format elf64-x86-64 RELOCATION RECORDS FOR [.text.startup]: OFFSET TYPE VALUE 000000000000000b R_X86_64_PC32 shared-0x0000000000000004 # 这是shared的前一个字节的位置并不是shared的位置 000000000000002d R_X86_64_PLT32 swap-0x0000000000000004 # 和shared一样并不swap的位置 0000000000000049 R_X86_64_PLT32 __stack_chk_fail-0x0000000000000004 RELOCATION RECORDS FOR [.eh_frame]: OFFSET TYPE VALUE 0000000000000020 R_X86_64_PC32 .text.startup $> readelf -r a.o Relocation section '.rela.text.startup' at offset 0x1e8 contains 3 entries: Offset Info Type Sym. Value Sym. Name + Addend 00000000000b 000400000002 R_X86_64_PC32 0000000000000000 shared - 4 00000000002d 000500000004 R_X86_64_PLT32 0000000000000000 swap - 4 000000000049 000600000004 R_X86_64_PLT32 0000000000000000 __stack_chk_fail - 4 Relocation section '.rela.eh_frame' at offset 0x230 contains 1 entry: Offset Info Type Sym. Value Sym. Name + Addend 000000000020 000200000002 R_X86_64_PC32 0000000000000000 .text.startup + 0\",\"每一个被重定位的地方叫一个重定位入口(Relocation Entry)，其中每个重定位表包含了一下信息：\",\"重定位入口的偏移(offset)，表示该入口在要被重定位段中的位置。\",\"该重定位表作用的elf文件中的那个段RELOCATION RECORDS FOR .text.startup。\",\"// 重定位表的结构 typedef struct { Elf64_Addr r_offset; /* Address */ Elf64_Xword r_info; /* Relocation type and symbol index */ } Elf64_Rel;\"]},\"55\":{\"h\":\"2.3 符号解析\"},\"56\":{\"h\":\"2.4 指令修正方式\"},\"57\":{\"h\":\"3. COMMON块\"},\"58\":{\"h\":\"4. c++相关问题\"},\"59\":{\"h\":\"5. 静态库链接\"},\"60\":{\"h\":\"6. 链接过程控制\"},\"61\":{\"h\":\"7. BFD库\"},\"62\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"静态库链接\",{\"0\":{\"59\":1}}],[\"静态链接库\",{\"1\":{\"17\":1}}],[\"静态链接\",{\"0\":{\"11\":1,\"46\":1},\"1\":{\"32\":1}}],[\"指令修正方式\",{\"0\":{\"56\":1}}],[\"既\",{\"1\":{\"54\":1}}],[\"既不同的目标文件中不能有同名的强符号\",{\"1\":{\"43\":1}}],[\"同理\",{\"1\":{\"54\":1}}],[\"同时分配虚拟空间\",{\"1\":{\"49\":1}}],[\"因此又被称为重定位段\",{\"1\":{\"54\":1}}],[\"因为重定位表其实就是elf文件中的一个段\",{\"1\":{\"54\":1}}],[\"因为各个符号在段内的相对位置时固定的\",{\"1\":{\"50\":1}}],[\"因为它在文件中并没有内容\",{\"1\":{\"49\":1}}],[\"因为字符串的长度往往是不定的\",{\"1\":{\"34\":1}}],[\"因为编译器需要使用它们\",{\"1\":{\"7\":1}}],[\"经过修正后\",{\"1\":{\"53\":1}}],[\"经过修饰后的名字为\",{\"1\":{\"41\":1}}],[\"截取了部分\",{\"1\":{\"53\":1}}],[\"修正后的地址\",{\"0\":{\"53\":1}}],[\"真正的地址计算工作留给了连接器\",{\"1\":{\"52\":1}}],[\"此时的指令地址时暂时的\",{\"1\":{\"52\":1}}],[\"即没有执行链接的第一步\",{\"1\":{\"52\":1}}],[\"即目标文件指令与源代码中代码行的对应关系\",{\"1\":{\"35\":1}}],[\"jne\",{\"1\":{\"52\":1,\"53\":1}}],[\"中的\",{\"1\":{\"50\":1}}],[\"各个段在链接后的虚拟地址空间已经确定\",{\"1\":{\"50\":1}}],[\"加载地址\",{\"1\":{\"49\":1}}],[\"虚拟地址内存分配\",{\"1\":{\"52\":1}}],[\"虚拟地址\",{\"1\":{\"49\":1}}],[\"调整代码中的地址等\",{\"1\":{\"49\":1}}],[\"调试信息\",{\"0\":{\"45\":1}}],[\"读取输入文件中段的数据\",{\"1\":{\"49\":1}}],[\"读写权限及段的其它属性\",{\"1\":{\"24\":1}}],[\"并建立映射关系\",{\"1\":{\"49\":1}}],[\"并且进行符号解析与重定位\",{\"1\":{\"49\":1}}],[\"并且将它们合并\",{\"1\":{\"49\":1}}],[\"并且将输入目标文件中的符号表中所有的符号定义和符号引用收集起来\",{\"1\":{\"49\":1}}],[\"并且获得它们的各个段的长度\",{\"1\":{\"49\":1}}],[\"计算输出文件中各个段合并后的长度和位置\",{\"1\":{\"49\":1}}],[\"统一放到一个全局符号表\",{\"1\":{\"49\":1}}],[\"属性和位置\",{\"1\":{\"49\":1}}],[\"扫描所有的输入目标文件\",{\"1\":{\"49\":1}}],[\"两步链接\",{\"1\":{\"49\":1}}],[\"分配空间只局限与虚拟地址空间\",{\"1\":{\"49\":1}}],[\"分段的好处\",{\"1\":{\"18\":1}}],[\"装载后的虚拟地址中的虚拟地址空间\",{\"1\":{\"49\":1}}],[\"装载和库\",{\"0\":{\"4\":1}}],[\"输出的可执行文件中的空间\",{\"1\":{\"49\":1}}],[\"关于地址和空间的两个含义\",{\"1\":{\"49\":1}}],[\"重要\",{\"1\":{\"49\":2,\"53\":1}}],[\"重定位信息\",{\"1\":{\"49\":1}}],[\"重定位表的结构\",{\"1\":{\"54\":1}}],[\"重定位表\",{\"0\":{\"33\":1,\"54\":1},\"1\":{\"32\":1,\"33\":1}}],[\"重定位所做的就是给程序中每个这样的绝对地址引用的地址进行修正\",{\"1\":{\"14\":1}}],[\"重定位入口的偏移\",{\"1\":{\"54\":1}}],[\"重定位入口\",{\"1\":{\"14\":1}}],[\"重定位\",{\"0\":{\"14\":1,\"52\":1},\"1\":{\"14\":1}}],[\"接着是\",{\"1\":{\"49\":1}}],[\"合并到输出文件的\",{\"1\":{\"49\":1}}],[\"什么是相似段合并\",{\"1\":{\"49\":1}}],[\"什么是按序叠加\",{\"1\":{\"48\":1}}],[\"就算一个段只有1字节的大小\",{\"1\":{\"48\":1}}],[\"就是将相同性质的段进行合并\",{\"1\":{\"49\":1}}],[\"就是将各个目标文件依次合并\",{\"1\":{\"48\":1}}],[\"就是\",{\"1\":{\"33\":1}}],[\"主要原因是内存对齐\",{\"1\":{\"48\":1}}],[\"主要决定段的属性的是段的类型\",{\"1\":{\"30\":1}}],[\"那这个段也要占据4096字节的内存大小\",{\"1\":{\"48\":1}}],[\"那最后输出文件将会有成百上千零散的段\",{\"1\":{\"48\":1}}],[\"那么会有一个相应的叫\",{\"1\":{\"54\":1}}],[\"那么\",{\"1\":{\"50\":1}}],[\"那么选其中占用空间最大的一个\",{\"1\":{\"43\":1}}],[\"那么选强符号\",{\"1\":{\"43\":1}}],[\"那么符号的值就是这个函数或变量的地址\",{\"1\":{\"39\":1}}],[\"那么这个成员表示符号所在的段在段表中的下标\",{\"1\":{\"38\":1}}],[\"那么这个段的类型\",{\"1\":{\"33\":1}}],[\"那么我们就称文件a定义\",{\"1\":{\"35\":1}}],[\"那么链接器将会把这个指令的目标地址部分修改为0x1000\",{\"1\":{\"14\":1}}],[\"按序叠加内存分配\",{\"1\":{\"48\":1}}],[\"按序叠加\",{\"0\":{\"48\":1}}],[\"空间与地址分配\",{\"0\":{\"47\":1},\"1\":{\"49\":1}}],[\"^=\",{\"1\":{\"46\":3}}],[\"判断是否链接到pthread库\",{\"1\":{\"44\":1}}],[\"声明对一个外部函数的引用为弱引用\",{\"1\":{\"44\":1}}],[\"以便于程序代码能够识别\",{\"1\":{\"44\":1}}],[\"以便于编译时编译器产生调试用的行号信息及用于编译时产生编译错误或警告时能够显示行号\",{\"1\":{\"7\":1}}],[\"连接器在完成第一步的虚拟内存分配后就可以确定所有符号的虚拟地址了\",{\"1\":{\"52\":1}}],[\"连接器通过给每个符号加上一个偏移量\",{\"1\":{\"50\":1}}],[\"连接器默认其为0\",{\"1\":{\"44\":1}}],[\"连接器按如下规则处理与选择被多次定义的全局符号\",{\"1\":{\"43\":1}}],[\"他们需要被正确决议\",{\"1\":{\"44\":1}}],[\"强引用\",{\"1\":{\"44\":1}}],[\"强符号\",{\"1\":{\"43\":2}}],[\"强符号和弱符号都是针对定义的\",{\"1\":{\"43\":1}}],[\"强符合与弱符号\",{\"0\":{\"43\":1}}],[\"弱引用\",{\"1\":{\"44\":1}}],[\"弱引用和强引用\",{\"0\":{\"44\":1}}],[\"弱符号\",{\"1\":{\"43\":2}}],[\"而且很难发现\",{\"1\":{\"43\":1}}],[\"而0x408\",{\"1\":{\"29\":1}}],[\"最好不要这样负责会出现一些意想不到的bug\",{\"1\":{\"43\":1}}],[\"当输入文件很多时\",{\"1\":{\"48\":1}}],[\"当a和b链接时\",{\"1\":{\"43\":1}}],[\"当它经过编译后的符号名就为\",{\"1\":{\"40\":1}}],[\"未初始化\",{\"1\":{\"43\":2}}],[\"未初始化的全局变量为弱符号\",{\"1\":{\"43\":1}}],[\"未初始化的全局变量和局部静态变量\",{\"1\":{\"18\":1,\"22\":1}}],[\"则连接器对于该引用不报错\",{\"1\":{\"44\":1}}],[\"则连接器将该符号的引用决议\",{\"1\":{\"44\":1}}],[\"则链接器报符号重定义错误\",{\"1\":{\"43\":1}}],[\"则st\",{\"1\":{\"39\":1}}],[\"不允许被多次定义\",{\"1\":{\"43\":1}}],[\"不是针对符号的引用\",{\"1\":{\"43\":1}}],[\"需要注意的是\",{\"1\":{\"43\":1}}],[\"来定义任何一个强符号为弱符号\",{\"1\":{\"43\":1}}],[\"有些符号的定义也被称为弱符号\",{\"1\":{\"43\":1}}],[\"有目标文件a有全局变量var\",{\"1\":{\"14\":1}}],[\"深入理解计算机系统\",{\"1\":{\"43\":1}}],[\"和shared一样并不swap的位置\",{\"1\":{\"54\":1}}],[\"和\",{\"1\":{\"49\":1,\"50\":1,\"53\":1}}],[\"和func\",{\"1\":{\"41\":1}}],[\"和段的标志位\",{\"1\":{\"30\":1}}],[\"后面四个字节就是被调用函数的相对于调用指令的下一条指令的偏移量\",{\"1\":{\"52\":1}}],[\"后面四字节就是该指令的下一条指令的偏移量\",{\"1\":{\"52\":1}}],[\"后面\",{\"1\":{\"41\":1}}],[\"后面紧跟\",{\"1\":{\"41\":1}}],[\"结尾\",{\"1\":{\"41\":1}}],[\"再以\",{\"1\":{\"41\":1}}],[\"开头\",{\"1\":{\"41\":1}}],[\"zz4funce3foo\",{\"1\":{\"41\":1}}],[\"zz4maine3foo和\",{\"1\":{\"41\":1}}],[\"zn6myname3vare\",{\"1\":{\"42\":1}}],[\"zn3far3bare\",{\"1\":{\"41\":1}}],[\"zn1n1c4funcei\",{\"1\":{\"41\":2}}],[\"zn1n1c4funce\",{\"1\":{\"41\":1}}],[\"z\",{\"1\":{\"41\":1}}],[\"zr\",{\"1\":{\"20\":1}}],[\"所有引用到的外部符号\",{\"1\":{\"54\":1}}],[\"所有符号都以\",{\"1\":{\"41\":1}}],[\"所以main的起始地址为0\",{\"1\":{\"52\":1}}],[\"所以这时\",{\"1\":{\"50\":1}}],[\"所以链接器在合并各个段的同时\",{\"1\":{\"49\":1}}],[\"所以即不是强符号也不是弱符号\",{\"1\":{\"43\":1}}],[\"所以c++名称修饰会对其不起作用\",{\"1\":{\"42\":1}}],[\"所以不论这个变量是整形还是浮点型甚至是全局对象\",{\"1\":{\"41\":1}}],[\"所以整个n\",{\"1\":{\"41\":1}}],[\"所以用固定的结构来表示它比较困难\",{\"1\":{\"34\":1}}],[\"所以simplesection\",{\"1\":{\"28\":1}}],[\"所以每个elf64\",{\"1\":{\"28\":1}}],[\"所以它被放到了\",{\"1\":{\"21\":1}}],[\"所以\",{\"1\":{\"21\":2,\"22\":1}}],[\"所以在文件中也不占据空间\",{\"1\":{\"18\":1}}],[\"所以编译器在无法确认var地址的情况下\",{\"1\":{\"14\":1}}],[\"使它们能够调整到正确的虚拟地址\",{\"1\":{\"50\":1}}],[\"使得每个函数签名对应一个修饰后名称\",{\"1\":{\"41\":1}}],[\"使用上一步中收集到的所有信息\",{\"1\":{\"49\":1}}],[\"使用某种名称修饰的方法\",{\"1\":{\"41\":1}}],[\"使用readelf\",{\"1\":{\"39\":1}}],[\"使用nm指令查看符号结果\",{\"1\":{\"35\":1}}],[\"使用size指令查看elf文件的代码段\",{\"1\":{\"19\":1}}],[\"使用objdump指令查看链接前后的地址分配情况\",{\"1\":{\"49\":1}}],[\"使用objdump\",{\"1\":{\"19\":1,\"28\":1,\"52\":1,\"54\":1}}],[\"使用gcc生成可执行文件\",{\"1\":{\"6\":1}}],[\"名称修饰机制也被用来防止静态变量的名字冲突\",{\"1\":{\"41\":1}}],[\"名称修饰\",{\"1\":{\"41\":1}}],[\"参数类型\",{\"1\":{\"41\":1}}],[\"参数可以打印更多信息\",{\"1\":{\"19\":1}}],[\"包括函数名\",{\"1\":{\"41\":1}}],[\"包含了一个函数的信息\",{\"1\":{\"41\":1}}],[\"函数的虚拟地址应该是0x0000000000001060+x\",{\"1\":{\"50\":1}}],[\"函数的静态变量foo会被gcc编译器会将他们修饰为\",{\"1\":{\"41\":1}}],[\"函数相对于\",{\"1\":{\"50\":1}}],[\"函数里面的静态变量foo\",{\"1\":{\"41\":1}}],[\"函数签名经过修饰为\",{\"1\":{\"41\":1}}],[\"函数签名\",{\"1\":{\"41\":1}}],[\"函数名和变量名称为符号名\",{\"1\":{\"35\":1}}],[\"默认情况下已经去掉了在c语言符号前加\",{\"1\":{\"40\":1}}],[\"默认值为0\",{\"1\":{\"18\":1,\"22\":1}}],[\"现在的linux下的gcc编译器中\",{\"1\":{\"40\":1}}],[\"于是像c++增加了==命名空间\",{\"1\":{\"40\":1}}],[\"但是经过链接合并后\",{\"1\":{\"50\":1}}],[\"但是它在装载时占用地址空间\",{\"1\":{\"49\":1}}],[\"但是这样会有些问题\",{\"1\":{\"48\":1}}],[\"但是当程序规模很大时仍然会出现明明冲突的问题\",{\"1\":{\"40\":1}}],[\"但是只是把elf文件中关键的段显示了出来\",{\"1\":{\"28\":1}}],[\"相似段合并\",{\"0\":{\"49\":1},\"1\":{\"49\":1}}],[\"相应的符号名前加上下划线\",{\"1\":{\"40\":1}}],[\"相关时这两个成员才会有意义\",{\"1\":{\"32\":1}}],[\"地址分别为0x4010和0x11a0\",{\"1\":{\"53\":1}}],[\"地址都为虚拟地址\",{\"1\":{\"40\":1}}],[\"地址和空间分配\",{\"1\":{\"13\":1}}],[\"特殊符号\",{\"0\":{\"40\":1}}],[\"类型的\",{\"1\":{\"39\":1}}],[\"如果有要重定位的地方\",{\"1\":{\"54\":1}}],[\"如果每个段都分别有\",{\"1\":{\"48\":1}}],[\"如果该符号未被定义\",{\"1\":{\"44\":1}}],[\"如果该符号有定义\",{\"1\":{\"44\":1}}],[\"如果没有找到该符号的定义\",{\"1\":{\"44\":1}}],[\"如果一个符号在所有目标文件中都是弱符号\",{\"1\":{\"43\":1}}],[\"如果一个符号在某个文件中是强符号\",{\"1\":{\"43\":1}}],[\"如果出现多个强符号定义\",{\"1\":{\"43\":1}}],[\"如果是符号的定义并且该符号不是\",{\"1\":{\"39\":1}}],[\"如果这个符号是一个函数或变量的定义\",{\"1\":{\"39\":1}}],[\"如果符号是\",{\"1\":{\"39\":1}}],[\"如果符号不是定义在本目标文件中\",{\"1\":{\"38\":1}}],[\"如果符号定义在本目标文件中\",{\"1\":{\"38\":1}}],[\"如hello文件\",{\"1\":{\"10\":1}}],[\"高28位表示符号绑定信息\",{\"1\":{\"37\":1}}],[\"低4位表示符号类型\",{\"1\":{\"37\":1}}],[\"行号信息\",{\"1\":{\"35\":1}}],[\"局部符号\",{\"1\":{\"35\":1}}],[\"由于此时还并没有进行链接\",{\"1\":{\"52\":1}}],[\"由于global重复定义链接时将会出现重定义错误\",{\"1\":{\"43\":1}}],[\"由于编译目标文件b时无法确认var的目标地址\",{\"1\":{\"14\":1}}],[\"由编译器生成\",{\"1\":{\"35\":1}}],[\"也会有一个叫\",{\"1\":{\"54\":1}}],[\"也将\",{\"1\":{\"49\":1}}],[\"也就是4096字节\",{\"1\":{\"48\":1}}],[\"也就是说它是一个重定位表\",{\"1\":{\"33\":1}}],[\"也被称为符号引用\",{\"1\":{\"35\":1}}],[\"却没有在本文件中定义\",{\"1\":{\"35\":1}}],[\"定义在目标文件的全局符号\",{\"1\":{\"35\":1}}],[\"还存在其它几种不常用的符号\",{\"1\":{\"35\":1}}],[\"除了函数和变量外\",{\"1\":{\"35\":1}}],[\"除此之外每个描述符对应一个段\",{\"1\":{\"28\":1}}],[\"叫做符号值\",{\"1\":{\"35\":1}}],[\"每一个被重定位的地方叫一个重定位入口\",{\"1\":{\"54\":1}}],[\"每一个目标文件都有一个相应的符号表\",{\"1\":{\"35\":1}}],[\"每个名字前是名字字符串长度\",{\"1\":{\"41\":1}}],[\"每个符号都有一个对应的值\",{\"1\":{\"39\":1}}],[\"每个定义的符号都有一个对应的值\",{\"1\":{\"35\":1}}],[\"每个elf64\",{\"1\":{\"28\":1}}],[\"每个要修正的地方叫一个\",{\"1\":{\"14\":1}}],[\"整个链接的过程基于符号才能正确完成\",{\"1\":{\"35\":1}}],[\"这是shared的前一个字节的位置并不是shared的位置\",{\"1\":{\"54\":1}}],[\"这是一个引用\",{\"1\":{\"43\":1}}],[\"这里是链接成可执行文件ab后在可执行文件ab中的偏移量\",{\"1\":{\"50\":1}}],[\"这一步连接器将能够获得所有输入目标文件的段长度\",{\"1\":{\"49\":1}}],[\"这样的段\",{\"1\":{\"49\":1}}],[\"这会导致大量的内存碎片\",{\"1\":{\"48\":1}}],[\"这种做法是很浪费内存空间的\",{\"1\":{\"48\":1}}],[\"这种被称为强引用\",{\"1\":{\"44\":1}}],[\"这两个概念同样适用于变量\",{\"1\":{\"35\":1}}],[\"这个相互衔接的过程实际上是目标文件之间对地址的引用\",{\"1\":{\"35\":1}}],[\"这个地址修正的过程也被叫做\",{\"1\":{\"14\":1}}],[\"了解本小节将有助于帮助理解链接过程中为什么会出现重复定义的问题\",{\"1\":{\"43\":1}}],[\"了目标文件a中的函数\",{\"1\":{\"35\":1}}],[\"了函数\",{\"1\":{\"35\":1}}],[\"称目标文件b引用\",{\"1\":{\"35\":1}}],[\"然后是各个名称空间和类的名字\",{\"1\":{\"41\":1}}],[\"然后使用字符串在表中的偏移来引用字符串\",{\"1\":{\"34\":1}}],[\"然后安装需要将他们\",{\"1\":{\"12\":1}}],[\"变量名等\",{\"1\":{\"34\":1}}],[\"变量var的地址确认为0x1000\",{\"1\":{\"14\":1}}],[\"表示该入口在要被重定位段中的位置\",{\"1\":{\"54\":1}}],[\"表示它作用于那个段\",{\"1\":{\"33\":1}}],[\"表示符号表的下标\",{\"1\":{\"33\":1}}],[\"一书中也有讲解\",{\"1\":{\"43\":1}}],[\"一般叫做外部符号\",{\"1\":{\"35\":1}}],[\"一种常见的做法是把字符串集中起来存放到一个表\",{\"1\":{\"34\":1}}],[\"一个重定位表同时也是elf的一个段\",{\"1\":{\"33\":1}}],[\"一组目标文件\",{\"1\":{\"15\":1}}],[\"是\",{\"1\":{\"33\":1}}],[\"是否动态链接\",{\"1\":{\"18\":1}}],[\"是否静态链接\",{\"1\":{\"18\":1}}],[\"是否可执行等\",{\"1\":{\"31\":1}}],[\"是否可执行\",{\"1\":{\"18\":1}}],[\"都会有一个相应的重定位表\",{\"1\":{\"33\":1}}],[\"为\",{\"1\":{\"33\":1}}],[\"为1032\",{\"1\":{\"29\":1}}],[\"动态链接\",{\"1\":{\"32\":1}}],[\"决定了该段在进程虚拟地址空间中的属性\",{\"1\":{\"31\":1}}],[\"之所以+0x04是因为内存对齐的原因\",{\"1\":{\"29\":1}}],[\"的\",{\"1\":{\"50\":2}}],[\"的地址也已经确定了\",{\"1\":{\"50\":1}}],[\"的大括号内部的代码当作c语言代码处理\",{\"1\":{\"42\":1}}],[\"的工具来解析被修饰的名称\",{\"1\":{\"41\":1}}],[\"的这种方式\",{\"1\":{\"40\":1}}],[\"的重定位表\",{\"1\":{\"33\":1}}],[\"的段保存了代码段的重定位表\",{\"1\":{\"54\":1}}],[\"的段\",{\"1\":{\"33\":1,\"54\":1}}],[\"的偏移量为0x390文件大小为0x74\",{\"1\":{\"29\":1}}],[\"的包\",{\"1\":{\"15\":1}}],[\"字母就是\",{\"1\":{\"41\":1}}],[\"字节\",{\"1\":{\"29\":1}}],[\"字符串表\",{\"0\":{\"34\":1},\"1\":{\"34\":1}}],[\"字符串结尾包含字符串结束符\",{\"1\":{\"21\":1}}],[\"字符串字面量\",{\"1\":{\"21\":1}}],[\"位于elf文件头后所以elf文件头的大小正好为代码段的偏移0x40\",{\"1\":{\"29\":1}}],[\"数组元素个数为段个数\",{\"1\":{\"28\":1}}],[\"数据段结束地址\",{\"1\":{\"40\":1}}],[\"数据段和只读数据段\",{\"0\":{\"21\":1}}],[\"数据段和bss段\",{\"1\":{\"19\":1}}],[\"数据存储方式\",{\"1\":{\"25\":1}}],[\"key\",{\"1\":{\"28\":1}}],[\"weakref\",{\"1\":{\"44\":3}}],[\"weak2\",{\"1\":{\"43\":1}}],[\"weak\",{\"1\":{\"43\":4,\"44\":2}}],[\"write\",{\"1\":{\"28\":1}}],[\"w\",{\"1\":{\"28\":1}}],[\"wa\",{\"1\":{\"28\":2}}],[\"word\",{\"1\":{\"25\":2,\"29\":4,\"36\":1}}],[\"world\",{\"1\":{\"6\":2}}],[\"机器类型\",{\"0\":{\"27\":1},\"1\":{\"27\":1}}],[\"程序结束地址\",{\"1\":{\"40\":1}}],[\"程序起始地址\",{\"1\":{\"40\":1}}],[\"程序入口和长度\",{\"1\":{\"25\":1}}],[\"程序构建的核心\",{\"1\":{\"8\":1}}],[\"硬件平台版本\",{\"1\":{\"25\":1}}],[\"硬件平台\",{\"1\":{\"25\":1}}],[\"运行平台\",{\"1\":{\"25\":1}}],[\"运行时库\",{\"1\":{\"15\":1}}],[\"版本\",{\"1\":{\"25\":1}}],[\"文件类型\",{\"0\":{\"26\":1},\"1\":{\"26\":1}}],[\"文件机器字节长度\",{\"1\":{\"25\":1}}],[\"文件头同时包括一个段表\",{\"1\":{\"18\":1}}],[\"文件头\",{\"0\":{\"25\":1},\"1\":{\"18\":1}}],[\"在第一步的扫描和空间分配阶段\",{\"1\":{\"50\":1}}],[\"在处理弱引用时\",{\"1\":{\"44\":1}}],[\"在其它文件为弱符号\",{\"1\":{\"43\":1}}],[\"在名称空间或在类里面的\",{\"1\":{\"41\":1}}],[\"在编译器及连接器处理符号时\",{\"1\":{\"41\":1}}],[\"在可执行文件中\",{\"1\":{\"39\":1}}],[\"在目标文件中\",{\"1\":{\"39\":2}}],[\"在本文件中引用的全局符号\",{\"1\":{\"35\":1}}],[\"在链接中将函数和变量称为符号\",{\"1\":{\"35\":1}}],[\"在链接过程中\",{\"1\":{\"14\":1}}],[\"在simplesection\",{\"1\":{\"33\":1}}],[\"在文件中的偏移\",{\"1\":{\"24\":1}}],[\"该重定位表作用的elf文件中的那个段relocation\",{\"1\":{\"54\":1}}],[\"该表记录了目标文件中所用的所有符号\",{\"1\":{\"35\":1}}],[\"该表描述了elf文件包含的所有段的信息\",{\"1\":{\"24\":1}}],[\"该段在文件中存在\",{\"1\":{\"19\":1}}],[\"其中每个重定位表包含了一下信息\",{\"1\":{\"54\":1}}],[\"其中elf文件中与段有关的重要结构就是段表\",{\"1\":{\"24\":1}}],[\"其它段\",{\"0\":{\"23\":1},\"1\":{\"23\":1}}],[\"其它\",{\"0\":{\"15\":1}}],[\"仅接着是elf各个段\",{\"1\":{\"24\":1}}],[\"它们在文件中和虚拟地址都要分配空间\",{\"1\":{\"49\":1}}],[\"它所在的类和名称空间及其它信息\",{\"1\":{\"41\":1}}],[\"它的名称都是一样的\",{\"1\":{\"41\":1}}],[\"它的参数列表紧跟在\",{\"1\":{\"41\":1}}],[\"它的值就是该段的起始地址\",{\"1\":{\"35\":1}}],[\"它的\",{\"1\":{\"33\":1}}],[\"它的类型\",{\"1\":{\"33\":1}}],[\"它的类型为\",{\"1\":{\"28\":1}}],[\"它包含了描述整个文件的基本属性\",{\"1\":{\"24\":1}}],[\"它是一种只读数据\",{\"1\":{\"21\":1}}],[\"符号解析\",{\"0\":{\"55\":1}}],[\"符号解析与重定位\",{\"0\":{\"51\":1},\"1\":{\"49\":1}}],[\"符号地址的确定\",{\"0\":{\"50\":1}}],[\"符号global占8byte\",{\"1\":{\"43\":1}}],[\"符号的定义通常被称为强符号\",{\"1\":{\"43\":1}}],[\"符号修饰\",{\"0\":{\"41\":1}}],[\"符号修饰与函数签名\",{\"1\":{\"40\":1}}],[\"符号值\",{\"0\":{\"39\":1}}],[\"符号值就是它们的地址\",{\"1\":{\"35\":1}}],[\"符号所在段\",{\"0\":{\"38\":1},\"1\":{\"38\":1}}],[\"符号类型和绑定\",{\"1\":{\"37\":1}}],[\"符号类型和绑定类型\",{\"0\":{\"37\":1}}],[\"符号是链接中的粘合剂\",{\"1\":{\"35\":1}}],[\"符号表等\",{\"1\":{\"32\":1}}],[\"符号\",{\"0\":{\"35\":1},\"1\":{\"22\":1}}],[\"符号决议和重定位\",{\"1\":{\"13\":1}}],[\"存放只读数据\",{\"1\":{\"21\":1}}],[\"9\",{\"1\":{\"20\":1,\"22\":1,\"28\":2,\"39\":1,\"49\":1}}],[\"9008018\",{\"1\":{\"40\":2}}],[\"9008010\",{\"1\":{\"40\":2}}],[\"9005205\",{\"1\":{\"40\":3}}],[\"9004000\",{\"1\":{\"40\":1}}],[\"90010000\",{\"1\":{\"20\":1}}],[\"90\",{\"1\":{\"20\":1}}],[\"90c9c3f3\",{\"1\":{\"20\":1}}],[\"<swap>\",{\"1\":{\"53\":2}}],[\"<shared>\",{\"1\":{\"53\":1}}],[\"<stdio\",{\"1\":{\"6\":1,\"40\":1,\"42\":1,\"44\":1}}],[\"<pthread\",{\"1\":{\"44\":1}}],[\"<main+0x4d>\",{\"1\":{\"52\":1}}],[\"<main+0x48>\",{\"1\":{\"52\":1,\"53\":1}}],[\"<main+0x31>\",{\"1\":{\"52\":2}}],[\"<main+0x32>\",{\"1\":{\"20\":1}}],[\"<main+0xf>\",{\"1\":{\"52\":1}}],[\"<main+0x1f>\",{\"1\":{\"20\":1}}],[\"<main+0x19>\",{\"1\":{\"20\":1}}],[\"<main>\",{\"1\":{\"20\":1,\"52\":1,\"53\":1}}],[\"<func1+0x28>\",{\"1\":{\"20\":1}}],[\"<func1+0x1b>\",{\"1\":{\"20\":1}}],[\"<func1>\",{\"1\":{\"20\":1}}],[\"<\",{\"1\":{\"20\":1,\"53\":1}}],[\"tag\",{\"1\":{\"49\":1}}],[\"table\",{\"1\":{\"22\":1,\"24\":1,\"25\":8,\"29\":1,\"34\":2,\"35\":1,\"39\":1}}],[\"tip\",{\"1\":{\"40\":1}}],[\"tbl\",{\"1\":{\"29\":1,\"36\":1}}],[\"tls\",{\"1\":{\"28\":1}}],[\"to\",{\"1\":{\"28\":1,\"29\":1}}],[\"thread\",{\"1\":{\"44\":4}}],[\"there\",{\"1\":{\"28\":1}}],[\"this\",{\"1\":{\"25\":1,\"44\":4}}],[\"typedef\",{\"1\":{\"25\":1,\"29\":1,\"36\":1,\"54\":1}}],[\"type\",{\"0\":{\"30\":1},\"1\":{\"22\":1,\"25\":3,\"28\":1,\"29\":2,\"30\":1,\"33\":2,\"36\":1,\"37\":1,\"39\":1,\"54\":5}}],[\"t\",{\"1\":{\"20\":1,\"28\":1,\"35\":2,\"44\":2}}],[\"text段\",{\"1\":{\"48\":1}}],[\"text\",{\"1\":{\"18\":1,\"19\":2,\"20\":2,\"22\":1,\"28\":2,\"29\":1,\"33\":3,\"35\":1,\"39\":1,\"40\":2,\"49\":6,\"50\":3,\"52\":1,\"53\":1,\"54\":7}}],[\"代码段结束地址\",{\"1\":{\"40\":1}}],[\"代码段\",{\"0\":{\"20\":1},\"1\":{\"29\":1}}],[\"认为它在elf文件中也不存在\",{\"1\":{\"19\":1}}],[\"段位于虚拟地址空间0x0000000000001060\",{\"1\":{\"50\":1}}],[\"段合并\",{\"1\":{\"49\":1}}],[\"段等\",{\"1\":{\"49\":1}}],[\"段\",{\"1\":{\"49\":2}}],[\"段名\",{\"1\":{\"35\":1}}],[\"段的偏移量为x\",{\"1\":{\"50\":1}}],[\"段的起始地址为0x0000000000004000\",{\"1\":{\"50\":1}}],[\"段的起始地址为0x0000000000001060\",{\"1\":{\"50\":1}}],[\"段的装载地址和空间的对齐单位是页\",{\"1\":{\"48\":1}}],[\"段的链接信息\",{\"0\":{\"32\":1},\"1\":{\"32\":1}}],[\"段的标志位\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"段的类型\",{\"0\":{\"30\":1},\"1\":{\"30\":1}}],[\"段的长度\",{\"1\":{\"19\":1,\"24\":1}}],[\"段描述符的结构\",{\"0\":{\"29\":1}}],[\"段数量\",{\"1\":{\"25\":1}}],[\"段偏移\",{\"1\":{\"19\":1}}],[\"段所在的位置\",{\"1\":{\"19\":1}}],[\"段表字符串表\",{\"1\":{\"34\":1}}],[\"段表的最后一个元素\",{\"1\":{\"29\":1}}],[\"段表的结构以elf64\",{\"1\":{\"28\":1}}],[\"段表结构解析\",{\"1\":{\"29\":1}}],[\"段表用于保存这些段的基本属性结构\",{\"1\":{\"28\":1}}],[\"段表用来描述一个文件中各个段的数组\",{\"1\":{\"18\":1}}],[\"段表\",{\"0\":{\"28\":1}}],[\"段表位置和长度\",{\"1\":{\"25\":1}}],[\"段表描述了文件中各个段在文件中的偏移位置及段的属性等\",{\"1\":{\"18\":1}}],[\"堆栈提示段\",{\"1\":{\"19\":1}}],[\"只在编译器内部可见\",{\"1\":{\"35\":1}}],[\"只有段的类型是与链接\",{\"1\":{\"32\":1}}],[\"只读数据段\",{\"1\":{\"19\":1}}],[\"只能将movq指令的目标地址置0\",{\"1\":{\"14\":1}}],[\"注意不是入口地址\",{\"1\":{\"40\":1}}],[\"注意编译时使用了\",{\"1\":{\"39\":1}}],[\"注意对于初始化为0的全局变量则不行\",{\"1\":{\"22\":1}}],[\"注释信息段\",{\"1\":{\"19\":1}}],[\"注\",{\"1\":{\"19\":1,\"24\":1,\"29\":1,\"41\":2,\"42\":1,\"43\":2,\"45\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"52\":1,\"54\":1}}],[\"7c\",{\"1\":{\"52\":1,\"53\":1}}],[\"7f\",{\"1\":{\"25\":1}}],[\"7d\",{\"1\":{\"20\":1}}],[\"75\",{\"1\":{\"52\":1,\"53\":1}}],[\"75342920\",{\"1\":{\"20\":1}}],[\"75203133\",{\"1\":{\"20\":1}}],[\"7\",{\"0\":{\"61\":1},\"1\":{\"19\":1,\"22\":1,\"28\":1,\"39\":1,\"49\":1}}],[\"xor\",{\"1\":{\"52\":2,\"53\":2}}],[\"xword\",{\"1\":{\"29\":4,\"36\":1,\"54\":1}}],[\"x\",{\"1\":{\"19\":1,\"20\":1,\"28\":2,\"40\":8}}],[\"x86\",{\"1\":{\"8\":1,\"17\":3,\"19\":1,\"20\":1,\"25\":1,\"49\":3,\"52\":1,\"53\":1,\"54\":9}}],[\"+\",{\"1\":{\"19\":3,\"20\":1,\"29\":2,\"53\":2,\"54\":3}}],[\"a3\",{\"1\":{\"53\":1}}],[\"a1\",{\"1\":{\"53\":2}}],[\"another\",{\"1\":{\"29\":1}}],[\"and\",{\"1\":{\"25\":1,\"36\":1,\"54\":1}}],[\"ax\",{\"1\":{\"28\":1}}],[\"attr\",{\"1\":{\"44\":1}}],[\"attribute\",{\"1\":{\"43\":2,\"44\":4}}],[\"at\",{\"1\":{\"28\":1,\"29\":1,\"54\":2}}],[\"array\",{\"1\":{\"49\":2}}],[\"are\",{\"1\":{\"28\":1}}],[\"architecture\",{\"1\":{\"25\":1}}],[\"advanced\",{\"1\":{\"25\":1}}],[\"addend\",{\"1\":{\"54\":2}}],[\"additional\",{\"1\":{\"29\":1}}],[\"addralign\",{\"1\":{\"29\":1}}],[\"addr\",{\"1\":{\"25\":1,\"29\":3,\"36\":1,\"54\":1}}],[\"address\",{\"1\":{\"25\":2,\"28\":1,\"54\":1}}],[\"add\",{\"1\":{\"20\":3,\"52\":1,\"53\":1}}],[\"ab\",{\"1\":{\"49\":2,\"53\":2}}],[\"abi版本\",{\"1\":{\"25\":1}}],[\"abi\",{\"1\":{\"25\":2,\"49\":1}}],[\"abs\",{\"1\":{\"22\":1,\"39\":1}}],[\"alignment\",{\"1\":{\"29\":1}}],[\"align\",{\"1\":{\"28\":1}}],[\"alloc\",{\"1\":{\"19\":6,\"28\":1,\"49\":36}}],[\"algn\",{\"1\":{\"19\":1,\"49\":3}}],[\"a\",{\"1\":{\"19\":2,\"28\":4,\"43\":1,\"46\":7,\"49\":2,\"50\":3,\"52\":2,\"54\":5}}],[\"as\",{\"1\":{\"9\":1}}],[\"unknown\",{\"1\":{\"28\":1}}],[\"unsigned\",{\"1\":{\"25\":1,\"36\":2}}],[\"unix下c语言规定\",{\"1\":{\"40\":1}}],[\"unix\",{\"1\":{\"25\":1}}],[\"uninit\",{\"1\":{\"19\":1,\"22\":2,\"35\":1,\"39\":2}}],[\"underscore\",{\"1\":{\"40\":2}}],[\"und\",{\"1\":{\"22\":2,\"39\":2}}],[\"ubuntu\",{\"1\":{\"20\":1}}],[\"u\",{\"1\":{\"20\":2,\"35\":1}}],[\"uh\",{\"1\":{\"20\":1}}],[\"usr\",{\"1\":{\"8\":1,\"25\":1,\"29\":1,\"36\":1}}],[\"8d\",{\"1\":{\"20\":1,\"52\":3,\"53\":3}}],[\"83\",{\"1\":{\"20\":2,\"52\":2,\"53\":2}}],[\"83ec10c7\",{\"1\":{\"20\":1}}],[\"8602430d\",{\"1\":{\"20\":2}}],[\"8byte\",{\"1\":{\"43\":1}}],[\"8b\",{\"1\":{\"20\":5,\"52\":2,\"53\":4}}],[\"8b45f801\",{\"1\":{\"20\":1}}],[\"8b050000\",{\"1\":{\"20\":1}}],[\"89\",{\"1\":{\"20\":6,\"52\":1,\"53\":1}}],[\"89c7b800\",{\"1\":{\"20\":1}}],[\"897dfc8b\",{\"1\":{\"20\":1}}],[\"8\",{\"1\":{\"19\":2,\"20\":1,\"22\":1,\"28\":7,\"39\":1,\"49\":1,\"52\":2}}],[\"85\",{\"1\":{\"19\":1}}],[\"84\",{\"1\":{\"19\":1}}],[\"80386\",{\"1\":{\"17\":1}}],[\"挖掘simplesection\",{\"0\":{\"19\":1}}],[\"内存共享比如libc的动态链接库\",{\"1\":{\"18\":1}}],[\"节省内存空间\",{\"1\":{\"18\":1}}],[\"提高cpu的缓存命中\",{\"1\":{\"18\":1}}],[\"提示\",{\"1\":{\"18\":2,\"19\":1,\"20\":1,\"21\":2,\"22\":2,\"28\":2,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":2,\"43\":1,\"44\":1}}],[\"利用缓存\",{\"1\":{\"18\":1}}],[\"记录所有为初始或者初始化为0的全局变量和静态变量的大小总和\",{\"1\":{\"18\":1}}],[\"初始化为0的全局变量和局部静态变量\",{\"1\":{\"18\":1,\"22\":1}}],[\"已初始化的全局变量和局部静态变量\",{\"1\":{\"18\":1,\"21\":1}}],[\"从段表中可以得到每个的段的所有信息\",{\"1\":{\"18\":1}}],[\"等等\",{\"1\":{\"18\":1}}],[\"等待链接器再将目标文件a和b链接起来时再将其修正\",{\"1\":{\"14\":1}}],[\"目标操作系统\",{\"1\":{\"18\":1}}],[\"目标硬件\",{\"1\":{\"18\":1}}],[\"目标文件b声明符号\",{\"1\":{\"43\":1}}],[\"目标文件将信息按不同的属性进行存储\",{\"1\":{\"18\":1}}],[\"目标文件是什么样的\",{\"0\":{\"18\":1}}],[\"目标文件的格式\",{\"0\":{\"17\":1}}],[\"目标文件\",{\"0\":{\"16\":1}}],[\"入口地址\",{\"1\":{\"18\":1,\"25\":1}}],[\"描述了整个文件的文件属性\",{\"1\":{\"18\":1}}],[\"全局变量和局部静态变量经常存放于数据段\",{\"1\":{\"18\":1}}],[\"源代码编译后的机器指令经常放于代码段\",{\"1\":{\"18\":1}}],[\"通常称之为节\",{\"1\":{\"18\":1}}],[\"通过使用\",{\"1\":{\"44\":2}}],[\"通过使用readelf\",{\"1\":{\"25\":1}}],[\"通过使用链接器\",{\"1\":{\"10\":1}}],[\"通过file指令可以查看文件的存储格式\",{\"1\":{\"17\":1}}],[\"核心转储文件\",{\"1\":{\"17\":1}}],[\"共享目标文件\",{\"1\":{\"17\":1}}],[\"可选\",{\"1\":{\"35\":1}}],[\"可以注意到变量的类型并没有加入到修饰后的名称中去\",{\"1\":{\"41\":1}}],[\"可以通过gcc编译器提供的\",{\"1\":{\"43\":1}}],[\"可以通过\",{\"1\":{\"41\":1}}],[\"可以被其它目标文件引用\",{\"1\":{\"35\":1}}],[\"可以使用readelf查看debug相关的段\",{\"1\":{\"45\":1}}],[\"可以使用readelf\",{\"1\":{\"28\":1}}],[\"可以给gcc选项加入\",{\"1\":{\"22\":1}}],[\"可以防止程序被恶意篡改\",{\"1\":{\"18\":1}}],[\"可执行文件\",{\"1\":{\"17\":1}}],[\"可重定位文件\",{\"1\":{\"17\":1}}],[\"==来打开和关闭是否在c语言符号前加上\",{\"1\":{\"40\":1}}],[\"==的方法来解决多模块的符号冲突问题\",{\"1\":{\"40\":1}}],[\"=\",{\"1\":{\"19\":3,\"29\":1,\"42\":1,\"43\":4,\"46\":2,\"53\":2}}],[\"=595f7870a8165b3eb04c9ebda08a8ccba6f742c2\",{\"1\":{\"17\":1}}],[\"=2f77b36371c214e11670c7d9d92727e9a49f626b\",{\"1\":{\"17\":1}}],[\"d查看反汇编结果\",{\"1\":{\"52\":1}}],[\"dynamic\",{\"1\":{\"49\":1}}],[\"dynamically\",{\"1\":{\"17\":1}}],[\"dyn\",{\"1\":{\"49\":1}}],[\"dynstr\",{\"1\":{\"49\":1}}],[\"dynsym\",{\"1\":{\"49\":1}}],[\"double\",{\"1\":{\"42\":1}}],[\"d0\",{\"1\":{\"20\":1}}],[\"disassembly\",{\"1\":{\"20\":1,\"52\":1,\"53\":1}}],[\"devices\",{\"1\":{\"25\":1}}],[\"default\",{\"1\":{\"22\":13,\"39\":13}}],[\"define\",{\"1\":{\"7\":1,\"35\":1}}],[\"decorated\",{\"1\":{\"41\":1}}],[\"decoration\",{\"1\":{\"41\":1}}],[\"dec\",{\"1\":{\"19\":1}}],[\"d\",{\"1\":{\"19\":1,\"20\":3,\"21\":1,\"28\":1,\"35\":2,\"42\":1,\"52\":1,\"53\":1}}],[\"data段和\",{\"1\":{\"48\":1}}],[\"data段的大小正好为8个字节\",{\"1\":{\"21\":1,\"22\":1}}],[\"data\",{\"1\":{\"18\":2,\"19\":6,\"20\":1,\"21\":1,\"22\":1,\"25\":1,\"28\":1,\"35\":1,\"39\":1,\"40\":2,\"49\":30,\"50\":1,\"54\":2}}],[\"dump\",{\"1\":{\"17\":1}}],[\"pc32\",{\"1\":{\"54\":4}}],[\"plt32\",{\"1\":{\"54\":4}}],[\"plt>\",{\"1\":{\"53\":1}}],[\"plt\",{\"1\":{\"49\":4}}],[\"pt\",{\"1\":{\"44\":4}}],[\"pthread\",{\"1\":{\"44\":7}}],[\"phnum\",{\"1\":{\"25\":1}}],[\"phentsize\",{\"1\":{\"25\":1}}],[\"phoff\",{\"1\":{\"25\":1}}],[\"point\",{\"1\":{\"25\":2}}],[\"push\",{\"1\":{\"20\":2}}],[\"p\",{\"1\":{\"20\":1,\"28\":1}}],[\"pie\",{\"1\":{\"17\":2}}],[\"pr\",{\"1\":{\"28\":1}}],[\"processing\",{\"1\":{\"28\":1}}],[\"processor\",{\"1\":{\"25\":1,\"28\":1}}],[\"progbits\",{\"1\":{\"28\":6}}],[\"program\",{\"1\":{\"25\":6}}],[\"property\",{\"1\":{\"19\":1,\"20\":1,\"49\":3}}],[\"pragma编译指令\",{\"1\":{\"7\":1}}],[\"printf\",{\"1\":{\"6\":1,\"19\":2,\"22\":1,\"35\":1,\"39\":1,\"40\":4,\"42\":1,\"44\":2}}],[\"bfd库\",{\"0\":{\"61\":1}}],[\"bjdump\",{\"1\":{\"54\":1}}],[\"build\",{\"1\":{\"49\":1}}],[\"buildid\",{\"1\":{\"17\":2}}],[\"bar\",{\"1\":{\"41\":1}}],[\"bash\",{\"1\":{\"17\":2}}],[\"bytes\",{\"1\":{\"25\":6,\"29\":1}}],[\"b8\",{\"1\":{\"20\":2}}],[\"b\",{\"1\":{\"19\":2,\"20\":1,\"35\":1,\"43\":1,\"46\":5,\"49\":2}}],[\"bss段在目标文件和可执行文件中不占用文件的空间\",{\"1\":{\"49\":1}}],[\"bss段\",{\"0\":{\"22\":1},\"1\":{\"48\":1}}],[\"bss段没有表示bss段在elf文件中不存在内容\",{\"1\":{\"19\":1}}],[\"bss段只是为未初始化的全局变量和局部静态变量预留位置而已\",{\"1\":{\"18\":1}}],[\"bss\",{\"1\":{\"18\":1,\"19\":2,\"22\":2,\"28\":1,\"39\":1,\"49\":6}}],[\"binding\",{\"1\":{\"36\":1,\"37\":1}}],[\"bind\",{\"1\":{\"22\":1,\"39\":1}}],[\"bin\",{\"1\":{\"17\":2}}],[\"bit\",{\"1\":{\"17\":3}}],[\"virtual\",{\"1\":{\"25\":1,\"29\":1}}],[\"visibility\",{\"1\":{\"36\":1}}],[\"vis\",{\"1\":{\"22\":1,\"39\":1}}],[\"v\",{\"1\":{\"25\":1}}],[\"value表示符号的虚拟地址\",{\"1\":{\"39\":1}}],[\"value表示该符号的对齐属性\",{\"1\":{\"39\":1}}],[\"value表示该符号在段中的偏移\",{\"1\":{\"39\":1}}],[\"value\",{\"0\":{\"39\":1},\"1\":{\"22\":1,\"35\":1,\"36\":2,\"39\":1,\"54\":4}}],[\"var和static\",{\"1\":{\"35\":1}}],[\"var2\",{\"1\":{\"19\":2,\"22\":2,\"35\":2,\"39\":1}}],[\"var\",{\"1\":{\"14\":1,\"19\":4,\"21\":2,\"22\":4,\"35\":3,\"39\":5,\"42\":4}}],[\"vma\",{\"1\":{\"19\":1,\"49\":4}}],[\"void\",{\"1\":{\"19\":1,\"44\":4,\"46\":1}}],[\"version\",{\"1\":{\"17\":3,\"25\":5,\"44\":4,\"49\":2}}],[\"ff\",{\"1\":{\"53\":3}}],[\"fs\",{\"1\":{\"52\":2,\"53\":3}}],[\"fini\",{\"1\":{\"49\":2}}],[\"filename\",{\"1\":{\"19\":1}}],[\"file\",{\"1\":{\"17\":3,\"19\":3,\"20\":1,\"22\":1,\"25\":7,\"29\":1,\"39\":1,\"49\":6,\"52\":1,\"53\":1,\"54\":1}}],[\"fno\",{\"1\":{\"40\":1}}],[\"float\",{\"1\":{\"41\":2}}],[\"fleading\",{\"1\":{\"40\":1}}],[\"flags\",{\"0\":{\"31\":1},\"1\":{\"25\":3,\"28\":2,\"29\":2,\"30\":1}}],[\"func和var不会被c++的名称修饰规则修饰\",{\"1\":{\"42\":1}}],[\"func经过名称修饰后就是\",{\"1\":{\"41\":1}}],[\"function\",{\"1\":{\"41\":1}}],[\"func\",{\"1\":{\"22\":2,\"39\":2,\"41\":8,\"42\":2}}],[\"func1\",{\"1\":{\"19\":2,\"22\":1,\"35\":1,\"39\":2}}],[\"f8\",{\"1\":{\"20\":2}}],[\"f\",{\"1\":{\"20\":1,\"52\":2}}],[\"fcommon编译选项\",{\"1\":{\"39\":1}}],[\"fcommon\",{\"1\":{\"22\":1}}],[\"fcommon使未初始化的全局变量被定义为一个\",{\"1\":{\"22\":1}}],[\"fc\",{\"1\":{\"20\":3}}],[\"fail\",{\"1\":{\"53\":1,\"54\":2}}],[\"fa\",{\"1\":{\"20\":2,\"52\":1,\"53\":1}}],[\"f3\",{\"1\":{\"20\":2,\"52\":1,\"53\":1}}],[\"f30f1efa\",{\"1\":{\"20\":1}}],[\"f0\",{\"1\":{\"19\":1}}],[\"frame\",{\"1\":{\"19\":1,\"20\":1,\"28\":2,\"49\":4,\"54\":2}}],[\"found\",{\"1\":{\"62\":1}}],[\"foo\",{\"1\":{\"35\":3,\"40\":2,\"41\":1,\"44\":3}}],[\"foobar\",{\"1\":{\"17\":2}}],[\"format\",{\"1\":{\"19\":2,\"20\":1,\"49\":3,\"52\":1,\"53\":1,\"54\":1}}],[\"for\",{\"1\":{\"17\":1,\"54\":3}}],[\"第三章\",{\"0\":{\"46\":1}}],[\"第一个元素是无效段描述符\",{\"1\":{\"28\":1}}],[\"第一章\",{\"0\":{\"5\":1}}],[\"第二章\",{\"0\":{\"16\":1}}],[\"库\",{\"1\":{\"15\":1}}],[\"支撑程序运行的基本函数集合\",{\"1\":{\"15\":1}}],[\"例如a和b链接后\",{\"1\":{\"14\":1}}],[\"rsi\",{\"1\":{\"52\":2,\"53\":2}}],[\"rsp\",{\"1\":{\"20\":4,\"52\":6,\"53\":7}}],[\"r\",{\"1\":{\"49\":1,\"54\":12}}],[\"rdi\",{\"1\":{\"20\":1,\"52\":1,\"53\":1}}],[\"rax\",{\"1\":{\"20\":2,\"52\":4,\"53\":7}}],[\"rbp\",{\"1\":{\"20\":9}}],[\"rodata段的大小正好为四字节\",{\"1\":{\"21\":1}}],[\"rodata段\",{\"1\":{\"21\":1}}],[\"rodata\",{\"1\":{\"19\":2,\"20\":1,\"21\":1,\"22\":1,\"28\":1,\"39\":1,\"49\":1}}],[\"records\",{\"1\":{\"54\":3}}],[\"reference\",{\"1\":{\"44\":3}}],[\"refrence\",{\"1\":{\"35\":1}}],[\"required\",{\"1\":{\"28\":1}}],[\"rela\",{\"1\":{\"28\":4,\"33\":3,\"49\":2,\"54\":2}}],[\"rel\",{\"1\":{\"25\":1,\"33\":1,\"54\":3}}],[\"reloc\",{\"1\":{\"19\":2,\"49\":3}}],[\"relocatable\",{\"1\":{\"17\":1,\"25\":1}}],[\"relocation\",{\"1\":{\"14\":2,\"54\":6}}],[\"readelf指令可以查看重定位文件\",{\"1\":{\"54\":1}}],[\"readelf\",{\"1\":{\"22\":1,\"25\":1,\"28\":1,\"39\":1,\"54\":1}}],[\"readonly\",{\"1\":{\"19\":6,\"49\":31}}],[\"ret\",{\"1\":{\"20\":2,\"52\":1,\"53\":1}}],[\"return\",{\"1\":{\"6\":1,\"19\":1,\"40\":1,\"42\":1,\"43\":1,\"46\":1}}],[\"rip\",{\"1\":{\"14\":1,\"20\":3,\"52\":2,\"53\":2}}],[\"$0x64\",{\"1\":{\"52\":1,\"53\":1}}],[\"$0x18\",{\"1\":{\"52\":2,\"53\":2}}],[\"$0x1\",{\"1\":{\"20\":1}}],[\"$0x10\",{\"1\":{\"20\":2}}],[\"$0x0\",{\"1\":{\"20\":2}}],[\"$0x2a\",{\"1\":{\"14\":1}}],[\"$>\",{\"1\":{\"6\":2,\"7\":2,\"8\":2,\"9\":2,\"17\":2,\"19\":2,\"20\":1,\"22\":2,\"25\":1,\"28\":1,\"35\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"44\":4,\"46\":1,\"49\":3,\"52\":1,\"53\":1,\"54\":2}}],[\"multi\",{\"1\":{\"44\":2}}],[\"myname\",{\"1\":{\"42\":2}}],[\"mbind\",{\"1\":{\"28\":1}}],[\"merge\",{\"1\":{\"28\":1}}],[\"m\",{\"1\":{\"28\":1}}],[\"ms\",{\"1\":{\"28\":1}}],[\"micro\",{\"1\":{\"25\":1}}],[\"manualnamemangling\",{\"1\":{\"42\":4}}],[\"machine\",{\"1\":{\"25\":2}}],[\"magic\",{\"1\":{\"25\":2}}],[\"main\",{\"1\":{\"6\":1,\"19\":1,\"22\":1,\"35\":1,\"39\":2,\"40\":1,\"42\":1,\"43\":1,\"44\":2,\"46\":1,\"50\":3}}],[\"movl\",{\"1\":{\"20\":1,\"52\":1,\"53\":1}}],[\"mov\",{\"1\":{\"20\":13,\"52\":3,\"53\":5}}],[\"movq\",{\"1\":{\"14\":2}}],[\"对外部目标文件的符号引用在目标文件被最终链接成可执行文件时\",{\"1\":{\"44\":1}}],[\"对符号进行管理\",{\"1\":{\"35\":1}}],[\"对于\",{\"1\":{\"49\":2}}],[\"对于x86的硬件来说\",{\"1\":{\"48\":1}}],[\"对于未定义的弱引用\",{\"1\":{\"44\":1}}],[\"对于int类型来说\",{\"1\":{\"41\":1}}],[\"对于一个函数来说\",{\"1\":{\"41\":1}}],[\"对于嵌套的名字\",{\"1\":{\"41\":1}}],[\"对于变量和函数来说\",{\"1\":{\"35\":1}}],[\"对于每个需要重定位的段\",{\"1\":{\"33\":1}}],[\"对于编译器和链接器来说\",{\"1\":{\"30\":1}}],[\"对目标文件b有\",{\"1\":{\"14\":1}}],[\"对使用定义在其它目标文件中的变量也是如此\",{\"1\":{\"14\":1}}],[\"对定义在其它目标文件中的函数调用的指令需要被重新调整\",{\"1\":{\"14\":1}}],[\"起来的过程被称为链接\",{\"1\":{\"12\":1}}],[\"组装\",{\"1\":{\"12\":1}}],[\"lpthread\",{\"1\":{\"44\":1}}],[\"large\",{\"1\":{\"28\":1}}],[\"l\",{\"1\":{\"28\":2}}],[\"local\",{\"1\":{\"22\":8,\"39\":8}}],[\"load\",{\"1\":{\"19\":5,\"49\":33}}],[\"leading\",{\"1\":{\"40\":1}}],[\"leave\",{\"1\":{\"20\":2}}],[\"lea\",{\"1\":{\"20\":1,\"52\":3,\"53\":3}}],[\"lma\",{\"1\":{\"19\":1,\"49\":4}}],[\"lsb\",{\"1\":{\"17\":3}}],[\"ld\",{\"1\":{\"10\":1,\"17\":3}}],[\"little\",{\"1\":{\"25\":1}}],[\"link\",{\"0\":{\"32\":1},\"1\":{\"28\":2,\"29\":2,\"33\":1}}],[\"linked\",{\"1\":{\"17\":2}}],[\"linux下的\",{\"1\":{\"17\":1}}],[\"linux下的主流文件存储格式为elf\",{\"1\":{\"17\":1}}],[\"linux的\",{\"1\":{\"17\":2}}],[\"linux\",{\"1\":{\"8\":1,\"17\":5}}],[\"lib32\",{\"1\":{\"17\":2}}],[\"lib64\",{\"1\":{\"17\":1}}],[\"lib\",{\"1\":{\"8\":1}}],[\"got\",{\"1\":{\"49\":2}}],[\"g++\",{\"1\":{\"42\":1}}],[\"group\",{\"1\":{\"28\":1}}],[\"g\",{\"1\":{\"28\":1}}],[\"global为double\",{\"1\":{\"43\":1}}],[\"global为int\",{\"1\":{\"43\":1}}],[\"global\",{\"1\":{\"19\":2,\"21\":1,\"22\":8,\"35\":2,\"39\":9,\"43\":2}}],[\"gnu\",{\"1\":{\"8\":1,\"17\":2,\"19\":4,\"20\":2,\"28\":2,\"49\":9}}],[\"gcc编译器也可以通过==\",{\"1\":{\"40\":1}}],[\"gcc生成可执行文件的四个步骤\",{\"1\":{\"6\":1}}],[\"gcc\",{\"1\":{\"6\":1,\"7\":1,\"8\":2,\"9\":1,\"20\":1,\"22\":1,\"44\":2,\"46\":1}}],[\"swap的地址\",{\"1\":{\"53\":1}}],[\"swap调用处的地址在反汇编代码的0x2c字节处同样被标记为0\",{\"1\":{\"52\":1}}],[\"swap\",{\"1\":{\"46\":2,\"50\":1,\"53\":1,\"54\":2}}],[\"specialsymbol\",{\"1\":{\"40\":2}}],[\"specific\",{\"1\":{\"25\":1,\"28\":2}}],[\"s查看符号表\",{\"1\":{\"39\":1}}],[\"s指令来显示elf文件的各种段表结构\",{\"1\":{\"28\":1}}],[\"shndx的值会有些特殊\",{\"1\":{\"38\":1}}],[\"shndx\",{\"0\":{\"38\":1},\"1\":{\"36\":1}}],[\"shnum\",{\"1\":{\"25\":1}}],[\"shl\",{\"1\":{\"33\":1}}],[\"sh\",{\"0\":{\"30\":1,\"31\":1,\"32\":2},\"1\":{\"29\":10,\"30\":2,\"33\":5,\"38\":1}}],[\"shdr\",{\"1\":{\"29\":1}}],[\"shdr又被称为段描述符\",{\"1\":{\"28\":1}}],[\"shdr对应一个段属性描述\",{\"1\":{\"28\":1}}],[\"shdr结构的数组形式进行存储\",{\"1\":{\"28\":1}}],[\"shstrtab\",{\"1\":{\"28\":1,\"29\":1,\"34\":1}}],[\"shstrndx\",{\"1\":{\"25\":1}}],[\"shentsize\",{\"1\":{\"25\":1}}],[\"shoff元素\",{\"1\":{\"29\":1}}],[\"shoff\",{\"1\":{\"25\":1}}],[\"shared的地址\",{\"1\":{\"53\":1}}],[\"shared地址在反汇编代码的0x08字节处标记为0\",{\"1\":{\"52\":1}}],[\"shared\",{\"1\":{\"17\":1,\"46\":3,\"50\":1,\"53\":1,\"54\":2}}],[\"sha1\",{\"1\":{\"17\":2}}],[\"system\",{\"1\":{\"25\":1}}],[\"sysv\",{\"1\":{\"17\":2}}],[\"sym\",{\"1\":{\"36\":1,\"54\":4}}],[\"symtab\",{\"1\":{\"22\":1,\"28\":2,\"39\":1}}],[\"symbol\",{\"0\":{\"35\":1},\"1\":{\"22\":1,\"35\":5,\"36\":5,\"37\":2,\"39\":1,\"43\":2,\"54\":1}}],[\"sub\",{\"1\":{\"20\":2,\"52\":2,\"53\":2}}],[\"single\",{\"1\":{\"44\":2}}],[\"signature\",{\"1\":{\"41\":1}}],[\"size\",{\"1\":{\"19\":3,\"22\":1,\"25\":6,\"28\":1,\"29\":3,\"36\":2,\"39\":1,\"49\":3}}],[\"simplesection\",{\"1\":{\"19\":4,\"20\":2,\"21\":2,\"22\":4,\"25\":1,\"28\":1,\"35\":2,\"39\":2}}],[\"sec\",{\"1\":{\"49\":1}}],[\"sections\",{\"1\":{\"19\":1,\"49\":3}}],[\"section\",{\"1\":{\"18\":3,\"20\":7,\"21\":2,\"22\":5,\"24\":1,\"25\":8,\"28\":2,\"29\":10,\"34\":1,\"36\":2,\"39\":4,\"52\":1,\"53\":1,\"54\":2}}],[\"segment\",{\"1\":{\"18\":1}}],[\"st\",{\"0\":{\"37\":1,\"38\":1,\"39\":1},\"1\":{\"36\":6,\"39\":2}}],[\"strong\",{\"1\":{\"43\":2,\"44\":2}}],[\"strtab\",{\"1\":{\"28\":3,\"34\":1}}],[\"struct\",{\"1\":{\"25\":1,\"29\":1,\"36\":1,\"54\":1}}],[\"strings\",{\"1\":{\"28\":1}}],[\"string\",{\"1\":{\"25\":2,\"29\":1,\"34\":2,\"36\":1}}],[\"stripped\",{\"1\":{\"17\":3}}],[\"startup\",{\"1\":{\"52\":1,\"54\":5}}],[\"starting\",{\"1\":{\"28\":1}}],[\"start\",{\"1\":{\"25\":2,\"40\":5}}],[\"stack虽然有但是长度为0\",{\"1\":{\"19\":1}}],[\"stack\",{\"1\":{\"19\":2,\"28\":1,\"49\":2,\"53\":1,\"54\":2}}],[\"static\",{\"1\":{\"17\":1,\"19\":6,\"21\":1,\"22\":3,\"35\":2,\"39\":2}}],[\"so文件\",{\"1\":{\"17\":1}}],[\"so\",{\"1\":{\"17\":3}}],[\"s\",{\"1\":{\"8\":3,\"9\":2,\"20\":2,\"22\":1,\"25\":1,\"28\":2,\"39\":1}}],[\"生成目标文件\",{\"1\":{\"9\":1}}],[\"生成汇编文件\",{\"1\":{\"8\":1}}],[\"生成预处理文件\",{\"1\":{\"7\":1}}],[\"语义分析及优化后生成汇编的过程\",{\"1\":{\"8\":1}}],[\"语法分析\",{\"1\":{\"8\":1}}],[\"将shared地址写入第二个参数\",{\"1\":{\"52\":1}}],[\"将所有包含指令的段反汇编\",{\"1\":{\"20\":1}}],[\"将所有段的内容以十六进制的方式打印\",{\"1\":{\"20\":1}}],[\"将每个源代码模块独立编译\",{\"1\":{\"12\":1}}],[\"将每一条汇编指令翻译成对应机器码的过程\",{\"1\":{\"9\":1}}],[\"将预处理文件经过一系列词法分析\",{\"1\":{\"8\":1}}],[\"将被包含的文件插入到该预处理指令的位置\",{\"1\":{\"7\":1}}],[\">\",{\"1\":{\"7\":1}}],[\"或者是一个特殊的值\",{\"1\":{\"44\":1}}],[\"或者写成\",{\"1\":{\"42\":1}}],[\"或者对于有些特殊符号\",{\"1\":{\"38\":1}}],[\"或者段\",{\"1\":{\"18\":1}}],[\"或者中间目标文件\",{\"1\":{\"9\":1}}],[\"或者\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"40\":1}}],[\"保留所有的\",{\"1\":{\"7\":1}}],[\"63\",{\"1\":{\"20\":1}}],[\"62\",{\"1\":{\"20\":1}}],[\"62756e74\",{\"1\":{\"20\":2}}],[\"64\",{\"1\":{\"8\":1,\"17\":5,\"19\":1,\"20\":1,\"25\":3,\"29\":1,\"49\":3,\"52\":4,\"53\":5,\"54\":9}}],[\"6\",{\"0\":{\"45\":1,\"60\":1},\"1\":{\"7\":1,\"19\":1,\"22\":1,\"28\":1,\"39\":1,\"49\":3}}],[\"比如代码段\",{\"1\":{\"54\":1}}],[\"比如我们假设\",{\"1\":{\"50\":1}}],[\"比如将所有输入文件的\",{\"1\":{\"49\":1}}],[\"比如文件a声明符号\",{\"1\":{\"43\":1}}],[\"比如文件b用到了目标a中的函数\",{\"1\":{\"35\":1}}],[\"比如main\",{\"1\":{\"41\":1}}],[\"比如foo命名空间下的bar变量\",{\"1\":{\"41\":1}}],[\"比如n\",{\"1\":{\"41\":1}}],[\"比如一个c函数\",{\"1\":{\"40\":1}}],[\"比如simplesection\",{\"1\":{\"39\":2}}],[\"比如段名\",{\"1\":{\"34\":1}}],[\"比如是否可写\",{\"1\":{\"31\":1}}],[\"比如每个段的段名\",{\"1\":{\"24\":1}}],[\"比如\",{\"1\":{\"7\":1,\"14\":1,\"33\":1,\"50\":1}}],[\"添加行号和文件名标号\",{\"1\":{\"7\":1}}],[\"57\",{\"1\":{\"22\":1,\"39\":1}}],[\"5d\",{\"1\":{\"20\":2}}],[\"58\",{\"1\":{\"20\":1}}],[\"56\",{\"1\":{\"20\":1}}],[\"54\",{\"1\":{\"20\":1}}],[\"54000000\",{\"1\":{\"20\":1}}],[\"51\",{\"1\":{\"20\":1}}],[\"55\",{\"1\":{\"20\":2}}],[\"55000000\",{\"1\":{\"20\":1}}],[\"554889e5\",{\"1\":{\"20\":1}}],[\"5\",{\"0\":{\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":2,\"45\":1,\"59\":1},\"1\":{\"7\":1,\"19\":1,\"20\":1,\"22\":2,\"28\":1,\"39\":2,\"40\":1,\"49\":3}}],[\"删除所有注释\",{\"1\":{\"7\":1}}],[\"404\",{\"1\":{\"62\":1}}],[\"4010\",{\"1\":{\"53\":1}}],[\"4d\",{\"1\":{\"52\":1}}],[\"47\",{\"1\":{\"52\":1}}],[\"474e5500\",{\"1\":{\"20\":1}}],[\"41\",{\"1\":{\"52\":1}}],[\"4byte\",{\"1\":{\"43\":1}}],[\"42\",{\"1\":{\"42\":2}}],[\"46\",{\"1\":{\"25\":1}}],[\"43\",{\"1\":{\"22\":1,\"39\":1,\"52\":1}}],[\"4f\",{\"1\":{\"20\":1}}],[\"4c\",{\"1\":{\"20\":1,\"25\":1}}],[\"4a\",{\"1\":{\"20\":2}}],[\"44\",{\"1\":{\"20\":2,\"52\":3,\"53\":4}}],[\"45\",{\"1\":{\"20\":4,\"25\":1}}],[\"45f80100\",{\"1\":{\"20\":1}}],[\"45fc89c6\",{\"1\":{\"20\":1}}],[\"48\",{\"1\":{\"20\":6,\"52\":11,\"53\":11}}],[\"4889e548\",{\"1\":{\"20\":1}}],[\"488d0500\",{\"1\":{\"20\":1}}],[\"4883ec10\",{\"1\":{\"20\":1}}],[\"4\",{\"0\":{\"10\":1,\"15\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":2,\"42\":1,\"56\":1,\"58\":1},\"1\":{\"7\":1,\"19\":1,\"20\":1,\"22\":7,\"28\":3,\"39\":7,\"49\":7,\"52\":1,\"54\":3}}],[\"递归的执行\",{\"1\":{\"7\":1}}],[\"处理\",{\"1\":{\"7\":1}}],[\"处理所有预编译指令\",{\"1\":{\"7\":1}}],[\"3f\",{\"1\":{\"52\":1}}],[\"3d\",{\"1\":{\"52\":1}}],[\"36\",{\"1\":{\"52\":1}}],[\"31\",{\"1\":{\"52\":5,\"53\":2}}],[\"31332e32\",{\"1\":{\"20\":1}}],[\"35\",{\"1\":{\"52\":2,\"53\":2}}],[\"3e\",{\"1\":{\"20\":1}}],[\"37\",{\"1\":{\"20\":1}}],[\"33\",{\"1\":{\"20\":1}}],[\"30\",{\"1\":{\"20\":1}}],[\"39000000\",{\"1\":{\"20\":1}}],[\"3c000000\",{\"1\":{\"20\":1}}],[\"3a202855\",{\"1\":{\"20\":1}}],[\"32\",{\"1\":{\"17\":1}}],[\"3\",{\"0\":{\"9\":1,\"14\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":2,\"23\":2,\"27\":1,\"32\":1,\"33\":1,\"39\":1,\"41\":1,\"50\":1,\"55\":1,\"57\":1},\"1\":{\"7\":1,\"17\":1,\"19\":3,\"22\":4,\"28\":1,\"39\":4,\"40\":1,\"49\":19,\"54\":1}}],[\"etext\",{\"1\":{\"40\":9}}],[\"ext\",{\"1\":{\"43\":1}}],[\"extern\",{\"0\":{\"42\":1},\"1\":{\"40\":4,\"42\":4,\"43\":1,\"46\":1}}],[\"external\",{\"1\":{\"35\":1}}],[\"extra\",{\"1\":{\"28\":1}}],[\"exclude\",{\"1\":{\"28\":1}}],[\"execution\",{\"1\":{\"29\":1}}],[\"execute\",{\"1\":{\"28\":1}}],[\"executable\",{\"1\":{\"17\":1,\"40\":7}}],[\"ei\",{\"1\":{\"25\":1}}],[\"edata\",{\"1\":{\"40\":6}}],[\"edx\",{\"1\":{\"20\":4}}],[\"edi\",{\"1\":{\"20\":2}}],[\"e8\",{\"1\":{\"20\":2,\"52\":3,\"53\":3}}],[\"e8000000\",{\"1\":{\"20\":1}}],[\"esi\",{\"1\":{\"20\":1}}],[\"eax\",{\"1\":{\"20\":11,\"52\":4,\"53\":4}}],[\"ec\",{\"1\":{\"20\":2,\"52\":1,\"53\":1}}],[\"e5\",{\"1\":{\"20\":2}}],[\"ehdr的e\",{\"1\":{\"29\":1}}],[\"ehdr\",{\"1\":{\"25\":1}}],[\"ehsize\",{\"1\":{\"25\":1}}],[\"eh\",{\"1\":{\"19\":1,\"20\":1,\"28\":2,\"49\":4,\"54\":2}}],[\"entsize\",{\"1\":{\"28\":1,\"29\":1}}],[\"entries\",{\"1\":{\"22\":1,\"39\":1,\"54\":1}}],[\"entry\",{\"1\":{\"14\":1,\"25\":7,\"29\":1,\"54\":2}}],[\"end\",{\"1\":{\"40\":12}}],[\"endian\",{\"1\":{\"25\":1}}],[\"endif\",{\"1\":{\"7\":1}}],[\"endbr64\",{\"1\":{\"20\":2,\"52\":1,\"53\":1}}],[\"e\",{\"1\":{\"7\":1,\"20\":6,\"25\":14,\"28\":1,\"41\":2}}],[\"elf符号表结构\",{\"0\":{\"36\":1},\"1\":{\"36\":1}}],[\"elf重定位类型\",{\"1\":{\"25\":1}}],[\"elf魔数\",{\"1\":{\"25\":1}}],[\"elf目标文件的最前部是elf文件头\",{\"1\":{\"24\":1}}],[\"elf64\",{\"1\":{\"19\":1,\"20\":1,\"25\":15,\"29\":12,\"36\":5,\"49\":3,\"52\":1,\"53\":1,\"54\":4}}],[\"elf文件中用到了很多字符串\",{\"1\":{\"34\":1}}],[\"elf文件头中指出了段表位于文件的偏移\",{\"1\":{\"29\":1}}],[\"elf文件头结构成员含义\",{\"1\":{\"25\":1}}],[\"elf文件头定义了\",{\"1\":{\"25\":1}}],[\"elf文件结构\",{\"1\":{\"24\":1}}],[\"elf文件结构描述\",{\"0\":{\"24\":1}}],[\"elf文件的开头是一个\",{\"1\":{\"18\":1}}],[\"elf文件标准里采用elf格式的文件\",{\"1\":{\"17\":1}}],[\"elf\",{\"1\":{\"17\":3,\"24\":1,\"25\":3,\"29\":1,\"36\":1}}],[\"else\",{\"1\":{\"7\":1,\"44\":1}}],[\"elif\",{\"1\":{\"7\":1}}],[\"is\",{\"1\":{\"44\":4}}],[\"id\",{\"1\":{\"49\":1}}],[\"ident\",{\"1\":{\"25\":1}}],[\"idx\",{\"1\":{\"19\":1,\"49\":3}}],[\"i\",{\"1\":{\"7\":3,\"8\":2,\"19\":2,\"28\":3,\"41\":1}}],[\"ifdef\",{\"1\":{\"7\":1}}],[\"if\",{\"1\":{\"7\":1,\"29\":1,\"44\":2}}],[\"in\",{\"1\":{\"25\":1,\"29\":1}}],[\"information\",{\"1\":{\"29\":1}}],[\"info\",{\"0\":{\"32\":1,\"37\":1},\"1\":{\"25\":1,\"28\":2,\"29\":1,\"33\":1,\"36\":1,\"54\":3}}],[\"index\",{\"1\":{\"25\":2,\"29\":1,\"36\":2,\"54\":1}}],[\"init\",{\"1\":{\"19\":1,\"21\":1,\"22\":1,\"35\":1,\"39\":2,\"49\":2}}],[\"into\",{\"1\":{\"25\":2}}],[\"interp\",{\"1\":{\"49\":1}}],[\"interpreter\",{\"1\":{\"17\":1}}],[\"intel\",{\"1\":{\"17\":1}}],[\"int\",{\"1\":{\"6\":1,\"19\":9,\"40\":1,\"41\":12,\"42\":8,\"43\":6,\"44\":3,\"46\":6}}],[\"include预编译指令\",{\"1\":{\"7\":1}}],[\"include\",{\"1\":{\"6\":1,\"25\":1,\"29\":1,\"36\":1,\"40\":1,\"42\":1,\"44\":2}}],[\"2c\",{\"1\":{\"52\":2}}],[\"26\",{\"1\":{\"49\":1}}],[\"25\",{\"1\":{\"49\":1,\"52\":2,\"53\":3}}],[\"25640a00\",{\"1\":{\"20\":1}}],[\"24\",{\"1\":{\"49\":1,\"52\":5,\"53\":5}}],[\"240\",{\"1\":{\"19\":1}}],[\"22\",{\"1\":{\"49\":1}}],[\"224\",{\"1\":{\"19\":1}}],[\"21\",{\"1\":{\"49\":1}}],[\"20\",{\"1\":{\"49\":1}}],[\"2f\",{\"1\":{\"20\":1,\"53\":2}}],[\"2b\",{\"1\":{\"20\":1,\"52\":2,\"53\":1}}],[\"2b000000\",{\"1\":{\"20\":1}}],[\"29\",{\"1\":{\"20\":1}}],[\"28\",{\"1\":{\"20\":2,\"52\":2,\"53\":3}}],[\"23\",{\"1\":{\"20\":1,\"49\":1}}],[\"23ubuntu4\",{\"1\":{\"20\":1}}],[\"2e3000\",{\"1\":{\"20\":1}}],[\"2e322e30\",{\"1\":{\"20\":1}}],[\"2d323375\",{\"1\":{\"20\":1}}],[\"2a\",{\"1\":{\"14\":1,\"20\":1}}],[\"2\",{\"0\":{\"8\":1,\"11\":1,\"12\":1,\"13\":2,\"14\":1,\"15\":1,\"18\":1,\"21\":1,\"26\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":2,\"32\":1,\"38\":1,\"40\":1,\"49\":1,\"51\":1,\"52\":1,\"54\":2,\"55\":1,\"56\":1},\"1\":{\"7\":3,\"17\":4,\"19\":11,\"20\":2,\"22\":1,\"25\":1,\"28\":1,\"39\":1,\"43\":2,\"49\":51}}],[\"展开所有宏定义\",{\"1\":{\"7\":1}}],[\"汇编\",{\"0\":{\"9\":1},\"1\":{\"6\":1}}],[\"编译\",{\"0\":{\"8\":1},\"1\":{\"6\":1}}],[\"编译和链接\",{\"0\":{\"5\":1}}],[\"预处理\",{\"0\":{\"7\":1},\"1\":{\"6\":1}}],[\"o2\",{\"1\":{\"46\":1}}],[\"o中所有要重定位的地方\",{\"1\":{\"54\":1}}],[\"o中的\",{\"1\":{\"39\":2}}],[\"o中有一个叫做\",{\"1\":{\"33\":1}}],[\"o共有10个有效段\",{\"1\":{\"28\":1}}],[\"order\",{\"1\":{\"28\":1}}],[\"other\",{\"1\":{\"25\":1,\"36\":1}}],[\"os\",{\"1\":{\"25\":1,\"28\":2}}],[\"of\",{\"1\":{\"20\":7,\"25\":7,\"52\":1,\"53\":1}}],[\"offset\",{\"1\":{\"19\":1,\"25\":2,\"28\":2,\"29\":2,\"54\":8}}],[\"off\",{\"1\":{\"19\":1,\"25\":2,\"29\":1,\"49\":3}}],[\"objdump\",{\"1\":{\"19\":1,\"20\":1,\"49\":3,\"52\":1,\"53\":1}}],[\"object\",{\"1\":{\"17\":1,\"22\":4,\"25\":2,\"39\":4}}],[\"o文件的static\",{\"1\":{\"35\":1}}],[\"o文件\",{\"1\":{\"17\":1}}],[\"o后缀的文件\",{\"1\":{\"15\":1}}],[\"o\",{\"0\":{\"19\":1},\"1\":{\"6\":1,\"7\":1,\"8\":1,\"9\":5,\"17\":2,\"19\":4,\"20\":2,\"22\":1,\"25\":1,\"28\":3,\"35\":1,\"39\":1,\"42\":1,\"44\":2,\"49\":4,\"50\":3,\"52\":2,\"54\":4}}],[\"07\",{\"1\":{\"52\":1,\"53\":1}}],[\"08\",{\"1\":{\"52\":2,\"53\":3}}],[\"08000000\",{\"1\":{\"20\":2}}],[\"04\",{\"1\":{\"52\":4,\"53\":5}}],[\"04000000\",{\"1\":{\"20\":2}}],[\"02\",{\"1\":{\"25\":1}}],[\"020000c0\",{\"1\":{\"20\":1}}],[\"0f\",{\"1\":{\"20\":2,\"52\":1,\"53\":4}}],[\"0f1efa55\",{\"1\":{\"20\":1}}],[\"06700c07\",{\"1\":{\"20\":1}}],[\"06620c07\",{\"1\":{\"20\":1}}],[\"01\",{\"1\":{\"20\":4,\"25\":2,\"53\":2}}],[\"01781001\",{\"1\":{\"20\":1}}],[\"017a5200\",{\"1\":{\"20\":1}}],[\"01d089c7\",{\"1\":{\"20\":1}}],[\"03000000\",{\"1\":{\"20\":1}}],[\"0x230\",{\"1\":{\"54\":1}}],[\"0x2fa1\",{\"1\":{\"53\":3}}],[\"0x28\",{\"1\":{\"52\":2,\"53\":3}}],[\"0x2a\",{\"1\":{\"14\":1}}],[\"0x74\",{\"1\":{\"29\":1}}],[\"0x390\",{\"1\":{\"29\":1}}],[\"0x1e8\",{\"1\":{\"54\":1}}],[\"0x11a0\",{\"1\":{\"53\":1}}],[\"0x1091\",{\"1\":{\"53\":1}}],[\"0x106f\",{\"1\":{\"53\":1}}],[\"0x1\",{\"1\":{\"25\":1}}],[\"0x8\",{\"1\":{\"20\":2,\"52\":2,\"53\":3}}],[\"0x4010\",{\"1\":{\"53\":1}}],[\"0x408\",{\"1\":{\"28\":1,\"29\":1}}],[\"0x4\",{\"1\":{\"20\":3,\"52\":2,\"53\":2}}],[\"0x0000000000000004\",{\"1\":{\"54\":3}}],[\"0x010f\",{\"1\":{\"53\":1}}],[\"0x04正好是段表在elf文件中的偏移\",{\"1\":{\"29\":1}}],[\"0x0\",{\"1\":{\"14\":1,\"20\":3,\"25\":2,\"52\":2}}],[\"000200000002\",{\"1\":{\"54\":1}}],[\"000600000004\",{\"1\":{\"54\":1}}],[\"000500000004\",{\"1\":{\"54\":1}}],[\"000400000002\",{\"1\":{\"54\":1}}],[\"00003014\",{\"1\":{\"49\":2}}],[\"00003000\",{\"1\":{\"49\":1}}],[\"00002fb8\",{\"1\":{\"49\":1}}],[\"00002dc8\",{\"1\":{\"49\":1}}],[\"00002dc0\",{\"1\":{\"49\":1}}],[\"00002db8\",{\"1\":{\"49\":1}}],[\"00002040\",{\"1\":{\"49\":1}}],[\"00002004\",{\"1\":{\"49\":1}}],[\"00002000\",{\"1\":{\"49\":1}}],[\"000011f0\",{\"1\":{\"49\":1}}],[\"00001060\",{\"1\":{\"49\":1}}],[\"00001050\",{\"1\":{\"49\":1}}],[\"00001040\",{\"1\":{\"49\":1}}],[\"00001020\",{\"1\":{\"49\":1}}],[\"00001000\",{\"1\":{\"49\":1}}],[\"0000c9c3\",{\"1\":{\"20\":1}}],[\"00000638\",{\"1\":{\"49\":1}}],[\"00000578\",{\"1\":{\"49\":1}}],[\"00000538\",{\"1\":{\"49\":1}}],[\"00000524\",{\"1\":{\"49\":1}}],[\"00000480\",{\"1\":{\"49\":1}}],[\"000003d8\",{\"1\":{\"49\":1}}],[\"000003b0\",{\"1\":{\"49\":1}}],[\"0000038c\",{\"1\":{\"49\":1}}],[\"00000368\",{\"1\":{\"49\":1}}],[\"00000360\",{\"1\":{\"28\":1}}],[\"00000338\",{\"1\":{\"49\":1}}],[\"00000318\",{\"1\":{\"49\":1}}],[\"00000390\",{\"1\":{\"28\":1}}],[\"00000288\",{\"1\":{\"28\":1}}],[\"000002e8\",{\"1\":{\"28\":1}}],[\"000001f0\",{\"1\":{\"49\":1}}],[\"00000190\",{\"1\":{\"49\":1}}],[\"00000150\",{\"1\":{\"28\":1}}],[\"000001c2\",{\"1\":{\"20\":1}}],[\"000000cc\",{\"1\":{\"49\":1}}],[\"000000c0\",{\"1\":{\"49\":3}}],[\"00000014\",{\"1\":{\"49\":1}}],[\"00000010\",{\"1\":{\"49\":2}}],[\"0000001b\",{\"1\":{\"49\":1}}],[\"00000018\",{\"1\":{\"49\":1}}],[\"0000001c\",{\"1\":{\"49\":1}}],[\"0000003c\",{\"1\":{\"49\":1}}],[\"00000030\",{\"1\":{\"49\":1}}],[\"00000038\",{\"1\":{\"49\":2}}],[\"00000094\",{\"1\":{\"49\":2}}],[\"00000090\",{\"1\":{\"49\":1}}],[\"00000098\",{\"1\":{\"49\":3}}],[\"000000e0\",{\"1\":{\"49\":2}}],[\"000000e8\",{\"1\":{\"20\":1}}],[\"000000bb\",{\"1\":{\"49\":1}}],[\"000000bf\",{\"1\":{\"49\":1}}],[\"000000b0\",{\"1\":{\"19\":1,\"28\":1}}],[\"0000004f\",{\"1\":{\"49\":1}}],[\"00000048\",{\"1\":{\"20\":1,\"49\":1}}],[\"00000040\",{\"1\":{\"19\":1,\"28\":1,\"49\":3}}],[\"000000f8\",{\"1\":{\"19\":1,\"28\":1}}],[\"00000058\",{\"1\":{\"19\":1,\"49\":1}}],[\"000000d8\",{\"1\":{\"19\":1,\"28\":1}}],[\"000000d7\",{\"1\":{\"19\":1,\"28\":1}}],[\"00000026\",{\"1\":{\"49\":1}}],[\"00000024\",{\"1\":{\"49\":2}}],[\"00000020\",{\"1\":{\"19\":1,\"49\":4}}],[\"00000027\",{\"1\":{\"19\":1,\"49\":2}}],[\"000000a3\",{\"1\":{\"49\":1}}],[\"000000a8\",{\"1\":{\"49\":1}}],[\"000000ac\",{\"1\":{\"19\":2,\"28\":2}}],[\"000000a4\",{\"1\":{\"19\":1,\"28\":1}}],[\"0000000d\",{\"1\":{\"49\":1}}],[\"0000000e\",{\"1\":{\"49\":1}}],[\"000000000020\",{\"1\":{\"54\":1}}],[\"00000000002d\",{\"1\":{\"54\":1}}],[\"000000000049\",{\"1\":{\"54\":1}}],[\"00000000000b\",{\"1\":{\"54\":1}}],[\"0000000000004014\",{\"1\":{\"49\":2}}],[\"0000000000004000\",{\"1\":{\"49\":2}}],[\"0000000000003fb8\",{\"1\":{\"49\":2}}],[\"0000000000003dc8\",{\"1\":{\"49\":2}}],[\"0000000000003dc0\",{\"1\":{\"49\":2}}],[\"0000000000003db8\",{\"1\":{\"49\":2}}],[\"0000000000002040\",{\"1\":{\"49\":2}}],[\"0000000000002004\",{\"1\":{\"49\":2}}],[\"0000000000002000\",{\"1\":{\"49\":2}}],[\"00000000000011f0\",{\"1\":{\"49\":2}}],[\"0000000000001060\",{\"1\":{\"49\":2,\"53\":1}}],[\"0000000000001050\",{\"1\":{\"49\":2}}],[\"0000000000001040\",{\"1\":{\"49\":2}}],[\"0000000000001020\",{\"1\":{\"49\":2}}],[\"0000000000001000\",{\"1\":{\"49\":2}}],[\"0000000000000638\",{\"1\":{\"49\":2}}],[\"0000000000000578\",{\"1\":{\"49\":2}}],[\"0000000000000538\",{\"1\":{\"49\":2}}],[\"0000000000000524\",{\"1\":{\"49\":2}}],[\"0000000000000480\",{\"1\":{\"49\":2}}],[\"00000000000003d8\",{\"1\":{\"49\":2}}],[\"00000000000003b0\",{\"1\":{\"49\":2}}],[\"000000000000038c\",{\"1\":{\"49\":2}}],[\"0000000000000368\",{\"1\":{\"49\":2}}],[\"0000000000000338\",{\"1\":{\"49\":2}}],[\"0000000000000318\",{\"1\":{\"49\":2}}],[\"0000000000000138\",{\"1\":{\"28\":1}}],[\"0000000000000049\",{\"1\":{\"54\":1}}],[\"0000000000000074\",{\"1\":{\"28\":1}}],[\"0000000000000078\",{\"1\":{\"28\":1}}],[\"0000000000000060\",{\"1\":{\"28\":1}}],[\"0000000000000064\",{\"1\":{\"28\":1}}],[\"0000000000000030\",{\"1\":{\"28\":1}}],[\"0000000000000058\",{\"1\":{\"28\":1}}],[\"000000000000002d\",{\"1\":{\"54\":1}}],[\"0000000000000020\",{\"1\":{\"28\":1,\"54\":1}}],[\"0000000000000027\",{\"1\":{\"28\":1}}],[\"000000000000002b\",{\"1\":{\"20\":1,\"22\":1,\"35\":1,\"39\":1}}],[\"0000000000000018\",{\"1\":{\"28\":3}}],[\"000000000000000b\",{\"1\":{\"54\":1}}],[\"0000000000000001\",{\"1\":{\"28\":1}}],[\"0000000000000008\",{\"1\":{\"28\":1}}],[\"0000000000000004\",{\"1\":{\"22\":2,\"28\":2,\"35\":2,\"39\":2}}],[\"0000000000000000\",{\"1\":{\"19\":16,\"20\":1,\"22\":10,\"28\":26,\"35\":3,\"39\":10,\"49\":30,\"52\":1,\"54\":4}}],[\"00000000\",{\"1\":{\"19\":1,\"20\":6,\"28\":1,\"49\":5}}],[\"00000004\",{\"1\":{\"19\":1,\"49\":3}}],[\"00000008\",{\"1\":{\"19\":2,\"49\":2}}],[\"00000064\",{\"1\":{\"19\":1}}],[\"00008b15\",{\"1\":{\"20\":1}}],[\"0000\",{\"1\":{\"20\":6}}],[\"00450e10\",{\"1\":{\"20\":2}}],[\"00474343\",{\"1\":{\"20\":1}}],[\"0040\",{\"1\":{\"20\":2}}],[\"0060\",{\"1\":{\"20\":1}}],[\"00b80000\",{\"1\":{\"20\":1}}],[\"0050\",{\"1\":{\"20\":2}}],[\"0030\",{\"1\":{\"20\":2}}],[\"0020\",{\"1\":{\"20\":3}}],[\"0010\",{\"1\":{\"20\":4}}],[\"00\",{\"1\":{\"14\":4,\"20\":31,\"25\":9,\"52\":29,\"53\":19}}],[\"05000000\",{\"1\":{\"20\":1}}],[\"05\",{\"1\":{\"14\":1,\"20\":2}}],[\"0\",{\"1\":{\"6\":1,\"17\":1,\"19\":6,\"20\":3,\"22\":9,\"25\":4,\"28\":24,\"35\":1,\"39\":9,\"40\":1,\"42\":1,\"43\":1,\"46\":1,\"49\":16,\"52\":1,\"54\":1}}],[\"nm\",{\"1\":{\"35\":1}}],[\"null\",{\"1\":{\"28\":2}}],[\"number\",{\"1\":{\"25\":3}}],[\"num\",{\"1\":{\"22\":1,\"39\":1}}],[\"nr\",{\"1\":{\"28\":1}}],[\"nident\",{\"1\":{\"25\":1}}],[\"ndx\",{\"1\":{\"22\":1,\"39\":1}}],[\"nobits\",{\"1\":{\"28\":1}}],[\"nopl\",{\"1\":{\"53\":1}}],[\"nop\",{\"1\":{\"20\":1}}],[\"notype\",{\"1\":{\"22\":2,\"39\":2}}],[\"note\",{\"1\":{\"19\":4,\"20\":1,\"28\":3,\"49\":7}}],[\"not\",{\"1\":{\"17\":1,\"62\":1}}],[\"namespace\",{\"1\":{\"40\":1,\"41\":1,\"42\":1}}],[\"name\",{\"1\":{\"19\":1,\"22\":1,\"28\":1,\"29\":2,\"35\":1,\"36\":2,\"39\":1,\"41\":2,\"49\":3,\"54\":2}}],[\"n\",{\"1\":{\"6\":1,\"19\":1,\"21\":1,\"40\":4,\"41\":3,\"42\":1,\"44\":2}}],[\"hdr\",{\"1\":{\"49\":1}}],[\"hash\",{\"1\":{\"49\":1}}],[\"half\",{\"1\":{\"25\":8}}],[\"holds\",{\"1\":{\"29\":1}}],[\"h来查看elf文件中包含的段\",{\"1\":{\"28\":1}}],[\"h指令即可查看elf文件头\",{\"1\":{\"25\":1}}],[\"h指令打印elf文件的各个段的基本信息\",{\"1\":{\"19\":1}}],[\"headers\",{\"1\":{\"25\":6,\"28\":2}}],[\"header\",{\"1\":{\"24\":2,\"25\":11,\"34\":1}}],[\"hex\",{\"1\":{\"19\":1}}],[\"hello\",{\"1\":{\"6\":6,\"7\":5,\"8\":3,\"9\":4}}],[\"h\",{\"1\":{\"19\":1,\"20\":5,\"25\":2,\"29\":1,\"36\":1,\"49\":3}}],[\"h>\",{\"1\":{\"6\":1,\"40\":1,\"42\":1,\"44\":2}}],[\"被隐藏的过程\",{\"0\":{\"6\":1}}],[\"1f\",{\"1\":{\"52\":1,\"53\":1}}],[\"1d\",{\"1\":{\"52\":1}}],[\"19\",{\"1\":{\"49\":1}}],[\"18\",{\"1\":{\"49\":1,\"52\":3,\"53\":2}}],[\"17\",{\"1\":{\"49\":1}}],[\"16\",{\"1\":{\"49\":1,\"52\":1}}],[\"15\",{\"1\":{\"20\":1,\"49\":1}}],[\"1b\",{\"1\":{\"20\":2}}],[\"1b0c0708\",{\"1\":{\"20\":1}}],[\"14\",{\"1\":{\"20\":1,\"25\":1,\"28\":1,\"49\":1}}],[\"14000000\",{\"1\":{\"20\":1}}],[\"12\",{\"1\":{\"20\":1,\"22\":1,\"28\":2,\"39\":1,\"49\":1}}],[\"1050\",{\"1\":{\"53\":1}}],[\"10ad\",{\"1\":{\"53\":1}}],[\"10a7\",{\"1\":{\"53\":1}}],[\"10a3\",{\"1\":{\"53\":1}}],[\"10a1\",{\"1\":{\"53\":1}}],[\"10a8\",{\"1\":{\"53\":2}}],[\"109f\",{\"1\":{\"53\":1}}],[\"109d\",{\"1\":{\"53\":1}}],[\"1096\",{\"1\":{\"53\":1}}],[\"1091\",{\"1\":{\"53\":2}}],[\"108c\",{\"1\":{\"53\":2}}],[\"108b\",{\"1\":{\"53\":1}}],[\"1084\",{\"1\":{\"53\":1}}],[\"107f\",{\"1\":{\"53\":1}}],[\"107d\",{\"1\":{\"53\":1}}],[\"1078\",{\"1\":{\"53\":1}}],[\"1076\",{\"1\":{\"53\":1}}],[\"106f\",{\"1\":{\"53\":2}}],[\"1068\",{\"1\":{\"53\":2}}],[\"1064\",{\"1\":{\"53\":1}}],[\"1060\",{\"1\":{\"53\":1}}],[\"100\",{\"1\":{\"46\":1}}],[\"10000000\",{\"1\":{\"20\":1}}],[\"1032\",{\"1\":{\"25\":1}}],[\"10\",{\"1\":{\"20\":2,\"22\":1,\"28\":1,\"39\":1,\"49\":1}}],[\"1e\",{\"1\":{\"20\":3,\"52\":1,\"53\":1}}],[\"1c000000\",{\"1\":{\"20\":3}}],[\"13\",{\"1\":{\"20\":2,\"22\":1,\"25\":1,\"28\":1,\"39\":1,\"49\":1}}],[\"11a0\",{\"1\":{\"53\":2}}],[\"11\",{\"1\":{\"8\":1,\"22\":1,\"28\":3,\"39\":1,\"49\":1}}],[\"1\",{\"0\":{\"6\":1,\"7\":2,\"8\":1,\"9\":1,\"10\":1,\"12\":1,\"17\":1,\"20\":1,\"25\":1,\"26\":1,\"27\":1,\"29\":1,\"30\":2,\"31\":1,\"32\":1,\"36\":1,\"37\":2,\"38\":1,\"39\":1,\"41\":1,\"47\":1,\"48\":2,\"49\":1,\"50\":1,\"52\":1},\"1\":{\"7\":1,\"17\":3,\"19\":2,\"22\":5,\"25\":1,\"28\":8,\"35\":1,\"39\":5,\"43\":2,\"46\":1,\"49\":4,\"54\":1}}],[\"链接过程控制\",{\"0\":{\"60\":1}}],[\"链接器就会报服啊后未定义的错误\",{\"1\":{\"44\":1}}],[\"链接的接口\",{\"0\":{\"35\":1}}],[\"链接的过程就是将几个输入目标文件加工合并成一个输出文件的过程\",{\"1\":{\"47\":1}}],[\"链接的过程就是把多个不同的目标文件之间相互衔接的过程\",{\"1\":{\"35\":1}}],[\"链接的过程\",{\"0\":{\"13\":1}}],[\"链接的本质就是把一些指令对其它符号地址的引用加以修改\",{\"1\":{\"12\":1}}],[\"链接的基本定义\",{\"0\":{\"12\":1}}],[\"链接一堆文件生成最终的可执行文件的过程\",{\"1\":{\"10\":1}}],[\"链接\",{\"0\":{\"4\":1,\"10\":1},\"1\":{\"6\":1}}],[\"chk\",{\"1\":{\"53\":1,\"54\":2}}],[\"char\",{\"1\":{\"19\":1,\"25\":1,\"36\":2,\"40\":4}}],[\"c4\",{\"1\":{\"52\":1,\"53\":1}}],[\"c0\",{\"1\":{\"52\":2,\"53\":2}}],[\"create\",{\"1\":{\"44\":2}}],[\"csapp\",{\"1\":{\"43\":1}}],[\"cc\",{\"1\":{\"42\":2}}],[\"cc1\",{\"1\":{\"8\":1}}],[\"c语言源代码文件中的所有全局的变量和函数经过编译后\",{\"1\":{\"40\":1}}],[\"current\",{\"1\":{\"25\":1}}],[\"class\",{\"1\":{\"25\":1,\"41\":3}}],[\"c代码中用在调用printf时用到了字符字面量\",{\"1\":{\"21\":1}}],[\"c代码中一共有两个这样的变量\",{\"1\":{\"21\":1,\"22\":1}}],[\"c2\",{\"1\":{\"20\":2,\"41\":1}}],[\"c28b45fc\",{\"1\":{\"20\":1}}],[\"c3\",{\"1\":{\"20\":2,\"52\":1,\"53\":1}}],[\"c9\",{\"1\":{\"20\":2}}],[\"call\",{\"1\":{\"20\":2,\"52\":3,\"53\":3}}],[\"c6\",{\"1\":{\"20\":1}}],[\"count\",{\"1\":{\"25\":2}}],[\"compressed\",{\"1\":{\"28\":1}}],[\"complement\",{\"1\":{\"25\":1}}],[\"com\",{\"1\":{\"22\":1,\"39\":1}}],[\"common块\",{\"0\":{\"57\":1},\"1\":{\"39\":2}}],[\"common\",{\"1\":{\"22\":1}}],[\"comment\",{\"1\":{\"19\":2,\"20\":1,\"28\":1,\"49\":3}}],[\"code\",{\"1\":{\"19\":1,\"49\":8}}],[\"contains\",{\"1\":{\"22\":1,\"39\":1,\"54\":2}}],[\"contents\",{\"1\":{\"19\":8,\"20\":6,\"49\":38}}],[\"const变量\",{\"1\":{\"21\":1}}],[\"const\",{\"1\":{\"19\":1,\"44\":1}}],[\"core\",{\"1\":{\"17\":1}}],[\"c7\",{\"1\":{\"14\":1,\"20\":3,\"52\":1,\"53\":1}}],[\"cpp\",{\"1\":{\"7\":1}}],[\"c++相关问题\",{\"0\":{\"58\":1}}],[\"c++编译器默认函数和初始化了的全局变量为强符号\",{\"1\":{\"43\":1}}],[\"c++编译器会将extern\",{\"1\":{\"42\":1}}],[\"c++中的全局变量和静态变量也有同样的机制\",{\"1\":{\"41\":1}}],[\"c++filt\",{\"1\":{\"41\":2}}],[\"c++名称修饰\",{\"1\":{\"41\":1}}],[\"c++\",{\"0\":{\"1\":1,\"41\":1},\"2\":{\"2\":1,\"3\":1}}],[\"c\",{\"0\":{\"1\":1,\"42\":1},\"1\":{\"6\":2,\"7\":3,\"9\":1,\"20\":3,\"22\":3,\"28\":1,\"35\":1,\"39\":1,\"40\":1,\"41\":5,\"42\":5,\"43\":3,\"44\":3,\"46\":5},\"2\":{\"2\":1,\"3\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
